{"meta":{"version":1,"warehouse":"2.2.0"},"models":{"Asset":[{"_id":"themes/next/source/css/main.styl","path":"css/main.styl","modified":0,"renderable":1},{"_id":"themes/next/source/images/algolia_logo.svg","path":"images/algolia_logo.svg","modified":0,"renderable":1},{"_id":"themes/next/source/images/avatar.gif","path":"images/avatar.gif","modified":0,"renderable":1},{"_id":"themes/next/source/images/cc-by-nc-nd.svg","path":"images/cc-by-nc-nd.svg","modified":0,"renderable":1},{"_id":"themes/next/source/images/cc-by-nc-sa.svg","path":"images/cc-by-nc-sa.svg","modified":0,"renderable":1},{"_id":"themes/next/source/images/cc-by-nc.svg","path":"images/cc-by-nc.svg","modified":0,"renderable":1},{"_id":"themes/next/source/images/cc-by-nd.svg","path":"images/cc-by-nd.svg","modified":0,"renderable":1},{"_id":"themes/next/source/images/cc-by-sa.svg","path":"images/cc-by-sa.svg","modified":0,"renderable":1},{"_id":"themes/next/source/images/cc-by.svg","path":"images/cc-by.svg","modified":0,"renderable":1},{"_id":"themes/next/source/images/cc-zero.svg","path":"images/cc-zero.svg","modified":0,"renderable":1},{"_id":"themes/next/source/images/loading.gif","path":"images/loading.gif","modified":0,"renderable":1},{"_id":"themes/next/source/images/placeholder.gif","path":"images/placeholder.gif","modified":0,"renderable":1},{"_id":"themes/next/source/images/quote-l.svg","path":"images/quote-l.svg","modified":0,"renderable":1},{"_id":"themes/next/source/images/quote-r.svg","path":"images/quote-r.svg","modified":0,"renderable":1},{"_id":"themes/next/source/images/searchicon.png","path":"images/searchicon.png","modified":0,"renderable":1},{"_id":"themes/next/source/js/src/affix.js","path":"js/src/affix.js","modified":0,"renderable":1},{"_id":"themes/next/source/js/src/algolia-search.js","path":"js/src/algolia-search.js","modified":0,"renderable":1},{"_id":"themes/next/source/js/src/bootstrap.js","path":"js/src/bootstrap.js","modified":0,"renderable":1},{"_id":"themes/next/source/js/src/hook-duoshuo.js","path":"js/src/hook-duoshuo.js","modified":0,"renderable":1},{"_id":"themes/next/source/js/src/motion.js","path":"js/src/motion.js","modified":0,"renderable":1},{"_id":"themes/next/source/js/src/post-details.js","path":"js/src/post-details.js","modified":0,"renderable":1},{"_id":"themes/next/source/js/src/scrollspy.js","path":"js/src/scrollspy.js","modified":0,"renderable":1},{"_id":"themes/next/source/js/src/utils.js","path":"js/src/utils.js","modified":0,"renderable":1},{"_id":"themes/next/source/lib/algolia-instant-search/instantsearch.min.css","path":"lib/algolia-instant-search/instantsearch.min.css","modified":0,"renderable":1},{"_id":"themes/next/source/lib/canvas-nest/canvas-nest.min.js","path":"lib/canvas-nest/canvas-nest.min.js","modified":0,"renderable":1},{"_id":"themes/next/source/lib/fastclick/LICENSE","path":"lib/fastclick/LICENSE","modified":0,"renderable":1},{"_id":"themes/next/source/lib/fastclick/README.md","path":"lib/fastclick/README.md","modified":0,"renderable":1},{"_id":"themes/next/source/lib/fastclick/bower.json","path":"lib/fastclick/bower.json","modified":0,"renderable":1},{"_id":"themes/next/source/lib/font-awesome/HELP-US-OUT.txt","path":"lib/font-awesome/HELP-US-OUT.txt","modified":0,"renderable":1},{"_id":"themes/next/source/lib/font-awesome/bower.json","path":"lib/font-awesome/bower.json","modified":0,"renderable":1},{"_id":"themes/next/source/lib/jquery_lazyload/CONTRIBUTING.md","path":"lib/jquery_lazyload/CONTRIBUTING.md","modified":0,"renderable":1},{"_id":"themes/next/source/lib/jquery_lazyload/README.md","path":"lib/jquery_lazyload/README.md","modified":0,"renderable":1},{"_id":"themes/next/source/lib/jquery_lazyload/bower.json","path":"lib/jquery_lazyload/bower.json","modified":0,"renderable":1},{"_id":"themes/next/source/lib/jquery_lazyload/jquery.lazyload.js","path":"lib/jquery_lazyload/jquery.lazyload.js","modified":0,"renderable":1},{"_id":"themes/next/source/lib/jquery_lazyload/jquery.scrollstop.js","path":"lib/jquery_lazyload/jquery.scrollstop.js","modified":0,"renderable":1},{"_id":"themes/next/source/lib/velocity/bower.json","path":"lib/velocity/bower.json","modified":0,"renderable":1},{"_id":"themes/next/source/lib/velocity/velocity.min.js","path":"lib/velocity/velocity.min.js","modified":0,"renderable":1},{"_id":"themes/next/source/lib/velocity/velocity.ui.min.js","path":"lib/velocity/velocity.ui.min.js","modified":0,"renderable":1},{"_id":"themes/next/source/lib/velocity/velocity.ui.js","path":"lib/velocity/velocity.ui.js","modified":0,"renderable":1},{"_id":"themes/next/source/lib/jquery/index.js","path":"lib/jquery/index.js","modified":0,"renderable":1},{"_id":"themes/next/source/js/src/schemes/pisces.js","path":"js/src/schemes/pisces.js","modified":0,"renderable":1},{"_id":"themes/next/source/lib/fancybox/source/fancybox_loading.gif","path":"lib/fancybox/source/fancybox_loading.gif","modified":0,"renderable":1},{"_id":"themes/next/source/lib/fancybox/source/blank.gif","path":"lib/fancybox/source/blank.gif","modified":0,"renderable":1},{"_id":"themes/next/source/lib/fancybox/source/fancybox_loading@2x.gif","path":"lib/fancybox/source/fancybox_loading@2x.gif","modified":0,"renderable":1},{"_id":"themes/next/source/lib/fancybox/source/fancybox_overlay.png","path":"lib/fancybox/source/fancybox_overlay.png","modified":0,"renderable":1},{"_id":"themes/next/source/lib/fancybox/source/fancybox_sprite.png","path":"lib/fancybox/source/fancybox_sprite.png","modified":0,"renderable":1},{"_id":"themes/next/source/lib/fancybox/source/fancybox_sprite@2x.png","path":"lib/fancybox/source/fancybox_sprite@2x.png","modified":0,"renderable":1},{"_id":"themes/next/source/lib/fancybox/source/jquery.fancybox.css","path":"lib/fancybox/source/jquery.fancybox.css","modified":0,"renderable":1},{"_id":"themes/next/source/lib/fancybox/source/jquery.fancybox.js","path":"lib/fancybox/source/jquery.fancybox.js","modified":0,"renderable":1},{"_id":"themes/next/source/lib/fancybox/source/jquery.fancybox.pack.js","path":"lib/fancybox/source/jquery.fancybox.pack.js","modified":0,"renderable":1},{"_id":"themes/next/source/lib/fastclick/lib/fastclick.js","path":"lib/fastclick/lib/fastclick.js","modified":0,"renderable":1},{"_id":"themes/next/source/lib/fastclick/lib/fastclick.min.js","path":"lib/fastclick/lib/fastclick.min.js","modified":0,"renderable":1},{"_id":"themes/next/source/lib/font-awesome/css/font-awesome.css","path":"lib/font-awesome/css/font-awesome.css","modified":0,"renderable":1},{"_id":"themes/next/source/lib/font-awesome/css/font-awesome.css.map","path":"lib/font-awesome/css/font-awesome.css.map","modified":0,"renderable":1},{"_id":"themes/next/source/lib/font-awesome/css/font-awesome.min.css","path":"lib/font-awesome/css/font-awesome.min.css","modified":0,"renderable":1},{"_id":"themes/next/source/lib/ua-parser-js/dist/ua-parser.min.js","path":"lib/ua-parser-js/dist/ua-parser.min.js","modified":0,"renderable":1},{"_id":"themes/next/source/lib/ua-parser-js/dist/ua-parser.pack.js","path":"lib/ua-parser-js/dist/ua-parser.pack.js","modified":0,"renderable":1},{"_id":"themes/next/source/lib/font-awesome/fonts/fontawesome-webfont.eot","path":"lib/font-awesome/fonts/fontawesome-webfont.eot","modified":0,"renderable":1},{"_id":"themes/next/source/lib/font-awesome/fonts/fontawesome-webfont.woff2","path":"lib/font-awesome/fonts/fontawesome-webfont.woff2","modified":0,"renderable":1},{"_id":"themes/next/source/lib/font-awesome/fonts/fontawesome-webfont.woff","path":"lib/font-awesome/fonts/fontawesome-webfont.woff","modified":0,"renderable":1},{"_id":"themes/next/source/lib/velocity/velocity.js","path":"lib/velocity/velocity.js","modified":0,"renderable":1},{"_id":"themes/next/source/lib/fancybox/source/helpers/fancybox_buttons.png","path":"lib/fancybox/source/helpers/fancybox_buttons.png","modified":0,"renderable":1},{"_id":"themes/next/source/lib/fancybox/source/helpers/jquery.fancybox-buttons.css","path":"lib/fancybox/source/helpers/jquery.fancybox-buttons.css","modified":0,"renderable":1},{"_id":"themes/next/source/lib/fancybox/source/helpers/jquery.fancybox-buttons.js","path":"lib/fancybox/source/helpers/jquery.fancybox-buttons.js","modified":0,"renderable":1},{"_id":"themes/next/source/lib/fancybox/source/helpers/jquery.fancybox-media.js","path":"lib/fancybox/source/helpers/jquery.fancybox-media.js","modified":0,"renderable":1},{"_id":"themes/next/source/lib/fancybox/source/helpers/jquery.fancybox-thumbs.css","path":"lib/fancybox/source/helpers/jquery.fancybox-thumbs.css","modified":0,"renderable":1},{"_id":"themes/next/source/lib/fancybox/source/helpers/jquery.fancybox-thumbs.js","path":"lib/fancybox/source/helpers/jquery.fancybox-thumbs.js","modified":0,"renderable":1},{"_id":"themes/next/source/lib/font-awesome/fonts/FontAwesome.otf","path":"lib/font-awesome/fonts/FontAwesome.otf","modified":0,"renderable":1},{"_id":"themes/next/source/lib/font-awesome/fonts/fontawesome-webfont.ttf","path":"lib/font-awesome/fonts/fontawesome-webfont.ttf","modified":0,"renderable":1},{"_id":"themes/next/source/lib/algolia-instant-search/instantsearch.min.js","path":"lib/algolia-instant-search/instantsearch.min.js","modified":0,"renderable":1},{"_id":"themes/next/source/lib/font-awesome/fonts/fontawesome-webfont.svg","path":"lib/font-awesome/fonts/fontawesome-webfont.svg","modified":0,"renderable":1}],"Cache":[{"_id":"source/.DS_Store","hash":"99bbc9de8e4620b3c33f9438f83fa01a02ac95b0","modified":1611416549877},{"_id":"themes/next/.DS_Store","hash":"1002fab57bcf4053db17020b8b217c889d844345","modified":1611416549914},{"_id":"themes/next/.editorconfig","hash":"792fd2bd8174ece1a75d5fd24ab16594886f3a7f","modified":1611416695451},{"_id":"themes/next/.bowerrc","hash":"3228a58ed0ece9f85e1e3136352094080b8dece1","modified":1611416695451},{"_id":"themes/next/.hound.yml","hash":"b76daa84c9ca3ad292c78412603370a367cc2bc3","modified":1611416695452},{"_id":"themes/next/.gitignore","hash":"5f09fca02e030b7676c1d312cd88ce8fbccf381c","modified":1611416695452},{"_id":"themes/next/.javascript_ignore","hash":"f9ea3c5395f8feb225a24e2c32baa79afda30c16","modified":1611416695452},{"_id":"themes/next/.jshintrc","hash":"9928f81bd822f6a8d67fdbc909b517178533bca9","modified":1611416695453},{"_id":"themes/next/README.en.md","hash":"3b0c7998cf17f9cf9e1a5bfcd65679a43a00c817","modified":1611416695453},{"_id":"themes/next/README.md","hash":"500b5606eb6a09c979d16128f8b00f4bf9bc95ac","modified":1611416695453},{"_id":"themes/next/bower.json","hash":"5abc236d9cc2512f5457ed57c1fba76669eb7399","modified":1611416695454},{"_id":"themes/next/_config.yml","hash":"d57a6bd4463ad5bed7a389830ba8a9e379797174","modified":1611416695453},{"_id":"themes/next/gulpfile.coffee","hash":"61ef0606a8134894d7ac796bc8d0fa4ba6a94483","modified":1611416695454},{"_id":"themes/next/package.json","hash":"877cb98025e59015532c4c9a04a33e2af4ad56f9","modified":1611416695472},{"_id":"source/_posts/ButterKnife源码分析.md","hash":"8e4f13736a13ce347137f81491d9fee57da7b61f","modified":1611416695448},{"_id":"source/_posts/Git常用操作命令收集.md","hash":"e84855cc2b1505afd342265abd73a820a8344124","modified":1611416695449},{"_id":"source/_posts/Handler消息机制源码分析.md","hash":"7619c13317f67b59012a4f5c6bf9837cec0cd56e","modified":1611416695449},{"_id":"source/_posts/LayoutInflater源码分析.md","hash":"c029b26a4c73172aebb9f15ee5aee65b8dab0f95","modified":1611416695449},{"_id":"source/_posts/View的状态保存和恢复.md","hash":"fa291e99b2aa927aec5d1ac8fba3278e4183a84a","modified":1611416695449},{"_id":"source/_posts/事件分发源码分析.md","hash":"69b61a03073da1303e124c33d99118ea26a0e9e9","modified":1611416695450},{"_id":"source/_posts/使用Sparse Checkout，拉取Git仓库中指定的目录.md","hash":"edee8479f33dac786865d655e6bbcc9627d540e7","modified":1611416695450},{"_id":"source/categories/index.md","hash":"bfb753fc95424ddb3e56f736b00920fe1728c05f","modified":1611416695450},{"_id":"source/tags/index.md","hash":"254e08d280d9862dcbd3f1a0a23341d06f458f60","modified":1611416695451},{"_id":"themes/next/.github/CONTRIBUTING.md","hash":"5ab257af816986cd0e53f9527a92d5934ac70ae9","modified":1611416695452},{"_id":"themes/next/.github/ISSUE_TEMPLATE.md","hash":"c2024ded82143807c28a299c5fe6b927ef3525ff","modified":1611416695452},{"_id":"themes/next/languages/de.yml","hash":"1fdea1f84b7f691f5b4dd4d2b43eeb27b10fa0c8","modified":1611416695454},{"_id":"themes/next/languages/default.yml","hash":"767470a80dc257e23e14c3a78e8c52a46c9d6209","modified":1611416695454},{"_id":"themes/next/languages/en.yml","hash":"40057d6608e825d06e0864bac4dcd27ed88ada87","modified":1611416695455},{"_id":"themes/next/languages/id.yml","hash":"34396bef27c4ab9e9a3c5d3e3aa94b0e3b3a7b0d","modified":1611416695455},{"_id":"themes/next/languages/fr-FR.yml","hash":"9fca01ef917d33ae2ae6bc04561ec6799dff5351","modified":1611416695455},{"_id":"themes/next/languages/ja.yml","hash":"49f12149edcc1892b26a6207328cda64da20116d","modified":1611416695455},{"_id":"themes/next/languages/pt-BR.yml","hash":"7742ba4c0d682cbe1d38305332ebc928abd754b5","modified":1611416695455},{"_id":"themes/next/languages/pt.yml","hash":"6b660b117314cad93f08757601df3adb04c68beb","modified":1611416695456},{"_id":"themes/next/languages/ko.yml","hash":"b6bc5d6b0c000deb44099b42d3aebb8c49dbfca9","modified":1611416695455},{"_id":"themes/next/languages/ru.yml","hash":"257d11e626cbe4b9b78785a764190b9278f95c28","modified":1611416695456},{"_id":"themes/next/languages/zh-Hans.yml","hash":"f6c9fafa0f5f0050cd07ca2cf5e38fbae3e28145","modified":1611416695456},{"_id":"themes/next/languages/zh-tw.yml","hash":"c97a5c41149de9b17f33439b0ecf0eff6fdae50e","modified":1611416695456},{"_id":"themes/next/languages/zh-hk.yml","hash":"34c84c6d04447a25bd5eac576922a13947c000e2","modified":1611416695456},{"_id":"themes/next/layout/.DS_Store","hash":"9b5083ed4c859d5c3dfda4906bd07c4d2ec035a5","modified":1611416549918},{"_id":"themes/next/layout/_layout.swig","hash":"2fa3c74066843a859fac77803324a1de51044da9","modified":1611416695458},{"_id":"themes/next/layout/archive.swig","hash":"b5b59d70fc1563f482fa07afd435752774ad5981","modified":1611416695470},{"_id":"themes/next/layout/category.swig","hash":"6422d196ceaff4220d54b8af770e7e957f3364ad","modified":1611416695470},{"_id":"themes/next/layout/index.swig","hash":"427d0b95b854e311ae363088ab39a393bf8fdc8b","modified":1611416695470},{"_id":"themes/next/layout/page.swig","hash":"3727fab9dadb967e9c2204edca787dc72264674a","modified":1611416695471},{"_id":"themes/next/layout/post.swig","hash":"e2e512142961ddfe77eba29eaa88f4a2ee43ae18","modified":1611416695471},{"_id":"themes/next/layout/schedule.swig","hash":"1f1cdc268f4ef773fd3ae693bbdf7d0b2f45c3a3","modified":1611416695471},{"_id":"themes/next/layout/tag.swig","hash":"07cf49c49c39a14dfbe9ce8e7d7eea3d4d0a4911","modified":1611416695472},{"_id":"themes/next/scripts/merge-configs.js","hash":"0c56be2e85c694247cfa327ea6d627b99ca265e8","modified":1611416695472},{"_id":"themes/next/source/.DS_Store","hash":"8aad4148d2d37de3e65ae8b9bc762ff1235e867c","modified":1611416549886},{"_id":"themes/next/test/.jshintrc","hash":"19f93d13d1689fe033c82eb2d5f3ce30b6543cc0","modified":1611416695528},{"_id":"themes/next/test/helpers.js","hash":"a1f5de25154c3724ffc24a91ddc576cdbd60864f","modified":1611416695528},{"_id":"themes/next/test/intern.js","hash":"11fa8a4f5c3b4119a179ae0a2584c8187f907a73","modified":1611416695528},{"_id":"themes/next/source/fonts/.gitkeep","hash":"da39a3ee5e6b4b0d3255bfef95601890afd80709","modified":1611416695495},{"_id":"themes/next/layout/_custom/sidebar.swig","hash":"adc83b19e793491b1c6ea0fd8b46cd9f32e592fc","modified":1611416695457},{"_id":"themes/next/layout/_custom/header.swig","hash":"adc83b19e793491b1c6ea0fd8b46cd9f32e592fc","modified":1611416695457},{"_id":"themes/next/layout/_macro/post-collapse.swig","hash":"5864f5567ba5efeabcf6ea355013c0b603ee07f2","modified":1611416695458},{"_id":"themes/next/layout/_macro/post.swig","hash":"e6016def9b512188f4c2725399c9adc7bc41cdae","modified":1611416695458},{"_id":"themes/next/layout/_macro/sidebar.swig","hash":"43d8830bb19da4fc7a5773866be19fa066b62645","modified":1611416695458},{"_id":"themes/next/layout/_macro/reward.swig","hash":"37e5b7c42ec17b9b6b786c5512bcc481a21c974e","modified":1611416695458},{"_id":"themes/next/layout/_macro/wechat-subscriber.swig","hash":"14e785adeb0e671ba0ff9a553e6f0d8def6c670c","modified":1611416695459},{"_id":"themes/next/layout/_partials/comments.swig","hash":"78ccfc1dc915247c1fec3c86d742e0f4c2f6d99c","modified":1611416695459},{"_id":"themes/next/layout/_partials/duoshuo-hot-articles.swig","hash":"5d4638c46aef65bf32a01681495b62416ccc98db","modified":1611416695459},{"_id":"themes/next/layout/_partials/footer.swig","hash":"7172c6053118b7c291a56a7860128a652ae66b83","modified":1611416695459},{"_id":"themes/next/layout/_partials/head.swig","hash":"ca56f92e2fa82b03853869f5073ee1a5626a4796","modified":1611416695459},{"_id":"themes/next/layout/_partials/header.swig","hash":"adab5c3f7b173f1b45454787f39dde07aea03483","modified":1611416695460},{"_id":"themes/next/layout/_partials/page-header.swig","hash":"39d613e5a9f8389d4ea52d6082502af8e833b9f2","modified":1611416695460},{"_id":"themes/next/layout/_partials/pagination.swig","hash":"9e8e21d194ef44d271b1cca0bc1448c14d7edf4f","modified":1611416695461},{"_id":"themes/next/layout/_partials/search.swig","hash":"1431719d1dbba3f5ee385eebc46376d1a960b2d5","modified":1611416695461},{"_id":"themes/next/layout/_scripts/baidu-push.swig","hash":"c057b17f79e8261680fbae8dc4e81317a127c799","modified":1611416695463},{"_id":"themes/next/layout/_scripts/boostrap.swig","hash":"03aaebe9d50f6acb007ec38cc04acd1cfceb404d","modified":1611416695463},{"_id":"themes/next/layout/_scripts/commons.swig","hash":"766b2bdda29523ed6cd8d7aa197f996022f8fd94","modified":1611416695463},{"_id":"themes/next/layout/_scripts/vendors.swig","hash":"4512867d80d9eddfc3a0f5fea3c456f33aa9d522","modified":1611416695470},{"_id":"themes/next/scripts/tags/button.js","hash":"62e6dbeb53d07627a048132c79630b45d9a8f2cc","modified":1611416695473},{"_id":"themes/next/scripts/tags/center-quote.js","hash":"535fc542781021c4326dec24d8495cbb1387634a","modified":1611416695473},{"_id":"themes/next/scripts/tags/full-image.js","hash":"8eeb3fb89540299bdbb799edfdfdac3743b50596","modified":1611416695473},{"_id":"themes/next/scripts/tags/group-pictures.js","hash":"49252824cd53184dc9b97b2f2d87ff28e1b3ef27","modified":1611416695473},{"_id":"themes/next/scripts/tags/note.js","hash":"6752925eedbdb939d8ec4d11bdfb75199f18dd70","modified":1611416695474},{"_id":"themes/next/source/css/.DS_Store","hash":"8cfd9037f3857f7561995e68790c4523a77be563","modified":1611416549824},{"_id":"themes/next/source/css/main.styl","hash":"20702c48d6053c92c5bcdbc68e8d0ef1369848a0","modified":1611416695495},{"_id":"themes/next/source/images/algolia_logo.svg","hash":"90035272fa31a3f65b3c0e2cb8a633876ef457dc","modified":1611416695495},{"_id":"themes/next/source/images/avatar.gif","hash":"264082bb3a1af70d5499c7d22b0902cb454b6d12","modified":1611416695496},{"_id":"themes/next/source/images/cc-by-nc-nd.svg","hash":"c6524ece3f8039a5f612feaf865d21ec8a794564","modified":1611416695496},{"_id":"themes/next/source/images/cc-by-nc-sa.svg","hash":"3031be41e8753c70508aa88e84ed8f4f653f157e","modified":1611416695496},{"_id":"themes/next/source/images/cc-by-nc.svg","hash":"8d39b39d88f8501c0d27f8df9aae47136ebc59b7","modified":1611416695496},{"_id":"themes/next/source/images/cc-by-nd.svg","hash":"c563508ce9ced1e66948024ba1153400ac0e0621","modified":1611416695496},{"_id":"themes/next/source/images/cc-by-sa.svg","hash":"aa4742d733c8af8d38d4c183b8adbdcab045872e","modified":1611416695497},{"_id":"themes/next/source/images/cc-by.svg","hash":"28a0a4fe355a974a5e42f68031652b76798d4f7e","modified":1611416695497},{"_id":"themes/next/source/images/cc-zero.svg","hash":"87669bf8ac268a91d027a0a4802c92a1473e9030","modified":1611416695497},{"_id":"themes/next/source/images/loading.gif","hash":"5fbd472222feb8a22cf5b8aa5dc5b8e13af88e2b","modified":1611416695497},{"_id":"themes/next/source/images/placeholder.gif","hash":"5fbd472222feb8a22cf5b8aa5dc5b8e13af88e2b","modified":1611416695497},{"_id":"themes/next/source/images/quote-l.svg","hash":"94e870b4c8c48da61d09522196d4dd40e277a98f","modified":1611416695497},{"_id":"themes/next/source/images/quote-r.svg","hash":"e60ae504f9d99b712c793c3740c6b100d057d4ec","modified":1611416695497},{"_id":"themes/next/source/images/searchicon.png","hash":"67727a6a969be0b2659b908518fa6706eed307b8","modified":1611416695498},{"_id":"themes/next/layout/_scripts/schemes/mist.swig","hash":"da39a3ee5e6b4b0d3255bfef95601890afd80709","modified":1611416695464},{"_id":"themes/next/layout/_scripts/schemes/muse.swig","hash":"da39a3ee5e6b4b0d3255bfef95601890afd80709","modified":1611416695464},{"_id":"themes/next/source/css/_mixins/Mist.styl","hash":"da39a3ee5e6b4b0d3255bfef95601890afd80709","modified":1611416695488},{"_id":"themes/next/source/css/_mixins/Muse.styl","hash":"da39a3ee5e6b4b0d3255bfef95601890afd80709","modified":1611416695488},{"_id":"themes/next/source/css/_mixins/custom.styl","hash":"da39a3ee5e6b4b0d3255bfef95601890afd80709","modified":1611416695488},{"_id":"themes/next/source/css/_variables/Muse.styl","hash":"da39a3ee5e6b4b0d3255bfef95601890afd80709","modified":1611416695494},{"_id":"themes/next/source/css/_variables/custom.styl","hash":"da39a3ee5e6b4b0d3255bfef95601890afd80709","modified":1611416695495},{"_id":"themes/next/layout/_components/algolia-search/assets.swig","hash":"28ff4ed6714c59124569ffcbd10f1173d53ca923","modified":1611416695457},{"_id":"themes/next/layout/_components/algolia-search/dom.swig","hash":"636f1181dd5887a70b4a08ca8f655d4e46635792","modified":1611416695457},{"_id":"themes/next/layout/_partials/head/custom-head.swig","hash":"9e1b9666efa77f4cf8d8261bcfa445a9ac608e53","modified":1611416695460},{"_id":"themes/next/layout/_partials/head/external-fonts.swig","hash":"7ce76358411184482bb0934e70037949dd0da8ca","modified":1611416695460},{"_id":"themes/next/layout/_partials/search/localsearch.swig","hash":"ff5523d5dacaa77a55a24e50e6e6530c3b98bfad","modified":1611416695461},{"_id":"themes/next/layout/_partials/search/swiftype.swig","hash":"959b7e04a96a5596056e4009b73b6489c117597e","modified":1611416695461},{"_id":"themes/next/layout/_partials/search/tinysou.swig","hash":"eefe2388ff3d424694045eda21346989b123977c","modified":1611416695462},{"_id":"themes/next/layout/_partials/share/add-this.swig","hash":"23e23dc0f76ef3c631f24c65277adf7ea517b383","modified":1611416695462},{"_id":"themes/next/layout/_partials/share/baidushare.swig","hash":"1f1107468aaf03f7d0dcd7eb2b653e2813a675b4","modified":1611416695462},{"_id":"themes/next/layout/_partials/share/duoshuo_share.swig","hash":"89c5a5240ecb223acfe1d12377df5562a943fd5d","modified":1611416695462},{"_id":"themes/next/layout/_partials/share/jiathis.swig","hash":"63315fcf210799f894208c9f512737096df84962","modified":1611416695462},{"_id":"themes/next/layout/_scripts/schemes/pisces.swig","hash":"a44acf9b0d0f44ef3dfc767376a95c984cc127de","modified":1611416695464},{"_id":"themes/next/layout/_scripts/pages/post-details.swig","hash":"069d1357c717572256e5cdee09574ebce529cbae","modified":1611416695464},{"_id":"themes/next/layout/_scripts/third-party/analytics.swig","hash":"394d9fff7951287cc90f52acc2d4cbfd1bae079d","modified":1611416695465},{"_id":"themes/next/layout/_scripts/third-party/comments.swig","hash":"4abc01bc870e1d7a783cdbd26166edc782a6a4f4","modified":1611416695467},{"_id":"themes/next/layout/_scripts/third-party/lean-analytics.swig","hash":"92dc60821307fc9769bea9b2d60adaeb798342af","modified":1611416695468},{"_id":"themes/next/layout/_scripts/third-party/localsearch.swig","hash":"b460e27db3dcd4ab40b17d8926a5c4e624f293a9","modified":1611416695469},{"_id":"themes/next/layout/_scripts/third-party/mathjax.swig","hash":"6d25596d6a7c57700d37b607f8d9a62d89708683","modified":1611416695469},{"_id":"themes/next/layout/_scripts/third-party/schedule.swig","hash":"22369026c87fc23893c35a7f250b42f3bb1b60f1","modified":1611416695469},{"_id":"themes/next/layout/_scripts/third-party/tinysou.swig","hash":"cb3a5d36dbe1630bab84e03a52733a46df7c219b","modified":1611416695469},{"_id":"themes/next/source/css/_common/.DS_Store","hash":"482b26a1489513e32d72f7d3f281d2f231310008","modified":1611416549896},{"_id":"themes/next/source/css/_custom/custom.styl","hash":"328d9a9696cc2ccf59c67d3c26000d569f46344c","modified":1611416695488},{"_id":"themes/next/source/css/_mixins/Pisces.styl","hash":"715d5b40dc52f319fe4bff0325beb874774d9bd9","modified":1611416695488},{"_id":"themes/next/source/css/_mixins/base.styl","hash":"78a83c38f69a8747bb74e420e6c9eeef1ea76525","modified":1611416695488},{"_id":"themes/next/source/css/_schemes/.DS_Store","hash":"86e952dc975945afc4b5649fbb6cbf11af6d3c72","modified":1611416549830},{"_id":"themes/next/source/css/_variables/Mist.styl","hash":"c8d35a6b9e3bff6d8fdb66de853065af9d37562d","modified":1611416695494},{"_id":"themes/next/source/css/_variables/Pisces.styl","hash":"c459aa6d607d8bcb747544e74f6ad0b8374aa3b1","modified":1611416695494},{"_id":"themes/next/source/css/_variables/base.styl","hash":"fc185c6cec79593775d1c2440dbe2a71cfbe2e99","modified":1611416695494},{"_id":"themes/next/source/js/src/affix.js","hash":"978e0422b5bf1b560236d8d10ebc1adcf66392e3","modified":1611416695498},{"_id":"themes/next/source/js/src/algolia-search.js","hash":"96b29f69b8b916b22f62c9959a117b5a968200a5","modified":1611416695498},{"_id":"themes/next/source/js/src/bootstrap.js","hash":"39bf93769d9080fa01a9a875183b43198f79bc19","modified":1611416695498},{"_id":"themes/next/source/js/src/hook-duoshuo.js","hash":"a6119070c0119f33e08b29da7d2cce2635eb40a0","modified":1611416695499},{"_id":"themes/next/source/js/src/motion.js","hash":"269414e84df544a4ccb88519f6abae4943db3c67","modified":1611416695499},{"_id":"themes/next/source/js/src/post-details.js","hash":"2038f54e289b6da5def09689e69f623187147be5","modified":1611416695499},{"_id":"themes/next/source/js/src/scrollspy.js","hash":"fe4da1b9fe73518226446f5f27d2831e4426fc35","modified":1611416695500},{"_id":"themes/next/source/js/src/utils.js","hash":"384e17ff857f073060f5bf8c6e4f4b7353236331","modified":1611416695500},{"_id":"themes/next/source/lib/algolia-instant-search/instantsearch.min.css","hash":"90ef19edc982645b118b095615838d9c5eaba0de","modified":1611416695500},{"_id":"themes/next/source/lib/canvas-nest/canvas-nest.min.js","hash":"0387e75e23b1db108a755073fe52a0d03eb391a7","modified":1611416695505},{"_id":"themes/next/source/lib/fastclick/.bower.json","hash":"93ebd5b35e632f714dcf1753e1f6db77ec74449b","modified":1611416695509},{"_id":"themes/next/source/lib/fastclick/LICENSE","hash":"dcd5b6b43095d9e90353a28b09cb269de8d4838e","modified":1611416695509},{"_id":"themes/next/source/lib/fastclick/README.md","hash":"1decd8e1adad2cd6db0ab50cf56de6035156f4ea","modified":1611416695509},{"_id":"themes/next/source/lib/fastclick/bower.json","hash":"13379463c7463b4b96d13556b46faa4cc38d81e6","modified":1611416695509},{"_id":"themes/next/source/lib/font-awesome/.bower.json","hash":"c1072942459fa0880e8a33a1bd929176b62b4171","modified":1611416695510},{"_id":"themes/next/source/lib/font-awesome/.gitignore","hash":"69d152fa46b517141ec3b1114dd6134724494d83","modified":1611416695511},{"_id":"themes/next/source/lib/font-awesome/.npmignore","hash":"dcf470ab3a358103bb896a539cc03caeda10fa8b","modified":1611416695511},{"_id":"themes/next/source/lib/font-awesome/HELP-US-OUT.txt","hash":"4f7bf961f1bed448f6ba99aeb9219fabf930ba96","modified":1611416695511},{"_id":"themes/next/source/lib/font-awesome/bower.json","hash":"279a8a718ab6c930a67c41237f0aac166c1b9440","modified":1611416695511},{"_id":"themes/next/source/lib/jquery/.bower.json","hash":"91745c2cc6c946c7275f952b2b0760b880cea69e","modified":1611416695520},{"_id":"themes/next/source/lib/jquery_lazyload/.bower.json","hash":"b7638afc93e9cd350d0783565ee9a7da6805ad8e","modified":1611416695521},{"_id":"themes/next/source/lib/jquery_lazyload/CONTRIBUTING.md","hash":"4891864c24c28efecd81a6a8d3f261145190f901","modified":1611416695521},{"_id":"themes/next/source/lib/jquery_lazyload/README.md","hash":"895d50fa29759af7835256522e9dd7dac597765c","modified":1611416695522},{"_id":"themes/next/source/lib/jquery_lazyload/bower.json","hash":"65bc85d12197e71c40a55c0cd7f6823995a05222","modified":1611416695522},{"_id":"themes/next/source/lib/jquery_lazyload/jquery.lazyload.js","hash":"481fd478650e12b67c201a0ea41e92743f8b45a3","modified":1611416695522},{"_id":"themes/next/source/lib/jquery_lazyload/jquery.scrollstop.js","hash":"0e9a81785a011c98be5ea821a8ed7d411818cfd1","modified":1611416695522},{"_id":"themes/next/source/lib/velocity/.bower.json","hash":"05f960846f1c7a93dab1d3f9a1121e86812e8c88","modified":1611416695524},{"_id":"themes/next/source/lib/velocity/bower.json","hash":"2ec99573e84c7117368beccb9e94b6bf35d2db03","modified":1611416695524},{"_id":"themes/next/source/lib/velocity/velocity.min.js","hash":"2f1afadc12e4cf59ef3b405308d21baa97e739c6","modified":1611416695526},{"_id":"themes/next/source/lib/velocity/velocity.ui.min.js","hash":"ed5e534cd680a25d8d14429af824f38a2c7d9908","modified":1611416695527},{"_id":"themes/next/source/lib/velocity/velocity.ui.js","hash":"6a1d101eab3de87527bb54fcc8c7b36b79d8f0df","modified":1611416695527},{"_id":"themes/next/source/lib/jquery/index.js","hash":"41b4bfbaa96be6d1440db6e78004ade1c134e276","modified":1611416695520},{"_id":"themes/next/layout/_scripts/third-party/analytics/application-insights.swig","hash":"60426bf73f8a89ba61fb1be2df3ad5398e32c4ef","modified":1611416695465},{"_id":"themes/next/layout/_scripts/third-party/analytics/baidu-analytics.swig","hash":"deda6a814ed48debc694c4e0c466f06c127163d0","modified":1611416695465},{"_id":"themes/next/layout/_scripts/third-party/analytics/busuanzi-counter.swig","hash":"4fcbf57c4918528ab51d3d042cff92cf5aefb599","modified":1611416695465},{"_id":"themes/next/layout/_scripts/third-party/analytics/facebook-sdk.swig","hash":"394d008e5e94575280407ad8a1607a028026cbc3","modified":1611416695466},{"_id":"themes/next/layout/_scripts/third-party/analytics/cnzz-analytics.swig","hash":"8160b27bee0aa372c7dc7c8476c05bae57f58d0f","modified":1611416695466},{"_id":"themes/next/layout/_scripts/third-party/analytics/google-analytics.swig","hash":"30a23fa7e816496fdec0e932aa42e2d13098a9c2","modified":1611416695466},{"_id":"themes/next/layout/_scripts/third-party/analytics/tencent-analytics.swig","hash":"3658414379e0e8a34c45c40feadc3edc8dc55f88","modified":1611416695467},{"_id":"themes/next/layout/_scripts/third-party/comments/disqus.swig","hash":"fb1d04ede838b52ca7541973f86c3810f1ad396e","modified":1611416695467},{"_id":"themes/next/layout/_scripts/third-party/comments/duoshuo.swig","hash":"a356b2185d40914447fde817eb3d358ab6b3e4c3","modified":1611416695467},{"_id":"themes/next/layout/_scripts/third-party/comments/gentie.swig","hash":"03592d1d731592103a41ebb87437fe4b0a4c78ca","modified":1611416695468},{"_id":"themes/next/layout/_scripts/third-party/comments/hypercomments.swig","hash":"3e8dc5c6c912628a37e3b5f886bec7b2e5ed14ea","modified":1611416695468},{"_id":"themes/next/layout/_scripts/third-party/comments/youyan.swig","hash":"ea8078fa9e10be2bb042749d8b6a97adc38f914c","modified":1611416695468},{"_id":"themes/next/source/css/_common/components/back-to-top.styl","hash":"b49efc66bd055a2d0be7deabfcb02ee72a9a28c8","modified":1611416695474},{"_id":"themes/next/source/css/_common/components/buttons.styl","hash":"0dfb4b3ba3180d7285e66f270e1d3fa0f132c3d2","modified":1611416695474},{"_id":"themes/next/source/css/_common/components/comments.styl","hash":"471f1627891aca5c0e1973e09fbcb01e1510d193","modified":1611416695475},{"_id":"themes/next/source/css/_common/components/components.styl","hash":"10994990d6e0b4d965a728a22cf7f6ee29cae9f6","modified":1611416695475},{"_id":"themes/next/source/css/_common/components/pagination.styl","hash":"711c8830886619d4f4a0598b0cde5499dce50c62","modified":1611416695479},{"_id":"themes/next/source/css/_common/components/tag-cloud.styl","hash":"dd8a3b22fc2f222ac6e6c05bd8a773fb039169c0","modified":1611416695484},{"_id":"themes/next/source/css/_common/outline/outline.styl","hash":"2186be20e317505cd31886f1291429cc21f76703","modified":1611416695486},{"_id":"themes/next/source/css/_common/scaffolding/base.styl","hash":"5304f99581da3a31de3ecec959b7adf9002fde83","modified":1611416695487},{"_id":"themes/next/source/css/_common/scaffolding/helpers.styl","hash":"54c90cf7bdbf5c596179d8dae6e671bad1292662","modified":1611416695487},{"_id":"themes/next/source/css/_common/scaffolding/normalize.styl","hash":"ece571f38180febaf02ace8187ead8318a300ea7","modified":1611416695487},{"_id":"themes/next/source/css/_common/scaffolding/scaffolding.styl","hash":"013619c472c7e4b08311c464fcbe9fcf5edde603","modified":1611416695487},{"_id":"themes/next/source/css/_common/scaffolding/tables.styl","hash":"64f5d56c08d74a338813df1265580ca0cbf0190b","modified":1611416695487},{"_id":"themes/next/source/css/_schemes/Mist/.DS_Store","hash":"b64cd313b8f5b9ce61caf31dd7a17bd309e54837","modified":1611416549867},{"_id":"themes/next/source/css/_schemes/Mist/_base.styl","hash":"c2d079788d6fc2e9a191ccdae94e50d55bf849dc","modified":1611416695488},{"_id":"themes/next/source/css/_schemes/Mist/_header.styl","hash":"5ae7906dc7c1d9468c7f4b4a6feddddc555797a1","modified":1611416695489},{"_id":"themes/next/source/css/_schemes/Mist/_logo.styl","hash":"38e5df90c8689a71c978fd83ba74af3d4e4e5386","modified":1611416695489},{"_id":"themes/next/source/css/_schemes/Mist/_menu.styl","hash":"b0dcca862cd0cc6e732e33d975b476d744911742","modified":1611416695489},{"_id":"themes/next/source/css/_schemes/Mist/_posts-expanded.styl","hash":"fda14bc35be2e1b332809b55b3d07155a833dbf4","modified":1611416695489},{"_id":"themes/next/source/css/_schemes/Mist/_search.styl","hash":"1452cbe674cc1d008e1e9640eb4283841058fc64","modified":1611416695489},{"_id":"themes/next/source/css/_schemes/Mist/index.styl","hash":"9a5581a770af8964064fef7afd3e16963e45547f","modified":1611416695489},{"_id":"themes/next/source/css/_schemes/Muse/_layout.styl","hash":"0efa036a15c18f5abb058b7c0fad1dd9ac5eed4c","modified":1611416695490},{"_id":"themes/next/source/css/_schemes/Muse/_logo.styl","hash":"8829bc556ca38bfec4add4f15a2f028092ac6d46","modified":1611416695490},{"_id":"themes/next/source/css/_schemes/Muse/_menu.styl","hash":"82bbaa6322764779a1ac2e2c8390ce901c7972e2","modified":1611416695491},{"_id":"themes/next/source/css/_schemes/Muse/_search.styl","hash":"1452cbe674cc1d008e1e9640eb4283841058fc64","modified":1611416695491},{"_id":"themes/next/source/css/_schemes/Muse/index.styl","hash":"a0e2030a606c934fb2c5c7373aaae04a1caac4c5","modified":1611416695491},{"_id":"themes/next/source/css/_schemes/Pisces/_brand.styl","hash":"ff9f163bb05c0709577040a875924d36c9ab99d6","modified":1611416695492},{"_id":"themes/next/source/css/_schemes/Pisces/_layout.styl","hash":"dcf9fe43b2ef78b923118ba39efedb38760e76b1","modified":1611416695492},{"_id":"themes/next/source/css/_schemes/Pisces/_menu.styl","hash":"1408209dfb9a22a0982a30bdbd14842c2b53f264","modified":1611416695493},{"_id":"themes/next/source/css/_schemes/Pisces/_posts.styl","hash":"2f878213cb24c5ddc18877f6d15ec5c5f57745ac","modified":1611416695493},{"_id":"themes/next/source/css/_schemes/Pisces/_sidebar.styl","hash":"9b63bd8effc7cf4b96acdea4d73add7df934a222","modified":1611416695493},{"_id":"themes/next/source/css/_schemes/Pisces/index.styl","hash":"69ecd6c97e7cdfd822ac8102b45ad0ede85050db","modified":1611416695493},{"_id":"themes/next/source/js/src/schemes/pisces.js","hash":"9ccee9189c910b8a264802d7b2ec305d12dedcd0","modified":1611416695499},{"_id":"themes/next/source/lib/fancybox/source/fancybox_loading.gif","hash":"1a755fb2599f3a313cc6cfdb14df043f8c14a99c","modified":1611416695506},{"_id":"themes/next/source/lib/fancybox/source/blank.gif","hash":"2daeaa8b5f19f0bc209d976c02bd6acb51b00b0a","modified":1611416695506},{"_id":"themes/next/source/lib/fancybox/source/fancybox_loading@2x.gif","hash":"273b123496a42ba45c3416adb027cd99745058b0","modified":1611416695506},{"_id":"themes/next/source/lib/fancybox/source/fancybox_overlay.png","hash":"b3a4ee645ba494f52840ef8412015ba0f465dbe0","modified":1611416695506},{"_id":"themes/next/source/lib/fancybox/source/fancybox_sprite.png","hash":"17df19f97628e77be09c352bf27425faea248251","modified":1611416695507},{"_id":"themes/next/source/lib/fancybox/source/fancybox_sprite@2x.png","hash":"30c58913f327e28f466a00f4c1ac8001b560aed8","modified":1611416695507},{"_id":"themes/next/source/lib/fancybox/source/jquery.fancybox.css","hash":"5f163444617b6cf267342f06ac166a237bb62df9","modified":1611416695508},{"_id":"themes/next/source/lib/fancybox/source/jquery.fancybox.js","hash":"1cf3d47b5ccb7cb6e9019c64f2a88d03a64853e4","modified":1611416695508},{"_id":"themes/next/source/lib/fancybox/source/jquery.fancybox.pack.js","hash":"53360764b429c212f424399384417ccc233bb3be","modified":1611416695508},{"_id":"themes/next/source/lib/fastclick/lib/fastclick.js","hash":"06cef196733a710e77ad7e386ced6963f092dc55","modified":1611416695510},{"_id":"themes/next/source/lib/fastclick/lib/fastclick.min.js","hash":"2cae0f5a6c5d6f3cb993015e6863f9483fc4de18","modified":1611416695510},{"_id":"themes/next/source/lib/font-awesome/css/font-awesome.css","hash":"4eda182cbcc046dbf449aef97c02c230cf80a494","modified":1611416695512},{"_id":"themes/next/source/lib/font-awesome/css/font-awesome.css.map","hash":"0189d278706509412bac4745f96c83984e1d59f4","modified":1611416695512},{"_id":"themes/next/source/lib/font-awesome/css/font-awesome.min.css","hash":"fb5b49426dee7f1508500e698d1b3c6b04c8fcce","modified":1611416695512},{"_id":"themes/next/source/lib/ua-parser-js/dist/ua-parser.min.js","hash":"38628e75e4412cc6f11074e03e1c6d257aae495b","modified":1611416695523},{"_id":"themes/next/source/lib/ua-parser-js/dist/ua-parser.pack.js","hash":"214dad442a92d36af77ed0ca1d9092b16687f02f","modified":1611416695523},{"_id":"themes/next/source/lib/font-awesome/fonts/fontawesome-webfont.eot","hash":"965ce8f688fedbeed504efd498bc9c1622d12362","modified":1611416695514},{"_id":"themes/next/source/lib/font-awesome/fonts/fontawesome-webfont.woff2","hash":"97e438cc545714309882fbceadbf344fcaddcec5","modified":1611416695519},{"_id":"themes/next/source/lib/font-awesome/fonts/fontawesome-webfont.woff","hash":"6d7e6a5fc802b13694d8820fc0138037c0977d2e","modified":1611416695519},{"_id":"themes/next/source/lib/velocity/velocity.js","hash":"9f08181baea0cc0e906703b7e5df9111b9ef3373","modified":1611416695526},{"_id":"themes/next/source/css/_common/components/footer/footer.styl","hash":"8994ffcce84deac0471532f270f97c44fea54dc0","modified":1611416695475},{"_id":"themes/next/source/css/_common/components/header/header.styl","hash":"ae1ca14e51de67b07dba8f61ec79ee0e2e344574","modified":1611416695476},{"_id":"themes/next/source/css/_common/components/header/headerband.styl","hash":"d27448f199fc2f9980b601bc22b87f08b5d64dd1","modified":1611416695476},{"_id":"themes/next/source/css/_common/components/header/menu.styl","hash":"c890ce7fe933abad7baf39764a01894924854e92","modified":1611416695476},{"_id":"themes/next/source/css/_common/components/header/site-meta.styl","hash":"6c00f6e0978f4d8f9a846a15579963728aaa6a17","modified":1611416695477},{"_id":"themes/next/source/css/_common/components/header/site-nav.styl","hash":"49c2b2c14a1e7fcc810c6be4b632975d0204c281","modified":1611416695477},{"_id":"themes/next/source/css/_common/components/highlight/diff.styl","hash":"96f32ea6c3265a3889e6abe57587f6e2a2a40dfb","modified":1611416695477},{"_id":"themes/next/source/css/_common/components/highlight/highlight.styl","hash":"4b7f81e1006e7acee3d1c840ccba155239f830cc","modified":1611416695477},{"_id":"themes/next/source/css/_common/components/highlight/theme.styl","hash":"b76387934fb6bb75212b23c1a194486892cc495e","modified":1611416695478},{"_id":"themes/next/source/css/_common/components/pages/archive.styl","hash":"7778920dd105fa4de3a7ab206eeba30b1a7bac45","modified":1611416695478},{"_id":"themes/next/source/css/_common/components/pages/categories.styl","hash":"4eff5b252d7b614e500fc7d52c97ce325e57d3ab","modified":1611416695478},{"_id":"themes/next/source/css/_common/components/pages/pages.styl","hash":"2039590632bba3943c39319d80ef630af7928185","modified":1611416695479},{"_id":"themes/next/source/css/_common/components/pages/post-detail.styl","hash":"9bf4362a4d0ae151ada84b219d39fbe5bb8c790e","modified":1611416695479},{"_id":"themes/next/source/css/_common/components/pages/schedule.styl","hash":"a82afbb72d83ee394aedc7b37ac0008a9823b4f4","modified":1611416695479},{"_id":"themes/next/source/css/_common/components/post/post-button.styl","hash":"fdfadbb4483043c7e0afd541ee9712389e633517","modified":1611416695480},{"_id":"themes/next/source/css/_common/components/post/post-collapse.styl","hash":"8fae54591877a73dff0b29b2be2e8935e3c63575","modified":1611416695480},{"_id":"themes/next/source/css/_common/components/post/post-eof.styl","hash":"2cdc094ecf907a02fce25ad4a607cd5c40da0f2b","modified":1611416695480},{"_id":"themes/next/source/css/_common/components/post/post-expand.styl","hash":"b25132fe6a7ad67059a2c3afc60feabb479bdd75","modified":1611416695480},{"_id":"themes/next/source/css/_common/components/post/post-gallery.styl","hash":"387ce23bba52b22a586b2dfb4ec618fe1ffd3926","modified":1611416695481},{"_id":"themes/next/source/css/_common/components/post/post-reward.styl","hash":"e792c8dc41561c96d128e9b421187f1c3dc978a0","modified":1611416695481},{"_id":"themes/next/source/css/_common/components/post/post-nav.styl","hash":"c6dab7661a6b8c678b21b7eb273cef7100f970f6","modified":1611416695481},{"_id":"themes/next/source/css/_common/components/post/post-meta.styl","hash":"7f1aab694caf603809e33cff82beea84cd0128fd","modified":1611416695481},{"_id":"themes/next/source/css/_common/components/post/post-tags.styl","hash":"a352ae5b1f8857393bf770d2e638bf15f0c9585d","modified":1611416695481},{"_id":"themes/next/source/css/_common/components/post/post-title.styl","hash":"963105a531403d7aad6d9e5e23e3bfabb8ec065a","modified":1611416695481},{"_id":"themes/next/source/css/_common/components/post/post-type.styl","hash":"10251257aceecb117233c9554dcf8ecfef8e2104","modified":1611416695482},{"_id":"themes/next/source/css/_common/components/post/post.styl","hash":"bfd806d0a9f21446a22df82ac02e37d0075cc3b5","modified":1611416695482},{"_id":"themes/next/source/css/_common/components/sidebar/sidebar-author-links.styl","hash":"2e7ec9aaa3293941106b1bdd09055246aa3c3dc6","modified":1611416695482},{"_id":"themes/next/source/css/_common/components/sidebar/sidebar-author.styl","hash":"920343e41c124221a17f050bbb989494d44f7a24","modified":1611416695482},{"_id":"themes/next/source/css/_common/components/sidebar/sidebar-blogroll.styl","hash":"c44f6a553ec7ea5508f2054a13be33a62a15d3a9","modified":1611416695482},{"_id":"themes/next/source/css/_common/components/sidebar/sidebar-feed-link.styl","hash":"9486ddd2cb255227db102d09a7df4cae0fabad72","modified":1611416695483},{"_id":"themes/next/source/css/_common/components/sidebar/sidebar-nav.styl","hash":"45fa7193435a8eae9960267438750b4c9fa9587f","modified":1611416695483},{"_id":"themes/next/source/css/_common/components/sidebar/sidebar-toc.styl","hash":"7690b9596ec3a49befbe529a5a2649abec0faf76","modified":1611416695483},{"_id":"themes/next/source/css/_common/components/sidebar/sidebar-toggle.styl","hash":"2d3abbc85b979a648e0e579e45f16a6eba49d1e7","modified":1611416695483},{"_id":"themes/next/source/css/_common/components/sidebar/sidebar.styl","hash":"234facd038f144bd0fe09a31ed1357c5d74c517f","modified":1611416695483},{"_id":"themes/next/source/css/_common/components/sidebar/site-state.styl","hash":"3623e7fa4324ec1307370f33d8f287a9e20a5578","modified":1611416695483},{"_id":"themes/next/source/css/_common/components/tags/blockquote-center.styl","hash":"c2abe4d87148e23e15d49ee225bc650de60baf46","modified":1611416695484},{"_id":"themes/next/source/css/_common/components/tags/full-image.styl","hash":"b8969e1654eec89a0fd10d88b337fee9cb03cd44","modified":1611416695484},{"_id":"themes/next/source/css/_common/components/tags/group-pictures.styl","hash":"4851b981020c5cbc354a1af9b831a2dcb3cf9d39","modified":1611416695484},{"_id":"themes/next/source/css/_common/components/tags/note.styl","hash":"74d0ba86f698165d13402670382a822c8736a556","modified":1611416695484},{"_id":"themes/next/source/css/_common/components/tags/tags.styl","hash":"3eb73cee103b810fa56901577ecb9c9bb1793cff","modified":1611416695484},{"_id":"themes/next/source/css/_common/components/third-party/algolia-search.styl","hash":"eba491ae624b4c843c8be4c94a044085dad4ba0f","modified":1611416695485},{"_id":"themes/next/source/css/_common/components/third-party/baidushare.styl","hash":"93b08815c4d17e2b96fef8530ec1f1064dede6ef","modified":1611416695485},{"_id":"themes/next/source/css/_common/components/third-party/busuanzi-counter.styl","hash":"b03f891883446f3a5548b7cc90d29c77e62f1053","modified":1611416695485},{"_id":"themes/next/source/css/_common/components/third-party/duoshuo.styl","hash":"2340dd9b3202c61d73cc708b790fac5adddbfc7f","modified":1611416695485},{"_id":"themes/next/source/css/_common/components/third-party/gentie.styl","hash":"586a3ec0f1015e7207cd6a2474362e068c341744","modified":1611416695485},{"_id":"themes/next/source/css/_common/components/third-party/jiathis.styl","hash":"327b5f63d55ec26f7663185c1a778440588d9803","modified":1611416695486},{"_id":"themes/next/source/css/_common/components/third-party/localsearch.styl","hash":"637c6b32c58ecf40041be6e911471cd82671919b","modified":1611416695486},{"_id":"themes/next/source/css/_common/components/third-party/third-party.styl","hash":"42348219db93a85d2ee23cb06cebd4d8ab121726","modified":1611416695486},{"_id":"themes/next/source/css/_schemes/Mist/outline/outline.styl","hash":"5dc4859c66305f871e56cba78f64bfe3bf1b5f01","modified":1611416695490},{"_id":"themes/next/source/css/_schemes/Mist/sidebar/sidebar-blogroll.styl","hash":"8b8e8cbce98a9296c8fd77f512ae85d945f65d40","modified":1611416695490},{"_id":"themes/next/source/css/_schemes/Muse/sidebar/sidebar-blogroll.styl","hash":"8b8e8cbce98a9296c8fd77f512ae85d945f65d40","modified":1611416695492},{"_id":"themes/next/source/lib/fancybox/source/helpers/fancybox_buttons.png","hash":"e385b139516c6813dcd64b8fc431c364ceafe5f3","modified":1611416695507},{"_id":"themes/next/source/lib/fancybox/source/helpers/jquery.fancybox-buttons.css","hash":"1a9d8e5c22b371fcc69d4dbbb823d9c39f04c0c8","modified":1611416695507},{"_id":"themes/next/source/lib/fancybox/source/helpers/jquery.fancybox-buttons.js","hash":"91e41741c2e93f732c82aaacec4cfc6e3f3ec876","modified":1611416695507},{"_id":"themes/next/source/lib/fancybox/source/helpers/jquery.fancybox-media.js","hash":"3bdf69ed2469e4fb57f5a95f17300eef891ff90d","modified":1611416695507},{"_id":"themes/next/source/lib/fancybox/source/helpers/jquery.fancybox-thumbs.css","hash":"4ac329c16a5277592fc12a37cca3d72ca4ec292f","modified":1611416695508},{"_id":"themes/next/source/lib/fancybox/source/helpers/jquery.fancybox-thumbs.js","hash":"53e194f4a72e649c04fb586dd57762b8c022800b","modified":1611416695508},{"_id":"themes/next/source/lib/font-awesome/fonts/FontAwesome.otf","hash":"1b22f17fdc38070de50e6d1ab3a32da71aa2d819","modified":1611416695513},{"_id":"themes/next/source/lib/font-awesome/fonts/fontawesome-webfont.ttf","hash":"61d8d967807ef12598d81582fa95b9f600c3ee01","modified":1611416695518},{"_id":"themes/next/source/lib/algolia-instant-search/instantsearch.min.js","hash":"9ccc6f8144f54e86df9a3fd33a18368d81cf3a4f","modified":1611416695504},{"_id":"themes/next/source/lib/font-awesome/fonts/fontawesome-webfont.svg","hash":"c0522272bbaef2acb3d341912754d6ea2d0ecfc0","modified":1611416695517},{"_id":"public/categories/index.html","hash":"5a7af1432b3e59339d1651c2a4685bdcb5d2c5ea","modified":1611416949065},{"_id":"public/tags/index.html","hash":"206a14244908ef8fa0c4728456aaff46a17bb3d2","modified":1611416949065},{"_id":"public/categories/Android/index.html","hash":"08664be60af218ddf98edec0e73f2791825e2b03","modified":1611416949066},{"_id":"public/categories/git/index.html","hash":"cf54f1600183fe46a4e7fd524be440b8fae7a1f1","modified":1611416949066},{"_id":"public/page/2/index.html","hash":"ac9041c9cbe071d352d944662309e458433d49b4","modified":1611416949066},{"_id":"public/archives/index.html","hash":"52bc8903787f6355ca11486139a1dd43360a10df","modified":1611416949066},{"_id":"public/archives/page/2/index.html","hash":"70a3dfbad128495b9515d31786a1349b379fe1cc","modified":1611416949066},{"_id":"public/archives/2017/index.html","hash":"4c0c4cf0da1b7047ede6a07b47e1f1f3c1e153ad","modified":1611416949066},{"_id":"public/archives/2017/01/index.html","hash":"d7e567d27087c5fbf0454df2f1a9645e0d62bf52","modified":1611416949066},{"_id":"public/archives/2017/09/index.html","hash":"c4f68a3ce89763b9bb1cc30e0cd2ccd05c864a62","modified":1611416949066},{"_id":"public/archives/2017/10/index.html","hash":"e924c7068ec904c6dcf5d3380867d34700d452de","modified":1611416949066},{"_id":"public/archives/2020/index.html","hash":"8968895cafd603a92217be6a25716b5c0d3bc2a4","modified":1611416949066},{"_id":"public/archives/2020/05/index.html","hash":"2de25b8e7e8c235d58bd66f8029915c41c2ddee2","modified":1611416949066},{"_id":"public/archives/2020/09/index.html","hash":"7cdbd2d9ce0769d0eea84c2ebbbc9f928d45448e","modified":1611416949066},{"_id":"public/archives/2021/index.html","hash":"f53613623ccaeecb5ee3b474625656bb04b74b5f","modified":1611416949066},{"_id":"public/archives/2021/01/index.html","hash":"5744bdd320ea21b9bc63165caa58819230c1827d","modified":1611416949066},{"_id":"public/tags/Android/index.html","hash":"dbcb7dcaf5bac248fba720b0e7f3c0b15971982f","modified":1611416949066},{"_id":"public/tags/git技巧/index.html","hash":"e172f06d5c2476b53e67b32b647394eb92bec742","modified":1611416949066},{"_id":"public/tags/源码分析/index.html","hash":"2bae6428c7842d60fda8c6f36ae7ac8f6a99aa36","modified":1611416949067},{"_id":"public/2021/01/19/事件分发源码分析/index.html","hash":"8f406ecb91042f16e1e33a4ec992965128504753","modified":1611416949067},{"_id":"public/2020/09/11/使用Sparse Checkout，拉取Git仓库中指定的目录/index.html","hash":"76af813e003cc5c9210cb41b739ab346da38080a","modified":1611416949067},{"_id":"public/2020/05/23/Git常用操作命令收集/index.html","hash":"c7f9073efdcad355c39a509de8362970ffd91b77","modified":1611416949067},{"_id":"public/2017/10/10/LayoutInflater源码分析/index.html","hash":"7f60b3162c73f37ba2fb9d66d083dd1763893672","modified":1611416949067},{"_id":"public/2017/09/23/Handler消息机制源码分析/index.html","hash":"8fa1b45d58bdb63fa789f338232d7cd139eaf2ae","modified":1611416949067},{"_id":"public/2017/09/19/ButterKnife源码分析/index.html","hash":"7e3a76aac50e5bc294f970b62711a8f9bf9fa4c9","modified":1611416949067},{"_id":"public/2017/01/22/View的状态保存和恢复/index.html","hash":"0429b458cf3be180be5549d4d4a75970f9dbad52","modified":1611416949067},{"_id":"public/index.html","hash":"b2033a1616d54bb14367be00e5b69d5e2f3c0f26","modified":1611416949067},{"_id":"public/images/algolia_logo.svg","hash":"90035272fa31a3f65b3c0e2cb8a633876ef457dc","modified":1611416949074},{"_id":"public/images/avatar.gif","hash":"264082bb3a1af70d5499c7d22b0902cb454b6d12","modified":1611416949075},{"_id":"public/images/cc-by-nc-nd.svg","hash":"c6524ece3f8039a5f612feaf865d21ec8a794564","modified":1611416949075},{"_id":"public/images/cc-by-nc-sa.svg","hash":"3031be41e8753c70508aa88e84ed8f4f653f157e","modified":1611416949075},{"_id":"public/images/cc-by-nc.svg","hash":"8d39b39d88f8501c0d27f8df9aae47136ebc59b7","modified":1611416949075},{"_id":"public/images/cc-by-nd.svg","hash":"c563508ce9ced1e66948024ba1153400ac0e0621","modified":1611416949075},{"_id":"public/images/cc-by-sa.svg","hash":"aa4742d733c8af8d38d4c183b8adbdcab045872e","modified":1611416949075},{"_id":"public/images/cc-by.svg","hash":"28a0a4fe355a974a5e42f68031652b76798d4f7e","modified":1611416949075},{"_id":"public/images/cc-zero.svg","hash":"87669bf8ac268a91d027a0a4802c92a1473e9030","modified":1611416949075},{"_id":"public/images/loading.gif","hash":"5fbd472222feb8a22cf5b8aa5dc5b8e13af88e2b","modified":1611416949075},{"_id":"public/images/placeholder.gif","hash":"5fbd472222feb8a22cf5b8aa5dc5b8e13af88e2b","modified":1611416949075},{"_id":"public/images/quote-l.svg","hash":"94e870b4c8c48da61d09522196d4dd40e277a98f","modified":1611416949075},{"_id":"public/images/quote-r.svg","hash":"e60ae504f9d99b712c793c3740c6b100d057d4ec","modified":1611416949075},{"_id":"public/images/searchicon.png","hash":"67727a6a969be0b2659b908518fa6706eed307b8","modified":1611416949075},{"_id":"public/lib/fastclick/LICENSE","hash":"dcd5b6b43095d9e90353a28b09cb269de8d4838e","modified":1611416949075},{"_id":"public/lib/font-awesome/HELP-US-OUT.txt","hash":"4f7bf961f1bed448f6ba99aeb9219fabf930ba96","modified":1611416949075},{"_id":"public/lib/fancybox/source/fancybox_loading.gif","hash":"1a755fb2599f3a313cc6cfdb14df043f8c14a99c","modified":1611416949075},{"_id":"public/lib/fancybox/source/blank.gif","hash":"2daeaa8b5f19f0bc209d976c02bd6acb51b00b0a","modified":1611416949076},{"_id":"public/lib/fancybox/source/fancybox_loading@2x.gif","hash":"273b123496a42ba45c3416adb027cd99745058b0","modified":1611416949076},{"_id":"public/lib/fancybox/source/fancybox_overlay.png","hash":"b3a4ee645ba494f52840ef8412015ba0f465dbe0","modified":1611416949076},{"_id":"public/lib/fancybox/source/fancybox_sprite.png","hash":"17df19f97628e77be09c352bf27425faea248251","modified":1611416949076},{"_id":"public/lib/fancybox/source/fancybox_sprite@2x.png","hash":"30c58913f327e28f466a00f4c1ac8001b560aed8","modified":1611416949077},{"_id":"public/lib/font-awesome/css/font-awesome.css.map","hash":"0189d278706509412bac4745f96c83984e1d59f4","modified":1611416949077},{"_id":"public/lib/fancybox/source/helpers/fancybox_buttons.png","hash":"e385b139516c6813dcd64b8fc431c364ceafe5f3","modified":1611416949077},{"_id":"public/lib/font-awesome/fonts/fontawesome-webfont.woff2","hash":"97e438cc545714309882fbceadbf344fcaddcec5","modified":1611416949651},{"_id":"public/lib/font-awesome/fonts/fontawesome-webfont.eot","hash":"965ce8f688fedbeed504efd498bc9c1622d12362","modified":1611416949655},{"_id":"public/lib/font-awesome/fonts/fontawesome-webfont.woff","hash":"6d7e6a5fc802b13694d8820fc0138037c0977d2e","modified":1611416949656},{"_id":"public/lib/font-awesome/fonts/FontAwesome.otf","hash":"1b22f17fdc38070de50e6d1ab3a32da71aa2d819","modified":1611416949656},{"_id":"public/js/src/algolia-search.js","hash":"96b29f69b8b916b22f62c9959a117b5a968200a5","modified":1611416949660},{"_id":"public/js/src/hook-duoshuo.js","hash":"a6119070c0119f33e08b29da7d2cce2635eb40a0","modified":1611416949660},{"_id":"public/js/src/affix.js","hash":"978e0422b5bf1b560236d8d10ebc1adcf66392e3","modified":1611416949661},{"_id":"public/js/src/bootstrap.js","hash":"39bf93769d9080fa01a9a875183b43198f79bc19","modified":1611416949661},{"_id":"public/js/src/motion.js","hash":"269414e84df544a4ccb88519f6abae4943db3c67","modified":1611416949661},{"_id":"public/js/src/scrollspy.js","hash":"fe4da1b9fe73518226446f5f27d2831e4426fc35","modified":1611416949661},{"_id":"public/lib/algolia-instant-search/instantsearch.min.css","hash":"90ef19edc982645b118b095615838d9c5eaba0de","modified":1611416949661},{"_id":"public/js/src/post-details.js","hash":"2038f54e289b6da5def09689e69f623187147be5","modified":1611416949661},{"_id":"public/js/src/utils.js","hash":"384e17ff857f073060f5bf8c6e4f4b7353236331","modified":1611416949661},{"_id":"public/lib/canvas-nest/canvas-nest.min.js","hash":"0387e75e23b1db108a755073fe52a0d03eb391a7","modified":1611416949661},{"_id":"public/lib/fastclick/README.html","hash":"da3c74d484c73cc7df565e8abbfa4d6a5a18d4da","modified":1611416949661},{"_id":"public/lib/fastclick/bower.json","hash":"4dcecf83afddba148464d5339c93f6d0aa9f42e9","modified":1611416949661},{"_id":"public/lib/font-awesome/bower.json","hash":"64394a2a9aa00f8e321d8daa5e51a420f0e96dad","modified":1611416949661},{"_id":"public/lib/jquery_lazyload/README.html","hash":"bde24335f6bc09d8801c0dcd7274f71b466552bd","modified":1611416949661},{"_id":"public/lib/jquery_lazyload/CONTRIBUTING.html","hash":"a6358170d346af13b1452ac157b60505bec7015c","modified":1611416949661},{"_id":"public/lib/jquery_lazyload/bower.json","hash":"ae3c3b61e6e7f9e1d7e3585ad854380ecc04cf53","modified":1611416949662},{"_id":"public/lib/jquery_lazyload/jquery.lazyload.js","hash":"481fd478650e12b67c201a0ea41e92743f8b45a3","modified":1611416949662},{"_id":"public/lib/jquery_lazyload/jquery.scrollstop.js","hash":"0e9a81785a011c98be5ea821a8ed7d411818cfd1","modified":1611416949662},{"_id":"public/lib/velocity/bower.json","hash":"0ef14e7ccdfba5db6eb3f8fc6aa3b47282c36409","modified":1611416949662},{"_id":"public/lib/velocity/velocity.ui.min.js","hash":"ed5e534cd680a25d8d14429af824f38a2c7d9908","modified":1611416949662},{"_id":"public/js/src/schemes/pisces.js","hash":"9ccee9189c910b8a264802d7b2ec305d12dedcd0","modified":1611416949662},{"_id":"public/lib/fancybox/source/jquery.fancybox.css","hash":"5f163444617b6cf267342f06ac166a237bb62df9","modified":1611416949662},{"_id":"public/lib/fastclick/lib/fastclick.min.js","hash":"2cae0f5a6c5d6f3cb993015e6863f9483fc4de18","modified":1611416949662},{"_id":"public/lib/ua-parser-js/dist/ua-parser.pack.js","hash":"214dad442a92d36af77ed0ca1d9092b16687f02f","modified":1611416949662},{"_id":"public/lib/ua-parser-js/dist/ua-parser.min.js","hash":"38628e75e4412cc6f11074e03e1c6d257aae495b","modified":1611416949662},{"_id":"public/lib/fancybox/source/helpers/jquery.fancybox-buttons.js","hash":"91e41741c2e93f732c82aaacec4cfc6e3f3ec876","modified":1611416949662},{"_id":"public/lib/fancybox/source/helpers/jquery.fancybox-buttons.css","hash":"1a9d8e5c22b371fcc69d4dbbb823d9c39f04c0c8","modified":1611416949662},{"_id":"public/lib/fancybox/source/helpers/jquery.fancybox-thumbs.css","hash":"4ac329c16a5277592fc12a37cca3d72ca4ec292f","modified":1611416949662},{"_id":"public/lib/fancybox/source/helpers/jquery.fancybox-thumbs.js","hash":"53e194f4a72e649c04fb586dd57762b8c022800b","modified":1611416949662},{"_id":"public/lib/fancybox/source/helpers/jquery.fancybox-media.js","hash":"3bdf69ed2469e4fb57f5a95f17300eef891ff90d","modified":1611416949662},{"_id":"public/css/main.css","hash":"02be619768639ff48a430643fd984a00d5e0281c","modified":1611416949662},{"_id":"public/lib/velocity/velocity.min.js","hash":"2f1afadc12e4cf59ef3b405308d21baa97e739c6","modified":1611416949662},{"_id":"public/lib/velocity/velocity.ui.js","hash":"6a1d101eab3de87527bb54fcc8c7b36b79d8f0df","modified":1611416949662},{"_id":"public/lib/jquery/index.js","hash":"41b4bfbaa96be6d1440db6e78004ade1c134e276","modified":1611416949662},{"_id":"public/lib/fancybox/source/jquery.fancybox.pack.js","hash":"53360764b429c212f424399384417ccc233bb3be","modified":1611416949663},{"_id":"public/lib/fastclick/lib/fastclick.js","hash":"06cef196733a710e77ad7e386ced6963f092dc55","modified":1611416949663},{"_id":"public/lib/fancybox/source/jquery.fancybox.js","hash":"1cf3d47b5ccb7cb6e9019c64f2a88d03a64853e4","modified":1611416949663},{"_id":"public/lib/font-awesome/css/font-awesome.min.css","hash":"fb5b49426dee7f1508500e698d1b3c6b04c8fcce","modified":1611416949663},{"_id":"public/lib/font-awesome/css/font-awesome.css","hash":"4eda182cbcc046dbf449aef97c02c230cf80a494","modified":1611416949663},{"_id":"public/lib/velocity/velocity.js","hash":"9f08181baea0cc0e906703b7e5df9111b9ef3373","modified":1611416949663},{"_id":"public/lib/algolia-instant-search/instantsearch.min.js","hash":"9ccc6f8144f54e86df9a3fd33a18368d81cf3a4f","modified":1611416949663},{"_id":"public/lib/font-awesome/fonts/fontawesome-webfont.ttf","hash":"61d8d967807ef12598d81582fa95b9f600c3ee01","modified":1611416949663},{"_id":"public/lib/font-awesome/fonts/fontawesome-webfont.svg","hash":"c0522272bbaef2acb3d341912754d6ea2d0ecfc0","modified":1611416949677}],"Category":[{"name":"Android","_id":"ckk9w1mfb0004fw0i1mb49d7e"},{"name":"git","_id":"ckk9w1mfk0009fw0ijmna0vuv"}],"Data":[],"Page":[{"title":"分类","date":"2017-01-22T13:31:07.000Z","type":"categories","_content":"","source":"categories/index.md","raw":"---\ntitle: 分类\ndate: 2017-01-22 21:31:07\ntype: \"categories\"\n---\n","updated":"2021-01-23T15:44:55.450Z","path":"categories/index.html","comments":1,"layout":"page","_id":"ckk9w1mf70001fw0inmt4u5jf","content":"","excerpt":"","more":""},{"title":"All tags","date":"2017-01-22T13:36:24.000Z","type":"tags","_content":"","source":"tags/index.md","raw":"---\ntitle: All tags\ndate: 2017-01-22 21:36:24\ntype: \"tags\"\n---\n","updated":"2021-01-23T15:44:55.451Z","path":"tags/index.html","comments":1,"layout":"page","_id":"ckk9w1mf90003fw0igby74arl","content":"","excerpt":"","more":""}],"Post":[{"title":"ButterKnife源码分析","date":"2017-09-19T13:57:47.000Z","_content":"ButterKnife 是 JakeWharton 大神出的一个编译时注解框架。在开发过程中，使用其注解可以极大的简化了我们代码。今天，我们就来研究一下大神的做法，并且了解编译时注解的原理。源码的版本是8.8.1 。\n\n使用方法不做具体演示，[详情见这里](https://github.com/JakeWharton/butterknife)\n这是使用时的具体代码：\n\n<!--more-->\n\n```java\npublic class MainActivity extends AppCompatActivity {\n\n    @BindView(R.id.tv_title)\n    TextView mTvTitle;\n    @BindView(R.id.iv_logo)\n    ImageView mIvLogo;\n\n    @Override\n    protected void onCreate(Bundle savedInstanceState) {\n        super.onCreate(savedInstanceState);\n        setContentView(R.layout.activity_main);\n\n        ButterKnife.bind(this);\n    }\n\n    @OnClick(R.id.iv_logo)\n    public void onClick(View view) {\n        Toast.makeText(MainActivity.this, \"logo...\", Toast.LENGTH_SHORT).show();\n    }\n}\n```\n编译一下，我们可以在 build -> generated -> source -> apt -> debug 里面看到自动生成了一个 MainActivity_ViewBinding.java 类。\n```\npublic class MainActivity_ViewBinding implements Unbinder {\n  private MainActivity target;\n\n  private View view2131427423;\n\n  @UiThread\n  public MainActivity_ViewBinding(MainActivity target) {\n    this(target, target.getWindow().getDecorView());\n  }\n\n  @UiThread\n  public MainActivity_ViewBinding(final MainActivity target, View source) {\n    this.target = target;\n\n    View view;\n    target.mTvTitle = Utils.findRequiredViewAsType(source, R.id.tv_title, \"field 'mTvTitle'\", TextView.class);\n    view = Utils.findRequiredView(source, R.id.iv_logo, \"field 'mIvLogo' and method 'onClick'\");\n    target.mIvLogo = Utils.castView(view, R.id.iv_logo, \"field 'mIvLogo'\", ImageView.class);\n    view2131427423 = view;\n    view.setOnClickListener(new DebouncingOnClickListener() {\n      @Override\n      public void doClick(View p0) {\n        target.onClick(p0);\n      }\n    });\n  }\n\n  @Override\n  @CallSuper\n  public void unbind() {\n    MainActivity target = this.target;\n    if (target == null) throw new IllegalStateException(\"Bindings already cleared.\");\n    this.target = null;\n\n    target.mTvTitle = null;\n    target.mIvLogo = null;\n\n    view2131427423.setOnClickListener(null);\n    view2131427423 = null;\n  }\n}\n```\n可以看到，这里生成的 ViewBinding 类就是用来初始化对应的控件，以及给控件设置对应的事件。那么这个文件是怎么生成的了？我们来看看 `ButterKnife.bind()` 方法\n`bind()` 方法有一系列的重载方法，最后都会调用到 `createBinding()` 方法\n```\nprivate static Unbinder createBinding(@NonNull Object target, @NonNull View source) {\n    Class<?> targetClass = target.getClass();\n    if (debug) Log.d(TAG, \"Looking up binding for \" + targetClass.getName());\n    Constructor<? extends Unbinder> constructor = findBindingConstructorForClass(targetClass);\n\n    if (constructor == null) {\n      return Unbinder.EMPTY;\n    }\n\n    //noinspection TryWithIdenticalCatches Resolves to API 19+ only type.\n    try {\n      return constructor.newInstance(target, source);\n    } catch (IllegalAccessException e) {\n      throw new RuntimeException(\"Unable to invoke \" + constructor, e);\n    } catch (InstantiationException e) {\n      throw new RuntimeException(\"Unable to invoke \" + constructor, e);\n    } catch (InvocationTargetException e) {\n      Throwable cause = e.getCause();\n      if (cause instanceof RuntimeException) {\n        throw (RuntimeException) cause;\n      }\n      if (cause instanceof Error) {\n        throw (Error) cause;\n      }\n      throw new RuntimeException(\"Unable to create binding instance.\", cause);\n    }\n  }\n```\n所以 `bind()` 最终的目的就是调用 MainActivity_ViewBinding 的构造方法，这样控件初始化就已经完成。\n走到这里，似乎一切流程就已经明了。所以这里就存在着最关键的一步，MainActivity_ViewBinding.java 文件到底是怎么生成的。\n首先，我们先来确定一个概念，编译时注解和运行时注解不同的地方就在于，编译时注解是不需要通过反射，而是通过apt(Annotation Processing Tool) 来处理 自己定义的 Annotation。\n我们可以看到在 ButterKnife 源码中有依赖到两个 java library，butterknife-annotations 和 butterknife-compiler 。\n其中 butterknife-annotations 是用来自定义 Annotation 。而 butterknife-compiler 则是对定义好的 annotations 进行对应处理。\n首先 butterknife-compiler 是依赖了 `'com.google.auto.service:auto-service:1.0-rc3'` 和 `'com.squareup:javapoet:1.9.0'`\nauto-service 的作用是在编译时，会去扫描到我们自定义的 Annotation 注解，每扫描到一个，就会在 `AbstractProcessor#process()` 方法中回调处理。\n在 ButterKnife 中，ButterKnifeProcessor 是继承自 AbstractProcessor 的类。我们主要来看看下面两个方法：\n```\n  @Override public Set<String> getSupportedAnnotationTypes() {\n    Set<String> types = new LinkedHashSet<>();\n    for (Class<? extends Annotation> annotation : getSupportedAnnotations()) {\n      types.add(annotation.getCanonicalName());\n    }\n    return types;\n  }\n\n  private Set<Class<? extends Annotation>> getSupportedAnnotations() {\n    Set<Class<? extends Annotation>> annotations = new LinkedHashSet<>();\n\n    annotations.add(BindAnim.class);\n    annotations.add(BindArray.class);\n    annotations.add(BindBitmap.class);\n    annotations.add(BindBool.class);\n    annotations.add(BindColor.class);\n    annotations.add(BindDimen.class);\n    annotations.add(BindDrawable.class);\n    annotations.add(BindFloat.class);\n    annotations.add(BindFont.class);\n    annotations.add(BindInt.class);\n    annotations.add(BindString.class);\n    annotations.add(BindView.class);\n    annotations.add(BindViews.class);\n    annotations.addAll(LISTENERS);\n\n    return annotations;\n  }\n```\n`getSupportedAnnotationTypes()` 方法就是用来确定我们这个处理类需要处理的 Annotation 的种类。返回的就是我们在butterknife-annotations 里定义好的所有 Annotation。\n```\n@Override public boolean process(Set<? extends TypeElement> elements, RoundEnvironment env) {\n    Map<TypeElement, BindingSet> bindingMap = findAndParseTargets(env);\n\n    for (Map.Entry<TypeElement, BindingSet> entry : bindingMap.entrySet()) {\n      TypeElement typeElement = entry.getKey();\n      BindingSet binding = entry.getValue();\n\n      JavaFile javaFile = binding.brewJava(sdk, debuggable);\n      try {\n        javaFile.writeTo(filer);\n      } catch (IOException e) {\n        error(typeElement, \"Unable to write binding for type %s: %s\", typeElement, e.getMessage());\n      }\n    }\n\n    return false;\n  }\n```\n`process()` 方法就是来具体处理每个 Annotation 相对应的逻辑。 首先 `findAndParseTargets()` 方法返回的是一个Map，以 `env.getEnclosingElement()` 返回值为key，也就是我们使用了 ButterKnife 注解的类的名称，值是一个 BindingSet 对象，用于生成这个类的 ViewBinding。\n再接着就是遍历这个Map，将通过 JavaFile 生成的 XXX_ViewBinding 写成 .java文件。\n我们再来看看 BindingSet 里到底是怎么处理的\n```java\nJavaFile brewJava(int sdk, boolean debuggable) {\n    return JavaFile.builder(bindingClassName.packageName(), createType(sdk, debuggable))\n        .addFileComment(\"Generated code from Butter Knife. Do not modify!\")\n        .build();\n  }\n```\n```java\nprivate TypeSpec createType(int sdk, boolean debuggable) {\n    TypeSpec.Builder result = TypeSpec.classBuilder(bindingClassName.simpleName())\n        .addModifiers(PUBLIC);\n    if (isFinal) {\n      result.addModifiers(FINAL);\n    }\n\n    if (parentBinding != null) {\n      result.superclass(parentBinding.bindingClassName);\n    } else {\n      result.addSuperinterface(UNBINDER);\n    }\n\n    if (hasTargetField()) {\n      result.addField(targetTypeName, \"target\", PRIVATE);\n    }\n\n    if (isView) {\n      result.addMethod(createBindingConstructorForView());\n    } else if (isActivity) {\n      result.addMethod(createBindingConstructorForActivity());\n    } else if (isDialog) {\n      result.addMethod(createBindingConstructorForDialog());\n    }\n    if (!constructorNeedsView()) {\n      // Add a delegating constructor with a target type + view signature for reflective use.\n      result.addMethod(createBindingViewDelegateConstructor());\n    }\n    result.addMethod(createBindingConstructor(sdk, debuggable));\n\n    if (hasViewBindings() || parentBinding == null) {\n      result.addMethod(createBindingUnbindMethod(result));\n    }\n\n    return result.build();\n  }\n```\n可以看到，在 `brewJava()` 方法中，就是根据我们的注解来构建出对应的 java 类的逻辑。这部分是 [JavaPoet](https://github.com/square/javapoet)  的用法，感兴趣可以去了解。 \n于是，在我们每次编译完，就可以看到  XXX_ViewBinding 文件了，ButterKnife 源码分析到此结束。\n\n\n\n\n\n\n\n\n","source":"_posts/ButterKnife源码分析.md","raw":"---\ntitle: ButterKnife源码分析\ndate: 2017-9-19 21:57:47\ntags: Android\ncategories: Android\n---\nButterKnife 是 JakeWharton 大神出的一个编译时注解框架。在开发过程中，使用其注解可以极大的简化了我们代码。今天，我们就来研究一下大神的做法，并且了解编译时注解的原理。源码的版本是8.8.1 。\n\n使用方法不做具体演示，[详情见这里](https://github.com/JakeWharton/butterknife)\n这是使用时的具体代码：\n\n<!--more-->\n\n```java\npublic class MainActivity extends AppCompatActivity {\n\n    @BindView(R.id.tv_title)\n    TextView mTvTitle;\n    @BindView(R.id.iv_logo)\n    ImageView mIvLogo;\n\n    @Override\n    protected void onCreate(Bundle savedInstanceState) {\n        super.onCreate(savedInstanceState);\n        setContentView(R.layout.activity_main);\n\n        ButterKnife.bind(this);\n    }\n\n    @OnClick(R.id.iv_logo)\n    public void onClick(View view) {\n        Toast.makeText(MainActivity.this, \"logo...\", Toast.LENGTH_SHORT).show();\n    }\n}\n```\n编译一下，我们可以在 build -> generated -> source -> apt -> debug 里面看到自动生成了一个 MainActivity_ViewBinding.java 类。\n```\npublic class MainActivity_ViewBinding implements Unbinder {\n  private MainActivity target;\n\n  private View view2131427423;\n\n  @UiThread\n  public MainActivity_ViewBinding(MainActivity target) {\n    this(target, target.getWindow().getDecorView());\n  }\n\n  @UiThread\n  public MainActivity_ViewBinding(final MainActivity target, View source) {\n    this.target = target;\n\n    View view;\n    target.mTvTitle = Utils.findRequiredViewAsType(source, R.id.tv_title, \"field 'mTvTitle'\", TextView.class);\n    view = Utils.findRequiredView(source, R.id.iv_logo, \"field 'mIvLogo' and method 'onClick'\");\n    target.mIvLogo = Utils.castView(view, R.id.iv_logo, \"field 'mIvLogo'\", ImageView.class);\n    view2131427423 = view;\n    view.setOnClickListener(new DebouncingOnClickListener() {\n      @Override\n      public void doClick(View p0) {\n        target.onClick(p0);\n      }\n    });\n  }\n\n  @Override\n  @CallSuper\n  public void unbind() {\n    MainActivity target = this.target;\n    if (target == null) throw new IllegalStateException(\"Bindings already cleared.\");\n    this.target = null;\n\n    target.mTvTitle = null;\n    target.mIvLogo = null;\n\n    view2131427423.setOnClickListener(null);\n    view2131427423 = null;\n  }\n}\n```\n可以看到，这里生成的 ViewBinding 类就是用来初始化对应的控件，以及给控件设置对应的事件。那么这个文件是怎么生成的了？我们来看看 `ButterKnife.bind()` 方法\n`bind()` 方法有一系列的重载方法，最后都会调用到 `createBinding()` 方法\n```\nprivate static Unbinder createBinding(@NonNull Object target, @NonNull View source) {\n    Class<?> targetClass = target.getClass();\n    if (debug) Log.d(TAG, \"Looking up binding for \" + targetClass.getName());\n    Constructor<? extends Unbinder> constructor = findBindingConstructorForClass(targetClass);\n\n    if (constructor == null) {\n      return Unbinder.EMPTY;\n    }\n\n    //noinspection TryWithIdenticalCatches Resolves to API 19+ only type.\n    try {\n      return constructor.newInstance(target, source);\n    } catch (IllegalAccessException e) {\n      throw new RuntimeException(\"Unable to invoke \" + constructor, e);\n    } catch (InstantiationException e) {\n      throw new RuntimeException(\"Unable to invoke \" + constructor, e);\n    } catch (InvocationTargetException e) {\n      Throwable cause = e.getCause();\n      if (cause instanceof RuntimeException) {\n        throw (RuntimeException) cause;\n      }\n      if (cause instanceof Error) {\n        throw (Error) cause;\n      }\n      throw new RuntimeException(\"Unable to create binding instance.\", cause);\n    }\n  }\n```\n所以 `bind()` 最终的目的就是调用 MainActivity_ViewBinding 的构造方法，这样控件初始化就已经完成。\n走到这里，似乎一切流程就已经明了。所以这里就存在着最关键的一步，MainActivity_ViewBinding.java 文件到底是怎么生成的。\n首先，我们先来确定一个概念，编译时注解和运行时注解不同的地方就在于，编译时注解是不需要通过反射，而是通过apt(Annotation Processing Tool) 来处理 自己定义的 Annotation。\n我们可以看到在 ButterKnife 源码中有依赖到两个 java library，butterknife-annotations 和 butterknife-compiler 。\n其中 butterknife-annotations 是用来自定义 Annotation 。而 butterknife-compiler 则是对定义好的 annotations 进行对应处理。\n首先 butterknife-compiler 是依赖了 `'com.google.auto.service:auto-service:1.0-rc3'` 和 `'com.squareup:javapoet:1.9.0'`\nauto-service 的作用是在编译时，会去扫描到我们自定义的 Annotation 注解，每扫描到一个，就会在 `AbstractProcessor#process()` 方法中回调处理。\n在 ButterKnife 中，ButterKnifeProcessor 是继承自 AbstractProcessor 的类。我们主要来看看下面两个方法：\n```\n  @Override public Set<String> getSupportedAnnotationTypes() {\n    Set<String> types = new LinkedHashSet<>();\n    for (Class<? extends Annotation> annotation : getSupportedAnnotations()) {\n      types.add(annotation.getCanonicalName());\n    }\n    return types;\n  }\n\n  private Set<Class<? extends Annotation>> getSupportedAnnotations() {\n    Set<Class<? extends Annotation>> annotations = new LinkedHashSet<>();\n\n    annotations.add(BindAnim.class);\n    annotations.add(BindArray.class);\n    annotations.add(BindBitmap.class);\n    annotations.add(BindBool.class);\n    annotations.add(BindColor.class);\n    annotations.add(BindDimen.class);\n    annotations.add(BindDrawable.class);\n    annotations.add(BindFloat.class);\n    annotations.add(BindFont.class);\n    annotations.add(BindInt.class);\n    annotations.add(BindString.class);\n    annotations.add(BindView.class);\n    annotations.add(BindViews.class);\n    annotations.addAll(LISTENERS);\n\n    return annotations;\n  }\n```\n`getSupportedAnnotationTypes()` 方法就是用来确定我们这个处理类需要处理的 Annotation 的种类。返回的就是我们在butterknife-annotations 里定义好的所有 Annotation。\n```\n@Override public boolean process(Set<? extends TypeElement> elements, RoundEnvironment env) {\n    Map<TypeElement, BindingSet> bindingMap = findAndParseTargets(env);\n\n    for (Map.Entry<TypeElement, BindingSet> entry : bindingMap.entrySet()) {\n      TypeElement typeElement = entry.getKey();\n      BindingSet binding = entry.getValue();\n\n      JavaFile javaFile = binding.brewJava(sdk, debuggable);\n      try {\n        javaFile.writeTo(filer);\n      } catch (IOException e) {\n        error(typeElement, \"Unable to write binding for type %s: %s\", typeElement, e.getMessage());\n      }\n    }\n\n    return false;\n  }\n```\n`process()` 方法就是来具体处理每个 Annotation 相对应的逻辑。 首先 `findAndParseTargets()` 方法返回的是一个Map，以 `env.getEnclosingElement()` 返回值为key，也就是我们使用了 ButterKnife 注解的类的名称，值是一个 BindingSet 对象，用于生成这个类的 ViewBinding。\n再接着就是遍历这个Map，将通过 JavaFile 生成的 XXX_ViewBinding 写成 .java文件。\n我们再来看看 BindingSet 里到底是怎么处理的\n```java\nJavaFile brewJava(int sdk, boolean debuggable) {\n    return JavaFile.builder(bindingClassName.packageName(), createType(sdk, debuggable))\n        .addFileComment(\"Generated code from Butter Knife. Do not modify!\")\n        .build();\n  }\n```\n```java\nprivate TypeSpec createType(int sdk, boolean debuggable) {\n    TypeSpec.Builder result = TypeSpec.classBuilder(bindingClassName.simpleName())\n        .addModifiers(PUBLIC);\n    if (isFinal) {\n      result.addModifiers(FINAL);\n    }\n\n    if (parentBinding != null) {\n      result.superclass(parentBinding.bindingClassName);\n    } else {\n      result.addSuperinterface(UNBINDER);\n    }\n\n    if (hasTargetField()) {\n      result.addField(targetTypeName, \"target\", PRIVATE);\n    }\n\n    if (isView) {\n      result.addMethod(createBindingConstructorForView());\n    } else if (isActivity) {\n      result.addMethod(createBindingConstructorForActivity());\n    } else if (isDialog) {\n      result.addMethod(createBindingConstructorForDialog());\n    }\n    if (!constructorNeedsView()) {\n      // Add a delegating constructor with a target type + view signature for reflective use.\n      result.addMethod(createBindingViewDelegateConstructor());\n    }\n    result.addMethod(createBindingConstructor(sdk, debuggable));\n\n    if (hasViewBindings() || parentBinding == null) {\n      result.addMethod(createBindingUnbindMethod(result));\n    }\n\n    return result.build();\n  }\n```\n可以看到，在 `brewJava()` 方法中，就是根据我们的注解来构建出对应的 java 类的逻辑。这部分是 [JavaPoet](https://github.com/square/javapoet)  的用法，感兴趣可以去了解。 \n于是，在我们每次编译完，就可以看到  XXX_ViewBinding 文件了，ButterKnife 源码分析到此结束。\n\n\n\n\n\n\n\n\n","slug":"ButterKnife源码分析","published":1,"updated":"2021-01-23T15:44:55.448Z","comments":1,"layout":"post","photos":[],"link":"","_id":"ckk9w1mf40000fw0icb4iq8d0","content":"<p>ButterKnife 是 JakeWharton 大神出的一个编译时注解框架。在开发过程中，使用其注解可以极大的简化了我们代码。今天，我们就来研究一下大神的做法，并且了解编译时注解的原理。源码的版本是8.8.1 。</p>\n<p>使用方法不做具体演示，<a href=\"https://github.com/JakeWharton/butterknife\" target=\"_blank\" rel=\"external\">详情见这里</a><br>这是使用时的具体代码：</p>\n<a id=\"more\"></a>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div><div class=\"line\">14</div><div class=\"line\">15</div><div class=\"line\">16</div><div class=\"line\">17</div><div class=\"line\">18</div><div class=\"line\">19</div><div class=\"line\">20</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"keyword\">public</span> <span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">MainActivity</span> <span class=\"keyword\">extends</span> <span class=\"title\">AppCompatActivity</span> </span>&#123;</div><div class=\"line\"></div><div class=\"line\">    <span class=\"meta\">@BindView</span>(R.id.tv_title)</div><div class=\"line\">    TextView mTvTitle;</div><div class=\"line\">    <span class=\"meta\">@BindView</span>(R.id.iv_logo)</div><div class=\"line\">    ImageView mIvLogo;</div><div class=\"line\"></div><div class=\"line\">    <span class=\"meta\">@Override</span></div><div class=\"line\">    <span class=\"function\"><span class=\"keyword\">protected</span> <span class=\"keyword\">void</span> <span class=\"title\">onCreate</span><span class=\"params\">(Bundle savedInstanceState)</span> </span>&#123;</div><div class=\"line\">        <span class=\"keyword\">super</span>.onCreate(savedInstanceState);</div><div class=\"line\">        setContentView(R.layout.activity_main);</div><div class=\"line\"></div><div class=\"line\">        ButterKnife.bind(<span class=\"keyword\">this</span>);</div><div class=\"line\">    &#125;</div><div class=\"line\"></div><div class=\"line\">    <span class=\"meta\">@OnClick</span>(R.id.iv_logo)</div><div class=\"line\">    <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">void</span> <span class=\"title\">onClick</span><span class=\"params\">(View view)</span> </span>&#123;</div><div class=\"line\">        Toast.makeText(MainActivity.<span class=\"keyword\">this</span>, <span class=\"string\">\"logo...\"</span>, Toast.LENGTH_SHORT).show();</div><div class=\"line\">    &#125;</div><div class=\"line\">&#125;</div></pre></td></tr></table></figure>\n<p>编译一下，我们可以在 build -&gt; generated -&gt; source -&gt; apt -&gt; debug 里面看到自动生成了一个 MainActivity_ViewBinding.java 类。<br><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div><div class=\"line\">14</div><div class=\"line\">15</div><div class=\"line\">16</div><div class=\"line\">17</div><div class=\"line\">18</div><div class=\"line\">19</div><div class=\"line\">20</div><div class=\"line\">21</div><div class=\"line\">22</div><div class=\"line\">23</div><div class=\"line\">24</div><div class=\"line\">25</div><div class=\"line\">26</div><div class=\"line\">27</div><div class=\"line\">28</div><div class=\"line\">29</div><div class=\"line\">30</div><div class=\"line\">31</div><div class=\"line\">32</div><div class=\"line\">33</div><div class=\"line\">34</div><div class=\"line\">35</div><div class=\"line\">36</div><div class=\"line\">37</div><div class=\"line\">38</div><div class=\"line\">39</div><div class=\"line\">40</div><div class=\"line\">41</div></pre></td><td class=\"code\"><pre><div class=\"line\">public class MainActivity_ViewBinding implements Unbinder &#123;</div><div class=\"line\">  private MainActivity target;</div><div class=\"line\"></div><div class=\"line\">  private View view2131427423;</div><div class=\"line\"></div><div class=\"line\">  @UiThread</div><div class=\"line\">  public MainActivity_ViewBinding(MainActivity target) &#123;</div><div class=\"line\">    this(target, target.getWindow().getDecorView());</div><div class=\"line\">  &#125;</div><div class=\"line\"></div><div class=\"line\">  @UiThread</div><div class=\"line\">  public MainActivity_ViewBinding(final MainActivity target, View source) &#123;</div><div class=\"line\">    this.target = target;</div><div class=\"line\"></div><div class=\"line\">    View view;</div><div class=\"line\">    target.mTvTitle = Utils.findRequiredViewAsType(source, R.id.tv_title, &quot;field &apos;mTvTitle&apos;&quot;, TextView.class);</div><div class=\"line\">    view = Utils.findRequiredView(source, R.id.iv_logo, &quot;field &apos;mIvLogo&apos; and method &apos;onClick&apos;&quot;);</div><div class=\"line\">    target.mIvLogo = Utils.castView(view, R.id.iv_logo, &quot;field &apos;mIvLogo&apos;&quot;, ImageView.class);</div><div class=\"line\">    view2131427423 = view;</div><div class=\"line\">    view.setOnClickListener(new DebouncingOnClickListener() &#123;</div><div class=\"line\">      @Override</div><div class=\"line\">      public void doClick(View p0) &#123;</div><div class=\"line\">        target.onClick(p0);</div><div class=\"line\">      &#125;</div><div class=\"line\">    &#125;);</div><div class=\"line\">  &#125;</div><div class=\"line\"></div><div class=\"line\">  @Override</div><div class=\"line\">  @CallSuper</div><div class=\"line\">  public void unbind() &#123;</div><div class=\"line\">    MainActivity target = this.target;</div><div class=\"line\">    if (target == null) throw new IllegalStateException(&quot;Bindings already cleared.&quot;);</div><div class=\"line\">    this.target = null;</div><div class=\"line\"></div><div class=\"line\">    target.mTvTitle = null;</div><div class=\"line\">    target.mIvLogo = null;</div><div class=\"line\"></div><div class=\"line\">    view2131427423.setOnClickListener(null);</div><div class=\"line\">    view2131427423 = null;</div><div class=\"line\">  &#125;</div><div class=\"line\">&#125;</div></pre></td></tr></table></figure></p>\n<p>可以看到，这里生成的 ViewBinding 类就是用来初始化对应的控件，以及给控件设置对应的事件。那么这个文件是怎么生成的了？我们来看看 <code>ButterKnife.bind()</code> 方法<br><code>bind()</code> 方法有一系列的重载方法，最后都会调用到 <code>createBinding()</code> 方法<br><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div><div class=\"line\">14</div><div class=\"line\">15</div><div class=\"line\">16</div><div class=\"line\">17</div><div class=\"line\">18</div><div class=\"line\">19</div><div class=\"line\">20</div><div class=\"line\">21</div><div class=\"line\">22</div><div class=\"line\">23</div><div class=\"line\">24</div><div class=\"line\">25</div><div class=\"line\">26</div><div class=\"line\">27</div></pre></td><td class=\"code\"><pre><div class=\"line\">private static Unbinder createBinding(@NonNull Object target, @NonNull View source) &#123;</div><div class=\"line\">    Class&lt;?&gt; targetClass = target.getClass();</div><div class=\"line\">    if (debug) Log.d(TAG, &quot;Looking up binding for &quot; + targetClass.getName());</div><div class=\"line\">    Constructor&lt;? extends Unbinder&gt; constructor = findBindingConstructorForClass(targetClass);</div><div class=\"line\"></div><div class=\"line\">    if (constructor == null) &#123;</div><div class=\"line\">      return Unbinder.EMPTY;</div><div class=\"line\">    &#125;</div><div class=\"line\"></div><div class=\"line\">    //noinspection TryWithIdenticalCatches Resolves to API 19+ only type.</div><div class=\"line\">    try &#123;</div><div class=\"line\">      return constructor.newInstance(target, source);</div><div class=\"line\">    &#125; catch (IllegalAccessException e) &#123;</div><div class=\"line\">      throw new RuntimeException(&quot;Unable to invoke &quot; + constructor, e);</div><div class=\"line\">    &#125; catch (InstantiationException e) &#123;</div><div class=\"line\">      throw new RuntimeException(&quot;Unable to invoke &quot; + constructor, e);</div><div class=\"line\">    &#125; catch (InvocationTargetException e) &#123;</div><div class=\"line\">      Throwable cause = e.getCause();</div><div class=\"line\">      if (cause instanceof RuntimeException) &#123;</div><div class=\"line\">        throw (RuntimeException) cause;</div><div class=\"line\">      &#125;</div><div class=\"line\">      if (cause instanceof Error) &#123;</div><div class=\"line\">        throw (Error) cause;</div><div class=\"line\">      &#125;</div><div class=\"line\">      throw new RuntimeException(&quot;Unable to create binding instance.&quot;, cause);</div><div class=\"line\">    &#125;</div><div class=\"line\">  &#125;</div></pre></td></tr></table></figure></p>\n<p>所以 <code>bind()</code> 最终的目的就是调用 MainActivity_ViewBinding 的构造方法，这样控件初始化就已经完成。<br>走到这里，似乎一切流程就已经明了。所以这里就存在着最关键的一步，MainActivity_ViewBinding.java 文件到底是怎么生成的。<br>首先，我们先来确定一个概念，编译时注解和运行时注解不同的地方就在于，编译时注解是不需要通过反射，而是通过apt(Annotation Processing Tool) 来处理 自己定义的 Annotation。<br>我们可以看到在 ButterKnife 源码中有依赖到两个 java library，butterknife-annotations 和 butterknife-compiler 。<br>其中 butterknife-annotations 是用来自定义 Annotation 。而 butterknife-compiler 则是对定义好的 annotations 进行对应处理。<br>首先 butterknife-compiler 是依赖了 <code>&#39;com.google.auto.service:auto-service:1.0-rc3&#39;</code> 和 <code>&#39;com.squareup:javapoet:1.9.0&#39;</code><br>auto-service 的作用是在编译时，会去扫描到我们自定义的 Annotation 注解，每扫描到一个，就会在 <code>AbstractProcessor#process()</code> 方法中回调处理。<br>在 ButterKnife 中，ButterKnifeProcessor 是继承自 AbstractProcessor 的类。我们主要来看看下面两个方法：<br><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div><div class=\"line\">14</div><div class=\"line\">15</div><div class=\"line\">16</div><div class=\"line\">17</div><div class=\"line\">18</div><div class=\"line\">19</div><div class=\"line\">20</div><div class=\"line\">21</div><div class=\"line\">22</div><div class=\"line\">23</div><div class=\"line\">24</div><div class=\"line\">25</div><div class=\"line\">26</div><div class=\"line\">27</div><div class=\"line\">28</div></pre></td><td class=\"code\"><pre><div class=\"line\">@Override public Set&lt;String&gt; getSupportedAnnotationTypes() &#123;</div><div class=\"line\">  Set&lt;String&gt; types = new LinkedHashSet&lt;&gt;();</div><div class=\"line\">  for (Class&lt;? extends Annotation&gt; annotation : getSupportedAnnotations()) &#123;</div><div class=\"line\">    types.add(annotation.getCanonicalName());</div><div class=\"line\">  &#125;</div><div class=\"line\">  return types;</div><div class=\"line\">&#125;</div><div class=\"line\"></div><div class=\"line\">private Set&lt;Class&lt;? extends Annotation&gt;&gt; getSupportedAnnotations() &#123;</div><div class=\"line\">  Set&lt;Class&lt;? extends Annotation&gt;&gt; annotations = new LinkedHashSet&lt;&gt;();</div><div class=\"line\"></div><div class=\"line\">  annotations.add(BindAnim.class);</div><div class=\"line\">  annotations.add(BindArray.class);</div><div class=\"line\">  annotations.add(BindBitmap.class);</div><div class=\"line\">  annotations.add(BindBool.class);</div><div class=\"line\">  annotations.add(BindColor.class);</div><div class=\"line\">  annotations.add(BindDimen.class);</div><div class=\"line\">  annotations.add(BindDrawable.class);</div><div class=\"line\">  annotations.add(BindFloat.class);</div><div class=\"line\">  annotations.add(BindFont.class);</div><div class=\"line\">  annotations.add(BindInt.class);</div><div class=\"line\">  annotations.add(BindString.class);</div><div class=\"line\">  annotations.add(BindView.class);</div><div class=\"line\">  annotations.add(BindViews.class);</div><div class=\"line\">  annotations.addAll(LISTENERS);</div><div class=\"line\"></div><div class=\"line\">  return annotations;</div><div class=\"line\">&#125;</div></pre></td></tr></table></figure></p>\n<p><code>getSupportedAnnotationTypes()</code> 方法就是用来确定我们这个处理类需要处理的 Annotation 的种类。返回的就是我们在butterknife-annotations 里定义好的所有 Annotation。<br><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div><div class=\"line\">14</div><div class=\"line\">15</div><div class=\"line\">16</div><div class=\"line\">17</div></pre></td><td class=\"code\"><pre><div class=\"line\">@Override public boolean process(Set&lt;? extends TypeElement&gt; elements, RoundEnvironment env) &#123;</div><div class=\"line\">    Map&lt;TypeElement, BindingSet&gt; bindingMap = findAndParseTargets(env);</div><div class=\"line\"></div><div class=\"line\">    for (Map.Entry&lt;TypeElement, BindingSet&gt; entry : bindingMap.entrySet()) &#123;</div><div class=\"line\">      TypeElement typeElement = entry.getKey();</div><div class=\"line\">      BindingSet binding = entry.getValue();</div><div class=\"line\"></div><div class=\"line\">      JavaFile javaFile = binding.brewJava(sdk, debuggable);</div><div class=\"line\">      try &#123;</div><div class=\"line\">        javaFile.writeTo(filer);</div><div class=\"line\">      &#125; catch (IOException e) &#123;</div><div class=\"line\">        error(typeElement, &quot;Unable to write binding for type %s: %s&quot;, typeElement, e.getMessage());</div><div class=\"line\">      &#125;</div><div class=\"line\">    &#125;</div><div class=\"line\"></div><div class=\"line\">    return false;</div><div class=\"line\">  &#125;</div></pre></td></tr></table></figure></p>\n<p><code>process()</code> 方法就是来具体处理每个 Annotation 相对应的逻辑。 首先 <code>findAndParseTargets()</code> 方法返回的是一个Map，以 <code>env.getEnclosingElement()</code> 返回值为key，也就是我们使用了 ButterKnife 注解的类的名称，值是一个 BindingSet 对象，用于生成这个类的 ViewBinding。<br>再接着就是遍历这个Map，将通过 JavaFile 生成的 XXX_ViewBinding 写成 .java文件。<br>我们再来看看 BindingSet 里到底是怎么处理的<br><figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"function\">JavaFile <span class=\"title\">brewJava</span><span class=\"params\">(<span class=\"keyword\">int</span> sdk, <span class=\"keyword\">boolean</span> debuggable)</span> </span>&#123;</div><div class=\"line\">    <span class=\"keyword\">return</span> JavaFile.builder(bindingClassName.packageName(), createType(sdk, debuggable))</div><div class=\"line\">        .addFileComment(<span class=\"string\">\"Generated code from Butter Knife. Do not modify!\"</span>)</div><div class=\"line\">        .build();</div><div class=\"line\">  &#125;</div></pre></td></tr></table></figure></p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div><div class=\"line\">14</div><div class=\"line\">15</div><div class=\"line\">16</div><div class=\"line\">17</div><div class=\"line\">18</div><div class=\"line\">19</div><div class=\"line\">20</div><div class=\"line\">21</div><div class=\"line\">22</div><div class=\"line\">23</div><div class=\"line\">24</div><div class=\"line\">25</div><div class=\"line\">26</div><div class=\"line\">27</div><div class=\"line\">28</div><div class=\"line\">29</div><div class=\"line\">30</div><div class=\"line\">31</div><div class=\"line\">32</div><div class=\"line\">33</div><div class=\"line\">34</div><div class=\"line\">35</div><div class=\"line\">36</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"function\"><span class=\"keyword\">private</span> TypeSpec <span class=\"title\">createType</span><span class=\"params\">(<span class=\"keyword\">int</span> sdk, <span class=\"keyword\">boolean</span> debuggable)</span> </span>&#123;</div><div class=\"line\">    TypeSpec.Builder result = TypeSpec.classBuilder(bindingClassName.simpleName())</div><div class=\"line\">        .addModifiers(PUBLIC);</div><div class=\"line\">    <span class=\"keyword\">if</span> (isFinal) &#123;</div><div class=\"line\">      result.addModifiers(FINAL);</div><div class=\"line\">    &#125;</div><div class=\"line\"></div><div class=\"line\">    <span class=\"keyword\">if</span> (parentBinding != <span class=\"keyword\">null</span>) &#123;</div><div class=\"line\">      result.superclass(parentBinding.bindingClassName);</div><div class=\"line\">    &#125; <span class=\"keyword\">else</span> &#123;</div><div class=\"line\">      result.addSuperinterface(UNBINDER);</div><div class=\"line\">    &#125;</div><div class=\"line\"></div><div class=\"line\">    <span class=\"keyword\">if</span> (hasTargetField()) &#123;</div><div class=\"line\">      result.addField(targetTypeName, <span class=\"string\">\"target\"</span>, PRIVATE);</div><div class=\"line\">    &#125;</div><div class=\"line\"></div><div class=\"line\">    <span class=\"keyword\">if</span> (isView) &#123;</div><div class=\"line\">      result.addMethod(createBindingConstructorForView());</div><div class=\"line\">    &#125; <span class=\"keyword\">else</span> <span class=\"keyword\">if</span> (isActivity) &#123;</div><div class=\"line\">      result.addMethod(createBindingConstructorForActivity());</div><div class=\"line\">    &#125; <span class=\"keyword\">else</span> <span class=\"keyword\">if</span> (isDialog) &#123;</div><div class=\"line\">      result.addMethod(createBindingConstructorForDialog());</div><div class=\"line\">    &#125;</div><div class=\"line\">    <span class=\"keyword\">if</span> (!constructorNeedsView()) &#123;</div><div class=\"line\">      <span class=\"comment\">// Add a delegating constructor with a target type + view signature for reflective use.</span></div><div class=\"line\">      result.addMethod(createBindingViewDelegateConstructor());</div><div class=\"line\">    &#125;</div><div class=\"line\">    result.addMethod(createBindingConstructor(sdk, debuggable));</div><div class=\"line\"></div><div class=\"line\">    <span class=\"keyword\">if</span> (hasViewBindings() || parentBinding == <span class=\"keyword\">null</span>) &#123;</div><div class=\"line\">      result.addMethod(createBindingUnbindMethod(result));</div><div class=\"line\">    &#125;</div><div class=\"line\"></div><div class=\"line\">    <span class=\"keyword\">return</span> result.build();</div><div class=\"line\">  &#125;</div></pre></td></tr></table></figure>\n<p>可以看到，在 <code>brewJava()</code> 方法中，就是根据我们的注解来构建出对应的 java 类的逻辑。这部分是 <a href=\"https://github.com/square/javapoet\" target=\"_blank\" rel=\"external\">JavaPoet</a>  的用法，感兴趣可以去了解。<br>于是，在我们每次编译完，就可以看到  XXX_ViewBinding 文件了，ButterKnife 源码分析到此结束。</p>\n","excerpt":"<p>ButterKnife 是 JakeWharton 大神出的一个编译时注解框架。在开发过程中，使用其注解可以极大的简化了我们代码。今天，我们就来研究一下大神的做法，并且了解编译时注解的原理。源码的版本是8.8.1 。</p>\n<p>使用方法不做具体演示，<a href=\"https://github.com/JakeWharton/butterknife\">详情见这里</a><br>这是使用时的具体代码：</p>","more":"<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div><div class=\"line\">14</div><div class=\"line\">15</div><div class=\"line\">16</div><div class=\"line\">17</div><div class=\"line\">18</div><div class=\"line\">19</div><div class=\"line\">20</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"keyword\">public</span> <span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">MainActivity</span> <span class=\"keyword\">extends</span> <span class=\"title\">AppCompatActivity</span> </span>&#123;</div><div class=\"line\"></div><div class=\"line\">    <span class=\"meta\">@BindView</span>(R.id.tv_title)</div><div class=\"line\">    TextView mTvTitle;</div><div class=\"line\">    <span class=\"meta\">@BindView</span>(R.id.iv_logo)</div><div class=\"line\">    ImageView mIvLogo;</div><div class=\"line\"></div><div class=\"line\">    <span class=\"meta\">@Override</span></div><div class=\"line\">    <span class=\"function\"><span class=\"keyword\">protected</span> <span class=\"keyword\">void</span> <span class=\"title\">onCreate</span><span class=\"params\">(Bundle savedInstanceState)</span> </span>&#123;</div><div class=\"line\">        <span class=\"keyword\">super</span>.onCreate(savedInstanceState);</div><div class=\"line\">        setContentView(R.layout.activity_main);</div><div class=\"line\"></div><div class=\"line\">        ButterKnife.bind(<span class=\"keyword\">this</span>);</div><div class=\"line\">    &#125;</div><div class=\"line\"></div><div class=\"line\">    <span class=\"meta\">@OnClick</span>(R.id.iv_logo)</div><div class=\"line\">    <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">void</span> <span class=\"title\">onClick</span><span class=\"params\">(View view)</span> </span>&#123;</div><div class=\"line\">        Toast.makeText(MainActivity.<span class=\"keyword\">this</span>, <span class=\"string\">\"logo...\"</span>, Toast.LENGTH_SHORT).show();</div><div class=\"line\">    &#125;</div><div class=\"line\">&#125;</div></pre></td></tr></table></figure>\n<p>编译一下，我们可以在 build -&gt; generated -&gt; source -&gt; apt -&gt; debug 里面看到自动生成了一个 MainActivity_ViewBinding.java 类。<br><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div><div class=\"line\">14</div><div class=\"line\">15</div><div class=\"line\">16</div><div class=\"line\">17</div><div class=\"line\">18</div><div class=\"line\">19</div><div class=\"line\">20</div><div class=\"line\">21</div><div class=\"line\">22</div><div class=\"line\">23</div><div class=\"line\">24</div><div class=\"line\">25</div><div class=\"line\">26</div><div class=\"line\">27</div><div class=\"line\">28</div><div class=\"line\">29</div><div class=\"line\">30</div><div class=\"line\">31</div><div class=\"line\">32</div><div class=\"line\">33</div><div class=\"line\">34</div><div class=\"line\">35</div><div class=\"line\">36</div><div class=\"line\">37</div><div class=\"line\">38</div><div class=\"line\">39</div><div class=\"line\">40</div><div class=\"line\">41</div></pre></td><td class=\"code\"><pre><div class=\"line\">public class MainActivity_ViewBinding implements Unbinder &#123;</div><div class=\"line\">  private MainActivity target;</div><div class=\"line\"></div><div class=\"line\">  private View view2131427423;</div><div class=\"line\"></div><div class=\"line\">  @UiThread</div><div class=\"line\">  public MainActivity_ViewBinding(MainActivity target) &#123;</div><div class=\"line\">    this(target, target.getWindow().getDecorView());</div><div class=\"line\">  &#125;</div><div class=\"line\"></div><div class=\"line\">  @UiThread</div><div class=\"line\">  public MainActivity_ViewBinding(final MainActivity target, View source) &#123;</div><div class=\"line\">    this.target = target;</div><div class=\"line\"></div><div class=\"line\">    View view;</div><div class=\"line\">    target.mTvTitle = Utils.findRequiredViewAsType(source, R.id.tv_title, &quot;field &apos;mTvTitle&apos;&quot;, TextView.class);</div><div class=\"line\">    view = Utils.findRequiredView(source, R.id.iv_logo, &quot;field &apos;mIvLogo&apos; and method &apos;onClick&apos;&quot;);</div><div class=\"line\">    target.mIvLogo = Utils.castView(view, R.id.iv_logo, &quot;field &apos;mIvLogo&apos;&quot;, ImageView.class);</div><div class=\"line\">    view2131427423 = view;</div><div class=\"line\">    view.setOnClickListener(new DebouncingOnClickListener() &#123;</div><div class=\"line\">      @Override</div><div class=\"line\">      public void doClick(View p0) &#123;</div><div class=\"line\">        target.onClick(p0);</div><div class=\"line\">      &#125;</div><div class=\"line\">    &#125;);</div><div class=\"line\">  &#125;</div><div class=\"line\"></div><div class=\"line\">  @Override</div><div class=\"line\">  @CallSuper</div><div class=\"line\">  public void unbind() &#123;</div><div class=\"line\">    MainActivity target = this.target;</div><div class=\"line\">    if (target == null) throw new IllegalStateException(&quot;Bindings already cleared.&quot;);</div><div class=\"line\">    this.target = null;</div><div class=\"line\"></div><div class=\"line\">    target.mTvTitle = null;</div><div class=\"line\">    target.mIvLogo = null;</div><div class=\"line\"></div><div class=\"line\">    view2131427423.setOnClickListener(null);</div><div class=\"line\">    view2131427423 = null;</div><div class=\"line\">  &#125;</div><div class=\"line\">&#125;</div></pre></td></tr></table></figure></p>\n<p>可以看到，这里生成的 ViewBinding 类就是用来初始化对应的控件，以及给控件设置对应的事件。那么这个文件是怎么生成的了？我们来看看 <code>ButterKnife.bind()</code> 方法<br><code>bind()</code> 方法有一系列的重载方法，最后都会调用到 <code>createBinding()</code> 方法<br><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div><div class=\"line\">14</div><div class=\"line\">15</div><div class=\"line\">16</div><div class=\"line\">17</div><div class=\"line\">18</div><div class=\"line\">19</div><div class=\"line\">20</div><div class=\"line\">21</div><div class=\"line\">22</div><div class=\"line\">23</div><div class=\"line\">24</div><div class=\"line\">25</div><div class=\"line\">26</div><div class=\"line\">27</div></pre></td><td class=\"code\"><pre><div class=\"line\">private static Unbinder createBinding(@NonNull Object target, @NonNull View source) &#123;</div><div class=\"line\">    Class&lt;?&gt; targetClass = target.getClass();</div><div class=\"line\">    if (debug) Log.d(TAG, &quot;Looking up binding for &quot; + targetClass.getName());</div><div class=\"line\">    Constructor&lt;? extends Unbinder&gt; constructor = findBindingConstructorForClass(targetClass);</div><div class=\"line\"></div><div class=\"line\">    if (constructor == null) &#123;</div><div class=\"line\">      return Unbinder.EMPTY;</div><div class=\"line\">    &#125;</div><div class=\"line\"></div><div class=\"line\">    //noinspection TryWithIdenticalCatches Resolves to API 19+ only type.</div><div class=\"line\">    try &#123;</div><div class=\"line\">      return constructor.newInstance(target, source);</div><div class=\"line\">    &#125; catch (IllegalAccessException e) &#123;</div><div class=\"line\">      throw new RuntimeException(&quot;Unable to invoke &quot; + constructor, e);</div><div class=\"line\">    &#125; catch (InstantiationException e) &#123;</div><div class=\"line\">      throw new RuntimeException(&quot;Unable to invoke &quot; + constructor, e);</div><div class=\"line\">    &#125; catch (InvocationTargetException e) &#123;</div><div class=\"line\">      Throwable cause = e.getCause();</div><div class=\"line\">      if (cause instanceof RuntimeException) &#123;</div><div class=\"line\">        throw (RuntimeException) cause;</div><div class=\"line\">      &#125;</div><div class=\"line\">      if (cause instanceof Error) &#123;</div><div class=\"line\">        throw (Error) cause;</div><div class=\"line\">      &#125;</div><div class=\"line\">      throw new RuntimeException(&quot;Unable to create binding instance.&quot;, cause);</div><div class=\"line\">    &#125;</div><div class=\"line\">  &#125;</div></pre></td></tr></table></figure></p>\n<p>所以 <code>bind()</code> 最终的目的就是调用 MainActivity_ViewBinding 的构造方法，这样控件初始化就已经完成。<br>走到这里，似乎一切流程就已经明了。所以这里就存在着最关键的一步，MainActivity_ViewBinding.java 文件到底是怎么生成的。<br>首先，我们先来确定一个概念，编译时注解和运行时注解不同的地方就在于，编译时注解是不需要通过反射，而是通过apt(Annotation Processing Tool) 来处理 自己定义的 Annotation。<br>我们可以看到在 ButterKnife 源码中有依赖到两个 java library，butterknife-annotations 和 butterknife-compiler 。<br>其中 butterknife-annotations 是用来自定义 Annotation 。而 butterknife-compiler 则是对定义好的 annotations 进行对应处理。<br>首先 butterknife-compiler 是依赖了 <code>&#39;com.google.auto.service:auto-service:1.0-rc3&#39;</code> 和 <code>&#39;com.squareup:javapoet:1.9.0&#39;</code><br>auto-service 的作用是在编译时，会去扫描到我们自定义的 Annotation 注解，每扫描到一个，就会在 <code>AbstractProcessor#process()</code> 方法中回调处理。<br>在 ButterKnife 中，ButterKnifeProcessor 是继承自 AbstractProcessor 的类。我们主要来看看下面两个方法：<br><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div><div class=\"line\">14</div><div class=\"line\">15</div><div class=\"line\">16</div><div class=\"line\">17</div><div class=\"line\">18</div><div class=\"line\">19</div><div class=\"line\">20</div><div class=\"line\">21</div><div class=\"line\">22</div><div class=\"line\">23</div><div class=\"line\">24</div><div class=\"line\">25</div><div class=\"line\">26</div><div class=\"line\">27</div><div class=\"line\">28</div></pre></td><td class=\"code\"><pre><div class=\"line\">@Override public Set&lt;String&gt; getSupportedAnnotationTypes() &#123;</div><div class=\"line\">  Set&lt;String&gt; types = new LinkedHashSet&lt;&gt;();</div><div class=\"line\">  for (Class&lt;? extends Annotation&gt; annotation : getSupportedAnnotations()) &#123;</div><div class=\"line\">    types.add(annotation.getCanonicalName());</div><div class=\"line\">  &#125;</div><div class=\"line\">  return types;</div><div class=\"line\">&#125;</div><div class=\"line\"></div><div class=\"line\">private Set&lt;Class&lt;? extends Annotation&gt;&gt; getSupportedAnnotations() &#123;</div><div class=\"line\">  Set&lt;Class&lt;? extends Annotation&gt;&gt; annotations = new LinkedHashSet&lt;&gt;();</div><div class=\"line\"></div><div class=\"line\">  annotations.add(BindAnim.class);</div><div class=\"line\">  annotations.add(BindArray.class);</div><div class=\"line\">  annotations.add(BindBitmap.class);</div><div class=\"line\">  annotations.add(BindBool.class);</div><div class=\"line\">  annotations.add(BindColor.class);</div><div class=\"line\">  annotations.add(BindDimen.class);</div><div class=\"line\">  annotations.add(BindDrawable.class);</div><div class=\"line\">  annotations.add(BindFloat.class);</div><div class=\"line\">  annotations.add(BindFont.class);</div><div class=\"line\">  annotations.add(BindInt.class);</div><div class=\"line\">  annotations.add(BindString.class);</div><div class=\"line\">  annotations.add(BindView.class);</div><div class=\"line\">  annotations.add(BindViews.class);</div><div class=\"line\">  annotations.addAll(LISTENERS);</div><div class=\"line\"></div><div class=\"line\">  return annotations;</div><div class=\"line\">&#125;</div></pre></td></tr></table></figure></p>\n<p><code>getSupportedAnnotationTypes()</code> 方法就是用来确定我们这个处理类需要处理的 Annotation 的种类。返回的就是我们在butterknife-annotations 里定义好的所有 Annotation。<br><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div><div class=\"line\">14</div><div class=\"line\">15</div><div class=\"line\">16</div><div class=\"line\">17</div></pre></td><td class=\"code\"><pre><div class=\"line\">@Override public boolean process(Set&lt;? extends TypeElement&gt; elements, RoundEnvironment env) &#123;</div><div class=\"line\">    Map&lt;TypeElement, BindingSet&gt; bindingMap = findAndParseTargets(env);</div><div class=\"line\"></div><div class=\"line\">    for (Map.Entry&lt;TypeElement, BindingSet&gt; entry : bindingMap.entrySet()) &#123;</div><div class=\"line\">      TypeElement typeElement = entry.getKey();</div><div class=\"line\">      BindingSet binding = entry.getValue();</div><div class=\"line\"></div><div class=\"line\">      JavaFile javaFile = binding.brewJava(sdk, debuggable);</div><div class=\"line\">      try &#123;</div><div class=\"line\">        javaFile.writeTo(filer);</div><div class=\"line\">      &#125; catch (IOException e) &#123;</div><div class=\"line\">        error(typeElement, &quot;Unable to write binding for type %s: %s&quot;, typeElement, e.getMessage());</div><div class=\"line\">      &#125;</div><div class=\"line\">    &#125;</div><div class=\"line\"></div><div class=\"line\">    return false;</div><div class=\"line\">  &#125;</div></pre></td></tr></table></figure></p>\n<p><code>process()</code> 方法就是来具体处理每个 Annotation 相对应的逻辑。 首先 <code>findAndParseTargets()</code> 方法返回的是一个Map，以 <code>env.getEnclosingElement()</code> 返回值为key，也就是我们使用了 ButterKnife 注解的类的名称，值是一个 BindingSet 对象，用于生成这个类的 ViewBinding。<br>再接着就是遍历这个Map，将通过 JavaFile 生成的 XXX_ViewBinding 写成 .java文件。<br>我们再来看看 BindingSet 里到底是怎么处理的<br><figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"function\">JavaFile <span class=\"title\">brewJava</span><span class=\"params\">(<span class=\"keyword\">int</span> sdk, <span class=\"keyword\">boolean</span> debuggable)</span> </span>&#123;</div><div class=\"line\">    <span class=\"keyword\">return</span> JavaFile.builder(bindingClassName.packageName(), createType(sdk, debuggable))</div><div class=\"line\">        .addFileComment(<span class=\"string\">\"Generated code from Butter Knife. Do not modify!\"</span>)</div><div class=\"line\">        .build();</div><div class=\"line\">  &#125;</div></pre></td></tr></table></figure></p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div><div class=\"line\">14</div><div class=\"line\">15</div><div class=\"line\">16</div><div class=\"line\">17</div><div class=\"line\">18</div><div class=\"line\">19</div><div class=\"line\">20</div><div class=\"line\">21</div><div class=\"line\">22</div><div class=\"line\">23</div><div class=\"line\">24</div><div class=\"line\">25</div><div class=\"line\">26</div><div class=\"line\">27</div><div class=\"line\">28</div><div class=\"line\">29</div><div class=\"line\">30</div><div class=\"line\">31</div><div class=\"line\">32</div><div class=\"line\">33</div><div class=\"line\">34</div><div class=\"line\">35</div><div class=\"line\">36</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"function\"><span class=\"keyword\">private</span> TypeSpec <span class=\"title\">createType</span><span class=\"params\">(<span class=\"keyword\">int</span> sdk, <span class=\"keyword\">boolean</span> debuggable)</span> </span>&#123;</div><div class=\"line\">    TypeSpec.Builder result = TypeSpec.classBuilder(bindingClassName.simpleName())</div><div class=\"line\">        .addModifiers(PUBLIC);</div><div class=\"line\">    <span class=\"keyword\">if</span> (isFinal) &#123;</div><div class=\"line\">      result.addModifiers(FINAL);</div><div class=\"line\">    &#125;</div><div class=\"line\"></div><div class=\"line\">    <span class=\"keyword\">if</span> (parentBinding != <span class=\"keyword\">null</span>) &#123;</div><div class=\"line\">      result.superclass(parentBinding.bindingClassName);</div><div class=\"line\">    &#125; <span class=\"keyword\">else</span> &#123;</div><div class=\"line\">      result.addSuperinterface(UNBINDER);</div><div class=\"line\">    &#125;</div><div class=\"line\"></div><div class=\"line\">    <span class=\"keyword\">if</span> (hasTargetField()) &#123;</div><div class=\"line\">      result.addField(targetTypeName, <span class=\"string\">\"target\"</span>, PRIVATE);</div><div class=\"line\">    &#125;</div><div class=\"line\"></div><div class=\"line\">    <span class=\"keyword\">if</span> (isView) &#123;</div><div class=\"line\">      result.addMethod(createBindingConstructorForView());</div><div class=\"line\">    &#125; <span class=\"keyword\">else</span> <span class=\"keyword\">if</span> (isActivity) &#123;</div><div class=\"line\">      result.addMethod(createBindingConstructorForActivity());</div><div class=\"line\">    &#125; <span class=\"keyword\">else</span> <span class=\"keyword\">if</span> (isDialog) &#123;</div><div class=\"line\">      result.addMethod(createBindingConstructorForDialog());</div><div class=\"line\">    &#125;</div><div class=\"line\">    <span class=\"keyword\">if</span> (!constructorNeedsView()) &#123;</div><div class=\"line\">      <span class=\"comment\">// Add a delegating constructor with a target type + view signature for reflective use.</span></div><div class=\"line\">      result.addMethod(createBindingViewDelegateConstructor());</div><div class=\"line\">    &#125;</div><div class=\"line\">    result.addMethod(createBindingConstructor(sdk, debuggable));</div><div class=\"line\"></div><div class=\"line\">    <span class=\"keyword\">if</span> (hasViewBindings() || parentBinding == <span class=\"keyword\">null</span>) &#123;</div><div class=\"line\">      result.addMethod(createBindingUnbindMethod(result));</div><div class=\"line\">    &#125;</div><div class=\"line\"></div><div class=\"line\">    <span class=\"keyword\">return</span> result.build();</div><div class=\"line\">  &#125;</div></pre></td></tr></table></figure>\n<p>可以看到，在 <code>brewJava()</code> 方法中，就是根据我们的注解来构建出对应的 java 类的逻辑。这部分是 <a href=\"https://github.com/square/javapoet\">JavaPoet</a>  的用法，感兴趣可以去了解。<br>于是，在我们每次编译完，就可以看到  XXX_ViewBinding 文件了，ButterKnife 源码分析到此结束。</p>"},{"title":"Git常用操作命令收集","date":"2020-05-22T16:00:00.000Z","_content":"\n### 远程仓库相关命令\n- 检出仓库：`$ git clone git://github.com/xxx/xxx.git`\n- 查看远程仓库：`$ git remote -v`\n- 添加远程仓库：`$ git remote add [name] [url]`\n- 删除远程仓库：`$ git remote rm [name]`\n- 修改远程仓库：`$ git remote set-url --push[name][newUrl]`\n- 拉取远程仓库：`$ git pull [remoteName] [localBranchName]`\n- 推送远程仓库：`$ git push [remoteName] [localBranchName]`\n\n<!--more-->\n\n### 分支(branch)操作相关命令\n- 查看本地分支：`$ git branch`\n- 查看远程分支：`$ git branch -r`\n- 创建本地分支：`$ git branch [name]` \n    \n> 注意新分支创建后不会自动切换为当前分支\n    \n- 切换分支：`$ git checkout [name]`\n\n- 创建新分支并立即切换到新分支：`$ git checkout -b [name]`\n- 删除分支：`$ git branch -d [name]` \n    \n> -d选项只能删除已经参与了合并的分支，对于未有合并的分支是无法删除的。如果想强制删除一个分支，可以使用-D选项\n    \n- 合并分支：`$ git merge [name]` \n    \n> 将名称为[name]的分支与当前分支合并\n    \n- 创建远程分支(本地分支push到远程)：`$ git push origin [name]`\n\n    > 我从master分支创建了一个issue5560分支，做了一些修改后，使用git push origin master提交，但是显示的结果却是'Everything up-to-date'，发生问题的原因是git push origin master 在没有track远程分支的本地分支中默认提交的master分支，因为master分支默认指向了origin master 分支，这里要使用git push origin issue5560：master 就可以把issue5560推送到远程的master分支了。\n\n    如果想把本地的某个分支test提交到远程仓库，并作为远程仓库的master分支，或者作为另外一个名叫test的分支，那么可以这么做。\n\n    ```\n    $ git push origin test:master         // 提交本地test分支作为远程的master分支 \n    $ git push origin test:test              // 提交本地test分支作为远程的test分支\n    ```\n- 删除远程分支：`$ git push origin :heads/[name]`\n    > 如果想删除远程的分支呢？类似于上面，如果:左边的分支为空，那么将删除:右边的远程的分支。\n    \n    ```\n    $ git push origin :test              // 刚提交到远程的test将被删除，但是本地还会保存的，不用担心\n    ```\n\n### 版本(tag)操作相关命令\n- 查看版本：`$ git tag`\n- 创建版本：`$ git tag [name]`\n- 删除版本：`$ git tag -d [name]`\n- 查看远程版本：`$ git tag -r`\n- 创建远程版本(本地版本push到远程)：`$ git push origin [name]`\n- 删除远程版本：`$ git push origin :refs/tags/[name]`\n\n### 子模块(submodule)相关操作命令\n- 添加子模块：```$ git submodule add [url] [path]```\n\n- 初始化子模块：`$ git submodule init` ----只在首次检出仓库时运行一次就行\n\n- 更新子模块：`$ git submodule update` ----每次更新或切换分支后都需要运行一下\n\n- 删除子模块：（分4步走）\n    1. ```$ git rm --cached [path]```\n    2. 编辑`.gitmodules`文件，将子模块的相关配置节点删除掉\n    3. 编辑`.git/config`文件，将子模块的相关配置节点删除掉\n    4. 手动删除子模块残留的目录\n    5. 忽略一些文件、文件夹不提交\n在仓库根目录下创建名称为`.gitignore`的文件，写入不需要的文件夹名或文件，每个元素占一行即可，如\n    ```xml\n    target\n    bin\n    *.db\n    ```","source":"_posts/Git常用操作命令收集.md","raw":"---\ntitle: Git常用操作命令收集\ndate: 2020-05-23\ntags: git技巧\ncategories: git\n\n---\n\n### 远程仓库相关命令\n- 检出仓库：`$ git clone git://github.com/xxx/xxx.git`\n- 查看远程仓库：`$ git remote -v`\n- 添加远程仓库：`$ git remote add [name] [url]`\n- 删除远程仓库：`$ git remote rm [name]`\n- 修改远程仓库：`$ git remote set-url --push[name][newUrl]`\n- 拉取远程仓库：`$ git pull [remoteName] [localBranchName]`\n- 推送远程仓库：`$ git push [remoteName] [localBranchName]`\n\n<!--more-->\n\n### 分支(branch)操作相关命令\n- 查看本地分支：`$ git branch`\n- 查看远程分支：`$ git branch -r`\n- 创建本地分支：`$ git branch [name]` \n    \n> 注意新分支创建后不会自动切换为当前分支\n    \n- 切换分支：`$ git checkout [name]`\n\n- 创建新分支并立即切换到新分支：`$ git checkout -b [name]`\n- 删除分支：`$ git branch -d [name]` \n    \n> -d选项只能删除已经参与了合并的分支，对于未有合并的分支是无法删除的。如果想强制删除一个分支，可以使用-D选项\n    \n- 合并分支：`$ git merge [name]` \n    \n> 将名称为[name]的分支与当前分支合并\n    \n- 创建远程分支(本地分支push到远程)：`$ git push origin [name]`\n\n    > 我从master分支创建了一个issue5560分支，做了一些修改后，使用git push origin master提交，但是显示的结果却是'Everything up-to-date'，发生问题的原因是git push origin master 在没有track远程分支的本地分支中默认提交的master分支，因为master分支默认指向了origin master 分支，这里要使用git push origin issue5560：master 就可以把issue5560推送到远程的master分支了。\n\n    如果想把本地的某个分支test提交到远程仓库，并作为远程仓库的master分支，或者作为另外一个名叫test的分支，那么可以这么做。\n\n    ```\n    $ git push origin test:master         // 提交本地test分支作为远程的master分支 \n    $ git push origin test:test              // 提交本地test分支作为远程的test分支\n    ```\n- 删除远程分支：`$ git push origin :heads/[name]`\n    > 如果想删除远程的分支呢？类似于上面，如果:左边的分支为空，那么将删除:右边的远程的分支。\n    \n    ```\n    $ git push origin :test              // 刚提交到远程的test将被删除，但是本地还会保存的，不用担心\n    ```\n\n### 版本(tag)操作相关命令\n- 查看版本：`$ git tag`\n- 创建版本：`$ git tag [name]`\n- 删除版本：`$ git tag -d [name]`\n- 查看远程版本：`$ git tag -r`\n- 创建远程版本(本地版本push到远程)：`$ git push origin [name]`\n- 删除远程版本：`$ git push origin :refs/tags/[name]`\n\n### 子模块(submodule)相关操作命令\n- 添加子模块：```$ git submodule add [url] [path]```\n\n- 初始化子模块：`$ git submodule init` ----只在首次检出仓库时运行一次就行\n\n- 更新子模块：`$ git submodule update` ----每次更新或切换分支后都需要运行一下\n\n- 删除子模块：（分4步走）\n    1. ```$ git rm --cached [path]```\n    2. 编辑`.gitmodules`文件，将子模块的相关配置节点删除掉\n    3. 编辑`.git/config`文件，将子模块的相关配置节点删除掉\n    4. 手动删除子模块残留的目录\n    5. 忽略一些文件、文件夹不提交\n在仓库根目录下创建名称为`.gitignore`的文件，写入不需要的文件夹名或文件，每个元素占一行即可，如\n    ```xml\n    target\n    bin\n    *.db\n    ```","slug":"Git常用操作命令收集","published":1,"updated":"2021-01-23T15:44:55.449Z","comments":1,"layout":"post","photos":[],"link":"","_id":"ckk9w1mf80002fw0iv59a5tk6","content":"<h3 id=\"远程仓库相关命令\"><a href=\"#远程仓库相关命令\" class=\"headerlink\" title=\"远程仓库相关命令\"></a>远程仓库相关命令</h3><ul>\n<li>检出仓库：<code>$ git clone git://github.com/xxx/xxx.git</code></li>\n<li>查看远程仓库：<code>$ git remote -v</code></li>\n<li>添加远程仓库：<code>$ git remote add [name] [url]</code></li>\n<li>删除远程仓库：<code>$ git remote rm [name]</code></li>\n<li>修改远程仓库：<code>$ git remote set-url --push[name][newUrl]</code></li>\n<li>拉取远程仓库：<code>$ git pull [remoteName] [localBranchName]</code></li>\n<li>推送远程仓库：<code>$ git push [remoteName] [localBranchName]</code></li>\n</ul>\n<a id=\"more\"></a>\n<h3 id=\"分支-branch-操作相关命令\"><a href=\"#分支-branch-操作相关命令\" class=\"headerlink\" title=\"分支(branch)操作相关命令\"></a>分支(branch)操作相关命令</h3><ul>\n<li>查看本地分支：<code>$ git branch</code></li>\n<li>查看远程分支：<code>$ git branch -r</code></li>\n<li>创建本地分支：<code>$ git branch [name]</code> </li>\n</ul>\n<blockquote>\n<p>注意新分支创建后不会自动切换为当前分支</p>\n</blockquote>\n<ul>\n<li><p>切换分支：<code>$ git checkout [name]</code></p>\n</li>\n<li><p>创建新分支并立即切换到新分支：<code>$ git checkout -b [name]</code></p>\n</li>\n<li>删除分支：<code>$ git branch -d [name]</code> </li>\n</ul>\n<blockquote>\n<p>-d选项只能删除已经参与了合并的分支，对于未有合并的分支是无法删除的。如果想强制删除一个分支，可以使用-D选项</p>\n</blockquote>\n<ul>\n<li>合并分支：<code>$ git merge [name]</code> </li>\n</ul>\n<blockquote>\n<p>将名称为[name]的分支与当前分支合并</p>\n</blockquote>\n<ul>\n<li><p>创建远程分支(本地分支push到远程)：<code>$ git push origin [name]</code></p>\n<blockquote>\n<p>我从master分支创建了一个issue5560分支，做了一些修改后，使用git push origin master提交，但是显示的结果却是’Everything up-to-date’，发生问题的原因是git push origin master 在没有track远程分支的本地分支中默认提交的master分支，因为master分支默认指向了origin master 分支，这里要使用git push origin issue5560：master 就可以把issue5560推送到远程的master分支了。</p>\n</blockquote>\n<p>  如果想把本地的某个分支test提交到远程仓库，并作为远程仓库的master分支，或者作为另外一个名叫test的分支，那么可以这么做。</p>\n  <figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div></pre></td><td class=\"code\"><pre><div class=\"line\">$ git push origin test:master         // 提交本地test分支作为远程的master分支 </div><div class=\"line\">$ git push origin test:test              // 提交本地test分支作为远程的test分支</div></pre></td></tr></table></figure>\n</li>\n<li><p>删除远程分支：<code>$ git push origin :heads/[name]</code></p>\n<blockquote>\n<p>如果想删除远程的分支呢？类似于上面，如果:左边的分支为空，那么将删除:右边的远程的分支。</p>\n</blockquote>\n  <figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div></pre></td><td class=\"code\"><pre><div class=\"line\">$ git push origin :test              // 刚提交到远程的test将被删除，但是本地还会保存的，不用担心</div></pre></td></tr></table></figure>\n</li>\n</ul>\n<h3 id=\"版本-tag-操作相关命令\"><a href=\"#版本-tag-操作相关命令\" class=\"headerlink\" title=\"版本(tag)操作相关命令\"></a>版本(tag)操作相关命令</h3><ul>\n<li>查看版本：<code>$ git tag</code></li>\n<li>创建版本：<code>$ git tag [name]</code></li>\n<li>删除版本：<code>$ git tag -d [name]</code></li>\n<li>查看远程版本：<code>$ git tag -r</code></li>\n<li>创建远程版本(本地版本push到远程)：<code>$ git push origin [name]</code></li>\n<li>删除远程版本：<code>$ git push origin :refs/tags/[name]</code></li>\n</ul>\n<h3 id=\"子模块-submodule-相关操作命令\"><a href=\"#子模块-submodule-相关操作命令\" class=\"headerlink\" title=\"子模块(submodule)相关操作命令\"></a>子模块(submodule)相关操作命令</h3><ul>\n<li><p>添加子模块：<figure class=\"highlight plain\"><figcaption><span>git submodule add [url] [path]```</span></figcaption><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div></pre></td><td class=\"code\"><pre><div class=\"line\"></div><div class=\"line\">- 初始化子模块：`$ git submodule init` ----只在首次检出仓库时运行一次就行</div><div class=\"line\"></div><div class=\"line\">- 更新子模块：`$ git submodule update` ----每次更新或切换分支后都需要运行一下</div><div class=\"line\"></div><div class=\"line\">- 删除子模块：（分4步走）</div><div class=\"line\">    1. ```$ git rm --cached [path]</div></pre></td></tr></table></figure></p>\n<ol>\n<li>编辑<code>.gitmodules</code>文件，将子模块的相关配置节点删除掉</li>\n<li>编辑<code>.git/config</code>文件，将子模块的相关配置节点删除掉</li>\n<li>手动删除子模块残留的目录</li>\n<li>忽略一些文件、文件夹不提交<br>在仓库根目录下创建名称为<code>.gitignore</code>的文件，写入不需要的文件夹名或文件，每个元素占一行即可，如<figure class=\"highlight xml\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div></pre></td><td class=\"code\"><pre><div class=\"line\">target</div><div class=\"line\">bin</div><div class=\"line\">*.db</div></pre></td></tr></table></figure></li>\n</ol>\n</li>\n</ul>\n","excerpt":"<h3 id=\"远程仓库相关命令\"><a href=\"#远程仓库相关命令\" class=\"headerlink\" title=\"远程仓库相关命令\"></a>远程仓库相关命令</h3><ul>\n<li>检出仓库：<code>$ git clone git://github.com/xxx/xxx.git</code></li>\n<li>查看远程仓库：<code>$ git remote -v</code></li>\n<li>添加远程仓库：<code>$ git remote add [name] [url]</code></li>\n<li>删除远程仓库：<code>$ git remote rm [name]</code></li>\n<li>修改远程仓库：<code>$ git remote set-url --push[name][newUrl]</code></li>\n<li>拉取远程仓库：<code>$ git pull [remoteName] [localBranchName]</code></li>\n<li>推送远程仓库：<code>$ git push [remoteName] [localBranchName]</code></li>\n</ul>","more":"<h3 id=\"分支-branch-操作相关命令\"><a href=\"#分支-branch-操作相关命令\" class=\"headerlink\" title=\"分支(branch)操作相关命令\"></a>分支(branch)操作相关命令</h3><ul>\n<li>查看本地分支：<code>$ git branch</code></li>\n<li>查看远程分支：<code>$ git branch -r</code></li>\n<li>创建本地分支：<code>$ git branch [name]</code> </li>\n</ul>\n<blockquote>\n<p>注意新分支创建后不会自动切换为当前分支</p>\n</blockquote>\n<ul>\n<li><p>切换分支：<code>$ git checkout [name]</code></p>\n</li>\n<li><p>创建新分支并立即切换到新分支：<code>$ git checkout -b [name]</code></p>\n</li>\n<li>删除分支：<code>$ git branch -d [name]</code> </li>\n</ul>\n<blockquote>\n<p>-d选项只能删除已经参与了合并的分支，对于未有合并的分支是无法删除的。如果想强制删除一个分支，可以使用-D选项</p>\n</blockquote>\n<ul>\n<li>合并分支：<code>$ git merge [name]</code> </li>\n</ul>\n<blockquote>\n<p>将名称为[name]的分支与当前分支合并</p>\n</blockquote>\n<ul>\n<li><p>创建远程分支(本地分支push到远程)：<code>$ git push origin [name]</code></p>\n<blockquote>\n<p>我从master分支创建了一个issue5560分支，做了一些修改后，使用git push origin master提交，但是显示的结果却是’Everything up-to-date’，发生问题的原因是git push origin master 在没有track远程分支的本地分支中默认提交的master分支，因为master分支默认指向了origin master 分支，这里要使用git push origin issue5560：master 就可以把issue5560推送到远程的master分支了。</p>\n</blockquote>\n<p>  如果想把本地的某个分支test提交到远程仓库，并作为远程仓库的master分支，或者作为另外一个名叫test的分支，那么可以这么做。</p>\n  <figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div></pre></td><td class=\"code\"><pre><div class=\"line\">$ git push origin test:master         // 提交本地test分支作为远程的master分支 </div><div class=\"line\">$ git push origin test:test              // 提交本地test分支作为远程的test分支</div></pre></td></tr></table></figure>\n</li>\n<li><p>删除远程分支：<code>$ git push origin :heads/[name]</code></p>\n<blockquote>\n<p>如果想删除远程的分支呢？类似于上面，如果:左边的分支为空，那么将删除:右边的远程的分支。</p>\n</blockquote>\n  <figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div></pre></td><td class=\"code\"><pre><div class=\"line\">$ git push origin :test              // 刚提交到远程的test将被删除，但是本地还会保存的，不用担心</div></pre></td></tr></table></figure>\n</li>\n</ul>\n<h3 id=\"版本-tag-操作相关命令\"><a href=\"#版本-tag-操作相关命令\" class=\"headerlink\" title=\"版本(tag)操作相关命令\"></a>版本(tag)操作相关命令</h3><ul>\n<li>查看版本：<code>$ git tag</code></li>\n<li>创建版本：<code>$ git tag [name]</code></li>\n<li>删除版本：<code>$ git tag -d [name]</code></li>\n<li>查看远程版本：<code>$ git tag -r</code></li>\n<li>创建远程版本(本地版本push到远程)：<code>$ git push origin [name]</code></li>\n<li>删除远程版本：<code>$ git push origin :refs/tags/[name]</code></li>\n</ul>\n<h3 id=\"子模块-submodule-相关操作命令\"><a href=\"#子模块-submodule-相关操作命令\" class=\"headerlink\" title=\"子模块(submodule)相关操作命令\"></a>子模块(submodule)相关操作命令</h3><ul>\n<li><p>添加子模块：<figure class=\"highlight plain\"><figcaption><span>git submodule add [url] [path]```</span></figcaption><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div></pre></td><td class=\"code\"><pre><div class=\"line\"></div><div class=\"line\">- 初始化子模块：`$ git submodule init` ----只在首次检出仓库时运行一次就行</div><div class=\"line\"></div><div class=\"line\">- 更新子模块：`$ git submodule update` ----每次更新或切换分支后都需要运行一下</div><div class=\"line\"></div><div class=\"line\">- 删除子模块：（分4步走）</div><div class=\"line\">    1. ```$ git rm --cached [path]</div></pre></td></tr></table></figure></p>\n<ol>\n<li>编辑<code>.gitmodules</code>文件，将子模块的相关配置节点删除掉</li>\n<li>编辑<code>.git/config</code>文件，将子模块的相关配置节点删除掉</li>\n<li>手动删除子模块残留的目录</li>\n<li>忽略一些文件、文件夹不提交<br>在仓库根目录下创建名称为<code>.gitignore</code>的文件，写入不需要的文件夹名或文件，每个元素占一行即可，如<figure class=\"highlight xml\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div></pre></td><td class=\"code\"><pre><div class=\"line\">target</div><div class=\"line\">bin</div><div class=\"line\">*.db</div></pre></td></tr></table></figure></li>\n</ol>\n</li>\n</ul>"},{"title":"Handler消息机制源码分析","date":"2017-09-23T07:01:17.000Z","_content":"\nHandler 消息机制是我们安卓中最常见的一种线程间通讯，通过使用 Handler 消息机制，我们可以实现在子线程中处理耗时操作，在主线程中更新UI。那么为什么能实现这种操作，我们来看一下 Handler 的源码，来深入了解一下 Handler 消息机制的原理。\n\n### 消息的发送与排序\n首先，我们先从` mHandler.sendMessage(message)` 这里看进去。\n```java\npublic final boolean sendMessage(Message msg)\n    {\n        return sendMessageDelayed(msg, 0);\n    }\n```\n<!--more-->\n```java\npublic final boolean sendMessageDelayed(Message msg, long delayMillis)\n    {\n        if (delayMillis < 0) {\n            delayMillis = 0;\n        }\n        return sendMessageAtTime(msg, SystemClock.uptimeMillis() + delayMillis);\n    }\n```\n```java\npublic boolean sendMessageAtTime(Message msg, long uptimeMillis) {\n        MessageQueue queue = mQueue;\n        if (queue == null) {\n            RuntimeException e = new RuntimeException(\n                    this + \" sendMessageAtTime() called with no mQueue\");\n            Log.w(\"Looper\", e.getMessage(), e);\n            return false;\n        }\n        return enqueueMessage(queue, msg, uptimeMillis);\n    }\n```\n依次调用这三个方法，这些方法是处理发送实时消息和延迟消息的区别，拿到每个消息被传递时的具体时间戳。这样就能按照严格的顺序来发送对应的消息。\n```java\nprivate boolean enqueueMessage(MessageQueue queue, Message msg, long uptimeMillis) {\n        msg.target = this;\n        if (mAsynchronous) {\n            msg.setAsynchronous(true);\n        }\n        return queue.enqueueMessage(msg, uptimeMillis);\n    }\n```\n这里，MessageQueue 就是一个队列，用于承载 Message 。这里的 ` queue.enqueueMessage(msg, uptimeMillis)` 就是将消息按照时间顺序依次排好队，等待被取用。\n```java\nboolean enqueueMessage(Message msg, long when) {\n        if (msg.target == null) {\n            throw new IllegalArgumentException(\"Message must have a target.\");\n        }\n        if (msg.isInUse()) {\n            throw new IllegalStateException(msg + \" This message is already in use.\");\n        }\n\n        synchronized (this) {\n            if (mQuitting) {\n                IllegalStateException e = new IllegalStateException(\n                        msg.target + \" sending message to a Handler on a dead thread\");\n                Log.w(TAG, e.getMessage(), e);\n                msg.recycle();\n                return false;\n            }\n\n            msg.markInUse();\n            msg.when = when;\n            Message p = mMessages;\n            boolean needWake;\n            if (p == null || when == 0 || when < p.when) {\n                // New head, wake up the event queue if blocked.\n                msg.next = p;\n                mMessages = msg;\n                needWake = mBlocked;\n            } else {\n                // Inserted within the middle of the queue.  Usually we don't have to wake\n                // up the event queue unless there is a barrier at the head of the queue\n                // and the message is the earliest asynchronous message in the queue.\n                needWake = mBlocked && p.target == null && msg.isAsynchronous();\n                Message prev;\n                for (;;) {\n                    prev = p;\n                    p = p.next;\n                    if (p == null || when < p.when) {\n                        break;\n                    }\n                    if (needWake && p.isAsynchronous()) {\n                        needWake = false;\n                    }\n                }\n                msg.next = p; // invariant: p == prev.next\n                prev.next = msg;\n            }\n\n            // We can assume mPtr != 0 because mQuitting is false.\n            if (needWake) {\n                nativeWake(mPtr);\n            }\n        }\n        return true;\n    }\n```\n在这里，我们可以知道 Message 的底层结构是一个链表的形式，至于为什么要使用链表这种数据结构，那是由于我们的消息需要频繁的插入取出。通过 ` enqueueMessage(Message msg, long when) `这个方法处理后，我们的 MessageQueue 就是一个有序的队列了。\n\n### Looper 处理消息队列\n```java\npublic Handler(Callback callback, boolean async) {\n        if (FIND_POTENTIAL_LEAKS) {\n            final Class<? extends Handler> klass = getClass();\n            if ((klass.isAnonymousClass() || klass.isMemberClass() || klass.isLocalClass()) &&\n                    (klass.getModifiers() & Modifier.STATIC) == 0) {\n                Log.w(TAG, \"The following Handler class should be static or leaks might occur: \" +\n                    klass.getCanonicalName());\n            }\n        }\n\n        mLooper = Looper.myLooper();\n        if (mLooper == null) {\n            throw new RuntimeException(\n                \"Can't create handler inside thread that has not called Looper.prepare()\");\n        }\n        mQueue = mLooper.mQueue;\n        mCallback = callback;\n        mAsynchronous = async;\n    }\n```\n从 Handler 的构造方法中，可以看出初始化 mLooper 和 mQueue 的操作，纵观 Looper 类，我们可以发现，Looper 维护着一个存放 Looper 对象的 ThreadLocal。ThreadLocal 是一个线程存储区域，确保着每个线程有自己的存储区域，跨线程是不能访问的。这样，就确保了每个线程有本线程的 Looper。这样，在 Looper 没有初始化之前，Handler是不能创建出来的，否则会出现下面的错误 `java.lang.RuntimeException: Can't create handler inside thread that has not called Looper.prepare()`。对于主线程，app在启动的时候，在 ActivityThread 的 `main` 方法中就有这主线程的 Looper 初始化的操作。再接着就是 `Looper.loop()` 方法的执行。\n```java\npublic static void loop() {\n        final Looper me = myLooper();\n        if (me == null) {\n            throw new RuntimeException(\"No Looper; Looper.prepare() wasn't called on this thread.\");\n        }\n        final MessageQueue queue = me.mQueue;\n\n        // Make sure the identity of this thread is that of the local process,\n        // and keep track of what that identity token actually is.\n        Binder.clearCallingIdentity();\n        final long ident = Binder.clearCallingIdentity();\n\n        for (;;) {\n            Message msg = queue.next(); // might block\n            if (msg == null) {\n                // No message indicates that the message queue is quitting.\n                return;\n            }\n\n            // This must be in a local variable, in case a UI event sets the logger\n            final Printer logging = me.mLogging;\n            if (logging != null) {\n                logging.println(\">>>>> Dispatching to \" + msg.target + \" \" +\n                        msg.callback + \": \" + msg.what);\n            }\n\n            final long traceTag = me.mTraceTag;\n            if (traceTag != 0 && Trace.isTagEnabled(traceTag)) {\n                Trace.traceBegin(traceTag, msg.target.getTraceName(msg));\n            }\n            try {\n                msg.target.dispatchMessage(msg);\n            } finally {\n                if (traceTag != 0) {\n                    Trace.traceEnd(traceTag);\n                }\n            }\n\n            if (logging != null) {\n                logging.println(\"<<<<< Finished to \" + msg.target + \" \" + msg.callback);\n            }\n\n            // Make sure that during the course of dispatching the\n            // identity of the thread wasn't corrupted.\n            final long newIdent = Binder.clearCallingIdentity();\n            if (ident != newIdent) {\n                Log.wtf(TAG, \"Thread identity changed from 0x\"\n                        + Long.toHexString(ident) + \" to 0x\"\n                        + Long.toHexString(newIdent) + \" while dispatching to \"\n                        + msg.target.getClass().getName() + \" \"\n                        + msg.callback + \" what=\" + msg.what);\n            }\n\n            msg.recycleUnchecked();\n        }\n```\n主要代码就是开启了一个死循环，去调用 `queue.next()` 从消息队列里取消息，如果消息队列里存在未处理的消息，那么就拿出来，交给这个 Message 所对应的 Handler 的 `handleMessage(Message msg)`。这个就是我们自己的 Handler 中重写的方法。我们在这里就可以根据对应的消息来进行对应的UI处理了。\n\n### Message 中的消息池\n在使用过程中，我们获取 Message 对象的方法一般都是使用 `Message.obtain()`\n```java\nprivate static final int MAX_POOL_SIZE = 50;\n\npublic static Message obtain() {\n        synchronized (sPoolSync) {\n            if (sPool != null) {\n                Message m = sPool;\n                sPool = m.next;\n                m.next = null;\n                m.flags = 0; // clear in-use flag\n                sPoolSize--;\n                return m;\n            }\n        }\n        return new Message();\n    }\n\nvoid recycleUnchecked() {\n        // Mark the message as in use while it remains in the recycled object pool.\n        // Clear out all other details.\n        flags = FLAG_IN_USE;\n        what = 0;\n        arg1 = 0;\n        arg2 = 0;\n        obj = null;\n        replyTo = null;\n        sendingUid = -1;\n        when = 0;\n        target = null;\n        callback = null;\n        data = null;\n\n        synchronized (sPoolSync) {\n            if (sPoolSize < MAX_POOL_SIZE) {\n                next = sPool;\n                sPool = this;\n                sPoolSize++;\n            }\n        }\n\n```\n从中我们可以看到 `obtain` 是从一个大小为50的消息池中去取消息对象。在使用完后，回收消息，重新放入消息池。\n","source":"_posts/Handler消息机制源码分析.md","raw":"---\ntitle: Handler消息机制源码分析\ndate: 2017-9-23 15:01:17\ntags: Android\ncategories: Android\n---\n\nHandler 消息机制是我们安卓中最常见的一种线程间通讯，通过使用 Handler 消息机制，我们可以实现在子线程中处理耗时操作，在主线程中更新UI。那么为什么能实现这种操作，我们来看一下 Handler 的源码，来深入了解一下 Handler 消息机制的原理。\n\n### 消息的发送与排序\n首先，我们先从` mHandler.sendMessage(message)` 这里看进去。\n```java\npublic final boolean sendMessage(Message msg)\n    {\n        return sendMessageDelayed(msg, 0);\n    }\n```\n<!--more-->\n```java\npublic final boolean sendMessageDelayed(Message msg, long delayMillis)\n    {\n        if (delayMillis < 0) {\n            delayMillis = 0;\n        }\n        return sendMessageAtTime(msg, SystemClock.uptimeMillis() + delayMillis);\n    }\n```\n```java\npublic boolean sendMessageAtTime(Message msg, long uptimeMillis) {\n        MessageQueue queue = mQueue;\n        if (queue == null) {\n            RuntimeException e = new RuntimeException(\n                    this + \" sendMessageAtTime() called with no mQueue\");\n            Log.w(\"Looper\", e.getMessage(), e);\n            return false;\n        }\n        return enqueueMessage(queue, msg, uptimeMillis);\n    }\n```\n依次调用这三个方法，这些方法是处理发送实时消息和延迟消息的区别，拿到每个消息被传递时的具体时间戳。这样就能按照严格的顺序来发送对应的消息。\n```java\nprivate boolean enqueueMessage(MessageQueue queue, Message msg, long uptimeMillis) {\n        msg.target = this;\n        if (mAsynchronous) {\n            msg.setAsynchronous(true);\n        }\n        return queue.enqueueMessage(msg, uptimeMillis);\n    }\n```\n这里，MessageQueue 就是一个队列，用于承载 Message 。这里的 ` queue.enqueueMessage(msg, uptimeMillis)` 就是将消息按照时间顺序依次排好队，等待被取用。\n```java\nboolean enqueueMessage(Message msg, long when) {\n        if (msg.target == null) {\n            throw new IllegalArgumentException(\"Message must have a target.\");\n        }\n        if (msg.isInUse()) {\n            throw new IllegalStateException(msg + \" This message is already in use.\");\n        }\n\n        synchronized (this) {\n            if (mQuitting) {\n                IllegalStateException e = new IllegalStateException(\n                        msg.target + \" sending message to a Handler on a dead thread\");\n                Log.w(TAG, e.getMessage(), e);\n                msg.recycle();\n                return false;\n            }\n\n            msg.markInUse();\n            msg.when = when;\n            Message p = mMessages;\n            boolean needWake;\n            if (p == null || when == 0 || when < p.when) {\n                // New head, wake up the event queue if blocked.\n                msg.next = p;\n                mMessages = msg;\n                needWake = mBlocked;\n            } else {\n                // Inserted within the middle of the queue.  Usually we don't have to wake\n                // up the event queue unless there is a barrier at the head of the queue\n                // and the message is the earliest asynchronous message in the queue.\n                needWake = mBlocked && p.target == null && msg.isAsynchronous();\n                Message prev;\n                for (;;) {\n                    prev = p;\n                    p = p.next;\n                    if (p == null || when < p.when) {\n                        break;\n                    }\n                    if (needWake && p.isAsynchronous()) {\n                        needWake = false;\n                    }\n                }\n                msg.next = p; // invariant: p == prev.next\n                prev.next = msg;\n            }\n\n            // We can assume mPtr != 0 because mQuitting is false.\n            if (needWake) {\n                nativeWake(mPtr);\n            }\n        }\n        return true;\n    }\n```\n在这里，我们可以知道 Message 的底层结构是一个链表的形式，至于为什么要使用链表这种数据结构，那是由于我们的消息需要频繁的插入取出。通过 ` enqueueMessage(Message msg, long when) `这个方法处理后，我们的 MessageQueue 就是一个有序的队列了。\n\n### Looper 处理消息队列\n```java\npublic Handler(Callback callback, boolean async) {\n        if (FIND_POTENTIAL_LEAKS) {\n            final Class<? extends Handler> klass = getClass();\n            if ((klass.isAnonymousClass() || klass.isMemberClass() || klass.isLocalClass()) &&\n                    (klass.getModifiers() & Modifier.STATIC) == 0) {\n                Log.w(TAG, \"The following Handler class should be static or leaks might occur: \" +\n                    klass.getCanonicalName());\n            }\n        }\n\n        mLooper = Looper.myLooper();\n        if (mLooper == null) {\n            throw new RuntimeException(\n                \"Can't create handler inside thread that has not called Looper.prepare()\");\n        }\n        mQueue = mLooper.mQueue;\n        mCallback = callback;\n        mAsynchronous = async;\n    }\n```\n从 Handler 的构造方法中，可以看出初始化 mLooper 和 mQueue 的操作，纵观 Looper 类，我们可以发现，Looper 维护着一个存放 Looper 对象的 ThreadLocal。ThreadLocal 是一个线程存储区域，确保着每个线程有自己的存储区域，跨线程是不能访问的。这样，就确保了每个线程有本线程的 Looper。这样，在 Looper 没有初始化之前，Handler是不能创建出来的，否则会出现下面的错误 `java.lang.RuntimeException: Can't create handler inside thread that has not called Looper.prepare()`。对于主线程，app在启动的时候，在 ActivityThread 的 `main` 方法中就有这主线程的 Looper 初始化的操作。再接着就是 `Looper.loop()` 方法的执行。\n```java\npublic static void loop() {\n        final Looper me = myLooper();\n        if (me == null) {\n            throw new RuntimeException(\"No Looper; Looper.prepare() wasn't called on this thread.\");\n        }\n        final MessageQueue queue = me.mQueue;\n\n        // Make sure the identity of this thread is that of the local process,\n        // and keep track of what that identity token actually is.\n        Binder.clearCallingIdentity();\n        final long ident = Binder.clearCallingIdentity();\n\n        for (;;) {\n            Message msg = queue.next(); // might block\n            if (msg == null) {\n                // No message indicates that the message queue is quitting.\n                return;\n            }\n\n            // This must be in a local variable, in case a UI event sets the logger\n            final Printer logging = me.mLogging;\n            if (logging != null) {\n                logging.println(\">>>>> Dispatching to \" + msg.target + \" \" +\n                        msg.callback + \": \" + msg.what);\n            }\n\n            final long traceTag = me.mTraceTag;\n            if (traceTag != 0 && Trace.isTagEnabled(traceTag)) {\n                Trace.traceBegin(traceTag, msg.target.getTraceName(msg));\n            }\n            try {\n                msg.target.dispatchMessage(msg);\n            } finally {\n                if (traceTag != 0) {\n                    Trace.traceEnd(traceTag);\n                }\n            }\n\n            if (logging != null) {\n                logging.println(\"<<<<< Finished to \" + msg.target + \" \" + msg.callback);\n            }\n\n            // Make sure that during the course of dispatching the\n            // identity of the thread wasn't corrupted.\n            final long newIdent = Binder.clearCallingIdentity();\n            if (ident != newIdent) {\n                Log.wtf(TAG, \"Thread identity changed from 0x\"\n                        + Long.toHexString(ident) + \" to 0x\"\n                        + Long.toHexString(newIdent) + \" while dispatching to \"\n                        + msg.target.getClass().getName() + \" \"\n                        + msg.callback + \" what=\" + msg.what);\n            }\n\n            msg.recycleUnchecked();\n        }\n```\n主要代码就是开启了一个死循环，去调用 `queue.next()` 从消息队列里取消息，如果消息队列里存在未处理的消息，那么就拿出来，交给这个 Message 所对应的 Handler 的 `handleMessage(Message msg)`。这个就是我们自己的 Handler 中重写的方法。我们在这里就可以根据对应的消息来进行对应的UI处理了。\n\n### Message 中的消息池\n在使用过程中，我们获取 Message 对象的方法一般都是使用 `Message.obtain()`\n```java\nprivate static final int MAX_POOL_SIZE = 50;\n\npublic static Message obtain() {\n        synchronized (sPoolSync) {\n            if (sPool != null) {\n                Message m = sPool;\n                sPool = m.next;\n                m.next = null;\n                m.flags = 0; // clear in-use flag\n                sPoolSize--;\n                return m;\n            }\n        }\n        return new Message();\n    }\n\nvoid recycleUnchecked() {\n        // Mark the message as in use while it remains in the recycled object pool.\n        // Clear out all other details.\n        flags = FLAG_IN_USE;\n        what = 0;\n        arg1 = 0;\n        arg2 = 0;\n        obj = null;\n        replyTo = null;\n        sendingUid = -1;\n        when = 0;\n        target = null;\n        callback = null;\n        data = null;\n\n        synchronized (sPoolSync) {\n            if (sPoolSize < MAX_POOL_SIZE) {\n                next = sPool;\n                sPool = this;\n                sPoolSize++;\n            }\n        }\n\n```\n从中我们可以看到 `obtain` 是从一个大小为50的消息池中去取消息对象。在使用完后，回收消息，重新放入消息池。\n","slug":"Handler消息机制源码分析","published":1,"updated":"2021-01-23T15:44:55.449Z","comments":1,"layout":"post","photos":[],"link":"","_id":"ckk9w1mfg0006fw0ib6y3wqrl","content":"<p>Handler 消息机制是我们安卓中最常见的一种线程间通讯，通过使用 Handler 消息机制，我们可以实现在子线程中处理耗时操作，在主线程中更新UI。那么为什么能实现这种操作，我们来看一下 Handler 的源码，来深入了解一下 Handler 消息机制的原理。</p>\n<h3 id=\"消息的发送与排序\"><a href=\"#消息的发送与排序\" class=\"headerlink\" title=\"消息的发送与排序\"></a>消息的发送与排序</h3><p>首先，我们先从<code>mHandler.sendMessage(message)</code> 这里看进去。<br><figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">final</span> <span class=\"keyword\">boolean</span> <span class=\"title\">sendMessage</span><span class=\"params\">(Message msg)</span></span></div><div class=\"line\">    &#123;</div><div class=\"line\">        <span class=\"keyword\">return</span> sendMessageDelayed(msg, <span class=\"number\">0</span>);</div><div class=\"line\">    &#125;</div></pre></td></tr></table></figure></p>\n<a id=\"more\"></a>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">final</span> <span class=\"keyword\">boolean</span> <span class=\"title\">sendMessageDelayed</span><span class=\"params\">(Message msg, <span class=\"keyword\">long</span> delayMillis)</span></span></div><div class=\"line\">    &#123;</div><div class=\"line\">        <span class=\"keyword\">if</span> (delayMillis &lt; <span class=\"number\">0</span>) &#123;</div><div class=\"line\">            delayMillis = <span class=\"number\">0</span>;</div><div class=\"line\">        &#125;</div><div class=\"line\">        <span class=\"keyword\">return</span> sendMessageAtTime(msg, SystemClock.uptimeMillis() + delayMillis);</div><div class=\"line\">    &#125;</div></pre></td></tr></table></figure>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">boolean</span> <span class=\"title\">sendMessageAtTime</span><span class=\"params\">(Message msg, <span class=\"keyword\">long</span> uptimeMillis)</span> </span>&#123;</div><div class=\"line\">        MessageQueue queue = mQueue;</div><div class=\"line\">        <span class=\"keyword\">if</span> (queue == <span class=\"keyword\">null</span>) &#123;</div><div class=\"line\">            RuntimeException e = <span class=\"keyword\">new</span> RuntimeException(</div><div class=\"line\">                    <span class=\"keyword\">this</span> + <span class=\"string\">\" sendMessageAtTime() called with no mQueue\"</span>);</div><div class=\"line\">            Log.w(<span class=\"string\">\"Looper\"</span>, e.getMessage(), e);</div><div class=\"line\">            <span class=\"keyword\">return</span> <span class=\"keyword\">false</span>;</div><div class=\"line\">        &#125;</div><div class=\"line\">        <span class=\"keyword\">return</span> enqueueMessage(queue, msg, uptimeMillis);</div><div class=\"line\">    &#125;</div></pre></td></tr></table></figure>\n<p>依次调用这三个方法，这些方法是处理发送实时消息和延迟消息的区别，拿到每个消息被传递时的具体时间戳。这样就能按照严格的顺序来发送对应的消息。<br><figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"function\"><span class=\"keyword\">private</span> <span class=\"keyword\">boolean</span> <span class=\"title\">enqueueMessage</span><span class=\"params\">(MessageQueue queue, Message msg, <span class=\"keyword\">long</span> uptimeMillis)</span> </span>&#123;</div><div class=\"line\">        msg.target = <span class=\"keyword\">this</span>;</div><div class=\"line\">        <span class=\"keyword\">if</span> (mAsynchronous) &#123;</div><div class=\"line\">            msg.setAsynchronous(<span class=\"keyword\">true</span>);</div><div class=\"line\">        &#125;</div><div class=\"line\">        <span class=\"keyword\">return</span> queue.enqueueMessage(msg, uptimeMillis);</div><div class=\"line\">    &#125;</div></pre></td></tr></table></figure></p>\n<p>这里，MessageQueue 就是一个队列，用于承载 Message 。这里的 <code>queue.enqueueMessage(msg, uptimeMillis)</code> 就是将消息按照时间顺序依次排好队，等待被取用。<br><figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div><div class=\"line\">14</div><div class=\"line\">15</div><div class=\"line\">16</div><div class=\"line\">17</div><div class=\"line\">18</div><div class=\"line\">19</div><div class=\"line\">20</div><div class=\"line\">21</div><div class=\"line\">22</div><div class=\"line\">23</div><div class=\"line\">24</div><div class=\"line\">25</div><div class=\"line\">26</div><div class=\"line\">27</div><div class=\"line\">28</div><div class=\"line\">29</div><div class=\"line\">30</div><div class=\"line\">31</div><div class=\"line\">32</div><div class=\"line\">33</div><div class=\"line\">34</div><div class=\"line\">35</div><div class=\"line\">36</div><div class=\"line\">37</div><div class=\"line\">38</div><div class=\"line\">39</div><div class=\"line\">40</div><div class=\"line\">41</div><div class=\"line\">42</div><div class=\"line\">43</div><div class=\"line\">44</div><div class=\"line\">45</div><div class=\"line\">46</div><div class=\"line\">47</div><div class=\"line\">48</div><div class=\"line\">49</div><div class=\"line\">50</div><div class=\"line\">51</div><div class=\"line\">52</div><div class=\"line\">53</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"function\"><span class=\"keyword\">boolean</span> <span class=\"title\">enqueueMessage</span><span class=\"params\">(Message msg, <span class=\"keyword\">long</span> when)</span> </span>&#123;</div><div class=\"line\">        <span class=\"keyword\">if</span> (msg.target == <span class=\"keyword\">null</span>) &#123;</div><div class=\"line\">            <span class=\"keyword\">throw</span> <span class=\"keyword\">new</span> IllegalArgumentException(<span class=\"string\">\"Message must have a target.\"</span>);</div><div class=\"line\">        &#125;</div><div class=\"line\">        <span class=\"keyword\">if</span> (msg.isInUse()) &#123;</div><div class=\"line\">            <span class=\"keyword\">throw</span> <span class=\"keyword\">new</span> IllegalStateException(msg + <span class=\"string\">\" This message is already in use.\"</span>);</div><div class=\"line\">        &#125;</div><div class=\"line\"></div><div class=\"line\">        <span class=\"keyword\">synchronized</span> (<span class=\"keyword\">this</span>) &#123;</div><div class=\"line\">            <span class=\"keyword\">if</span> (mQuitting) &#123;</div><div class=\"line\">                IllegalStateException e = <span class=\"keyword\">new</span> IllegalStateException(</div><div class=\"line\">                        msg.target + <span class=\"string\">\" sending message to a Handler on a dead thread\"</span>);</div><div class=\"line\">                Log.w(TAG, e.getMessage(), e);</div><div class=\"line\">                msg.recycle();</div><div class=\"line\">                <span class=\"keyword\">return</span> <span class=\"keyword\">false</span>;</div><div class=\"line\">            &#125;</div><div class=\"line\"></div><div class=\"line\">            msg.markInUse();</div><div class=\"line\">            msg.when = when;</div><div class=\"line\">            Message p = mMessages;</div><div class=\"line\">            <span class=\"keyword\">boolean</span> needWake;</div><div class=\"line\">            <span class=\"keyword\">if</span> (p == <span class=\"keyword\">null</span> || when == <span class=\"number\">0</span> || when &lt; p.when) &#123;</div><div class=\"line\">                <span class=\"comment\">// New head, wake up the event queue if blocked.</span></div><div class=\"line\">                msg.next = p;</div><div class=\"line\">                mMessages = msg;</div><div class=\"line\">                needWake = mBlocked;</div><div class=\"line\">            &#125; <span class=\"keyword\">else</span> &#123;</div><div class=\"line\">                <span class=\"comment\">// Inserted within the middle of the queue.  Usually we don't have to wake</span></div><div class=\"line\">                <span class=\"comment\">// up the event queue unless there is a barrier at the head of the queue</span></div><div class=\"line\">                <span class=\"comment\">// and the message is the earliest asynchronous message in the queue.</span></div><div class=\"line\">                needWake = mBlocked &amp;&amp; p.target == <span class=\"keyword\">null</span> &amp;&amp; msg.isAsynchronous();</div><div class=\"line\">                Message prev;</div><div class=\"line\">                <span class=\"keyword\">for</span> (;;) &#123;</div><div class=\"line\">                    prev = p;</div><div class=\"line\">                    p = p.next;</div><div class=\"line\">                    <span class=\"keyword\">if</span> (p == <span class=\"keyword\">null</span> || when &lt; p.when) &#123;</div><div class=\"line\">                        <span class=\"keyword\">break</span>;</div><div class=\"line\">                    &#125;</div><div class=\"line\">                    <span class=\"keyword\">if</span> (needWake &amp;&amp; p.isAsynchronous()) &#123;</div><div class=\"line\">                        needWake = <span class=\"keyword\">false</span>;</div><div class=\"line\">                    &#125;</div><div class=\"line\">                &#125;</div><div class=\"line\">                msg.next = p; <span class=\"comment\">// invariant: p == prev.next</span></div><div class=\"line\">                prev.next = msg;</div><div class=\"line\">            &#125;</div><div class=\"line\"></div><div class=\"line\">            <span class=\"comment\">// We can assume mPtr != 0 because mQuitting is false.</span></div><div class=\"line\">            <span class=\"keyword\">if</span> (needWake) &#123;</div><div class=\"line\">                nativeWake(mPtr);</div><div class=\"line\">            &#125;</div><div class=\"line\">        &#125;</div><div class=\"line\">        <span class=\"keyword\">return</span> <span class=\"keyword\">true</span>;</div><div class=\"line\">    &#125;</div></pre></td></tr></table></figure></p>\n<p>在这里，我们可以知道 Message 的底层结构是一个链表的形式，至于为什么要使用链表这种数据结构，那是由于我们的消息需要频繁的插入取出。通过 <code>enqueueMessage(Message msg, long when)</code>这个方法处理后，我们的 MessageQueue 就是一个有序的队列了。</p>\n<h3 id=\"Looper-处理消息队列\"><a href=\"#Looper-处理消息队列\" class=\"headerlink\" title=\"Looper 处理消息队列\"></a>Looper 处理消息队列</h3><figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div><div class=\"line\">14</div><div class=\"line\">15</div><div class=\"line\">16</div><div class=\"line\">17</div><div class=\"line\">18</div><div class=\"line\">19</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"function\"><span class=\"keyword\">public</span> <span class=\"title\">Handler</span><span class=\"params\">(Callback callback, <span class=\"keyword\">boolean</span> async)</span> </span>&#123;</div><div class=\"line\">        <span class=\"keyword\">if</span> (FIND_POTENTIAL_LEAKS) &#123;</div><div class=\"line\">            <span class=\"keyword\">final</span> Class&lt;? extends Handler&gt; klass = getClass();</div><div class=\"line\">            <span class=\"keyword\">if</span> ((klass.isAnonymousClass() || klass.isMemberClass() || klass.isLocalClass()) &amp;&amp;</div><div class=\"line\">                    (klass.getModifiers() &amp; Modifier.STATIC) == <span class=\"number\">0</span>) &#123;</div><div class=\"line\">                Log.w(TAG, <span class=\"string\">\"The following Handler class should be static or leaks might occur: \"</span> +</div><div class=\"line\">                    klass.getCanonicalName());</div><div class=\"line\">            &#125;</div><div class=\"line\">        &#125;</div><div class=\"line\"></div><div class=\"line\">        mLooper = Looper.myLooper();</div><div class=\"line\">        <span class=\"keyword\">if</span> (mLooper == <span class=\"keyword\">null</span>) &#123;</div><div class=\"line\">            <span class=\"keyword\">throw</span> <span class=\"keyword\">new</span> RuntimeException(</div><div class=\"line\">                <span class=\"string\">\"Can't create handler inside thread that has not called Looper.prepare()\"</span>);</div><div class=\"line\">        &#125;</div><div class=\"line\">        mQueue = mLooper.mQueue;</div><div class=\"line\">        mCallback = callback;</div><div class=\"line\">        mAsynchronous = async;</div><div class=\"line\">    &#125;</div></pre></td></tr></table></figure>\n<p>从 Handler 的构造方法中，可以看出初始化 mLooper 和 mQueue 的操作，纵观 Looper 类，我们可以发现，Looper 维护着一个存放 Looper 对象的 ThreadLocal。ThreadLocal 是一个线程存储区域，确保着每个线程有自己的存储区域，跨线程是不能访问的。这样，就确保了每个线程有本线程的 Looper。这样，在 Looper 没有初始化之前，Handler是不能创建出来的，否则会出现下面的错误 <code>java.lang.RuntimeException: Can&#39;t create handler inside thread that has not called Looper.prepare()</code>。对于主线程，app在启动的时候，在 ActivityThread 的 <code>main</code> 方法中就有这主线程的 Looper 初始化的操作。再接着就是 <code>Looper.loop()</code> 方法的执行。<br><figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div><div class=\"line\">14</div><div class=\"line\">15</div><div class=\"line\">16</div><div class=\"line\">17</div><div class=\"line\">18</div><div class=\"line\">19</div><div class=\"line\">20</div><div class=\"line\">21</div><div class=\"line\">22</div><div class=\"line\">23</div><div class=\"line\">24</div><div class=\"line\">25</div><div class=\"line\">26</div><div class=\"line\">27</div><div class=\"line\">28</div><div class=\"line\">29</div><div class=\"line\">30</div><div class=\"line\">31</div><div class=\"line\">32</div><div class=\"line\">33</div><div class=\"line\">34</div><div class=\"line\">35</div><div class=\"line\">36</div><div class=\"line\">37</div><div class=\"line\">38</div><div class=\"line\">39</div><div class=\"line\">40</div><div class=\"line\">41</div><div class=\"line\">42</div><div class=\"line\">43</div><div class=\"line\">44</div><div class=\"line\">45</div><div class=\"line\">46</div><div class=\"line\">47</div><div class=\"line\">48</div><div class=\"line\">49</div><div class=\"line\">50</div><div class=\"line\">51</div><div class=\"line\">52</div><div class=\"line\">53</div><div class=\"line\">54</div><div class=\"line\">55</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">static</span> <span class=\"keyword\">void</span> <span class=\"title\">loop</span><span class=\"params\">()</span> </span>&#123;</div><div class=\"line\">        <span class=\"keyword\">final</span> Looper me = myLooper();</div><div class=\"line\">        <span class=\"keyword\">if</span> (me == <span class=\"keyword\">null</span>) &#123;</div><div class=\"line\">            <span class=\"keyword\">throw</span> <span class=\"keyword\">new</span> RuntimeException(<span class=\"string\">\"No Looper; Looper.prepare() wasn't called on this thread.\"</span>);</div><div class=\"line\">        &#125;</div><div class=\"line\">        <span class=\"keyword\">final</span> MessageQueue queue = me.mQueue;</div><div class=\"line\"></div><div class=\"line\">        <span class=\"comment\">// Make sure the identity of this thread is that of the local process,</span></div><div class=\"line\">        <span class=\"comment\">// and keep track of what that identity token actually is.</span></div><div class=\"line\">        Binder.clearCallingIdentity();</div><div class=\"line\">        <span class=\"keyword\">final</span> <span class=\"keyword\">long</span> ident = Binder.clearCallingIdentity();</div><div class=\"line\"></div><div class=\"line\">        <span class=\"keyword\">for</span> (;;) &#123;</div><div class=\"line\">            Message msg = queue.next(); <span class=\"comment\">// might block</span></div><div class=\"line\">            <span class=\"keyword\">if</span> (msg == <span class=\"keyword\">null</span>) &#123;</div><div class=\"line\">                <span class=\"comment\">// No message indicates that the message queue is quitting.</span></div><div class=\"line\">                <span class=\"keyword\">return</span>;</div><div class=\"line\">            &#125;</div><div class=\"line\"></div><div class=\"line\">            <span class=\"comment\">// This must be in a local variable, in case a UI event sets the logger</span></div><div class=\"line\">            <span class=\"keyword\">final</span> Printer logging = me.mLogging;</div><div class=\"line\">            <span class=\"keyword\">if</span> (logging != <span class=\"keyword\">null</span>) &#123;</div><div class=\"line\">                logging.println(<span class=\"string\">\"&gt;&gt;&gt;&gt;&gt; Dispatching to \"</span> + msg.target + <span class=\"string\">\" \"</span> +</div><div class=\"line\">                        msg.callback + <span class=\"string\">\": \"</span> + msg.what);</div><div class=\"line\">            &#125;</div><div class=\"line\"></div><div class=\"line\">            <span class=\"keyword\">final</span> <span class=\"keyword\">long</span> traceTag = me.mTraceTag;</div><div class=\"line\">            <span class=\"keyword\">if</span> (traceTag != <span class=\"number\">0</span> &amp;&amp; Trace.isTagEnabled(traceTag)) &#123;</div><div class=\"line\">                Trace.traceBegin(traceTag, msg.target.getTraceName(msg));</div><div class=\"line\">            &#125;</div><div class=\"line\">            <span class=\"keyword\">try</span> &#123;</div><div class=\"line\">                msg.target.dispatchMessage(msg);</div><div class=\"line\">            &#125; <span class=\"keyword\">finally</span> &#123;</div><div class=\"line\">                <span class=\"keyword\">if</span> (traceTag != <span class=\"number\">0</span>) &#123;</div><div class=\"line\">                    Trace.traceEnd(traceTag);</div><div class=\"line\">                &#125;</div><div class=\"line\">            &#125;</div><div class=\"line\"></div><div class=\"line\">            <span class=\"keyword\">if</span> (logging != <span class=\"keyword\">null</span>) &#123;</div><div class=\"line\">                logging.println(<span class=\"string\">\"&lt;&lt;&lt;&lt;&lt; Finished to \"</span> + msg.target + <span class=\"string\">\" \"</span> + msg.callback);</div><div class=\"line\">            &#125;</div><div class=\"line\"></div><div class=\"line\">            <span class=\"comment\">// Make sure that during the course of dispatching the</span></div><div class=\"line\">            <span class=\"comment\">// identity of the thread wasn't corrupted.</span></div><div class=\"line\">            <span class=\"keyword\">final</span> <span class=\"keyword\">long</span> newIdent = Binder.clearCallingIdentity();</div><div class=\"line\">            <span class=\"keyword\">if</span> (ident != newIdent) &#123;</div><div class=\"line\">                Log.wtf(TAG, <span class=\"string\">\"Thread identity changed from 0x\"</span></div><div class=\"line\">                        + Long.toHexString(ident) + <span class=\"string\">\" to 0x\"</span></div><div class=\"line\">                        + Long.toHexString(newIdent) + <span class=\"string\">\" while dispatching to \"</span></div><div class=\"line\">                        + msg.target.getClass().getName() + <span class=\"string\">\" \"</span></div><div class=\"line\">                        + msg.callback + <span class=\"string\">\" what=\"</span> + msg.what);</div><div class=\"line\">            &#125;</div><div class=\"line\"></div><div class=\"line\">            msg.recycleUnchecked();</div><div class=\"line\">        &#125;</div></pre></td></tr></table></figure></p>\n<p>主要代码就是开启了一个死循环，去调用 <code>queue.next()</code> 从消息队列里取消息，如果消息队列里存在未处理的消息，那么就拿出来，交给这个 Message 所对应的 Handler 的 <code>handleMessage(Message msg)</code>。这个就是我们自己的 Handler 中重写的方法。我们在这里就可以根据对应的消息来进行对应的UI处理了。</p>\n<h3 id=\"Message-中的消息池\"><a href=\"#Message-中的消息池\" class=\"headerlink\" title=\"Message 中的消息池\"></a>Message 中的消息池</h3><p>在使用过程中，我们获取 Message 对象的方法一般都是使用 <code>Message.obtain()</code><br><figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div><div class=\"line\">14</div><div class=\"line\">15</div><div class=\"line\">16</div><div class=\"line\">17</div><div class=\"line\">18</div><div class=\"line\">19</div><div class=\"line\">20</div><div class=\"line\">21</div><div class=\"line\">22</div><div class=\"line\">23</div><div class=\"line\">24</div><div class=\"line\">25</div><div class=\"line\">26</div><div class=\"line\">27</div><div class=\"line\">28</div><div class=\"line\">29</div><div class=\"line\">30</div><div class=\"line\">31</div><div class=\"line\">32</div><div class=\"line\">33</div><div class=\"line\">34</div><div class=\"line\">35</div><div class=\"line\">36</div><div class=\"line\">37</div><div class=\"line\">38</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"keyword\">private</span> <span class=\"keyword\">static</span> <span class=\"keyword\">final</span> <span class=\"keyword\">int</span> MAX_POOL_SIZE = <span class=\"number\">50</span>;</div><div class=\"line\"></div><div class=\"line\"><span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">static</span> Message <span class=\"title\">obtain</span><span class=\"params\">()</span> </span>&#123;</div><div class=\"line\">        <span class=\"keyword\">synchronized</span> (sPoolSync) &#123;</div><div class=\"line\">            <span class=\"keyword\">if</span> (sPool != <span class=\"keyword\">null</span>) &#123;</div><div class=\"line\">                Message m = sPool;</div><div class=\"line\">                sPool = m.next;</div><div class=\"line\">                m.next = <span class=\"keyword\">null</span>;</div><div class=\"line\">                m.flags = <span class=\"number\">0</span>; <span class=\"comment\">// clear in-use flag</span></div><div class=\"line\">                sPoolSize--;</div><div class=\"line\">                <span class=\"keyword\">return</span> m;</div><div class=\"line\">            &#125;</div><div class=\"line\">        &#125;</div><div class=\"line\">        <span class=\"keyword\">return</span> <span class=\"keyword\">new</span> Message();</div><div class=\"line\">    &#125;</div><div class=\"line\"></div><div class=\"line\"><span class=\"function\"><span class=\"keyword\">void</span> <span class=\"title\">recycleUnchecked</span><span class=\"params\">()</span> </span>&#123;</div><div class=\"line\">        <span class=\"comment\">// Mark the message as in use while it remains in the recycled object pool.</span></div><div class=\"line\">        <span class=\"comment\">// Clear out all other details.</span></div><div class=\"line\">        flags = FLAG_IN_USE;</div><div class=\"line\">        what = <span class=\"number\">0</span>;</div><div class=\"line\">        arg1 = <span class=\"number\">0</span>;</div><div class=\"line\">        arg2 = <span class=\"number\">0</span>;</div><div class=\"line\">        obj = <span class=\"keyword\">null</span>;</div><div class=\"line\">        replyTo = <span class=\"keyword\">null</span>;</div><div class=\"line\">        sendingUid = -<span class=\"number\">1</span>;</div><div class=\"line\">        when = <span class=\"number\">0</span>;</div><div class=\"line\">        target = <span class=\"keyword\">null</span>;</div><div class=\"line\">        callback = <span class=\"keyword\">null</span>;</div><div class=\"line\">        data = <span class=\"keyword\">null</span>;</div><div class=\"line\"></div><div class=\"line\">        <span class=\"keyword\">synchronized</span> (sPoolSync) &#123;</div><div class=\"line\">            <span class=\"keyword\">if</span> (sPoolSize &lt; MAX_POOL_SIZE) &#123;</div><div class=\"line\">                next = sPool;</div><div class=\"line\">                sPool = <span class=\"keyword\">this</span>;</div><div class=\"line\">                sPoolSize++;</div><div class=\"line\">            &#125;</div><div class=\"line\">        &#125;</div></pre></td></tr></table></figure></p>\n<p>从中我们可以看到 <code>obtain</code> 是从一个大小为50的消息池中去取消息对象。在使用完后，回收消息，重新放入消息池。</p>\n","excerpt":"<p>Handler 消息机制是我们安卓中最常见的一种线程间通讯，通过使用 Handler 消息机制，我们可以实现在子线程中处理耗时操作，在主线程中更新UI。那么为什么能实现这种操作，我们来看一下 Handler 的源码，来深入了解一下 Handler 消息机制的原理。</p>\n<h3 id=\"消息的发送与排序\"><a href=\"#消息的发送与排序\" class=\"headerlink\" title=\"消息的发送与排序\"></a>消息的发送与排序</h3><p>首先，我们先从<code>mHandler.sendMessage(message)</code> 这里看进去。<br><figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">final</span> <span class=\"keyword\">boolean</span> <span class=\"title\">sendMessage</span><span class=\"params\">(Message msg)</span></div><div class=\"line\">    </span>&#123;</div><div class=\"line\">        <span class=\"keyword\">return</span> sendMessageDelayed(msg, <span class=\"number\">0</span>);</div><div class=\"line\">    &#125;</div></pre></td></tr></table></figure></p>","more":"<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">final</span> <span class=\"keyword\">boolean</span> <span class=\"title\">sendMessageDelayed</span><span class=\"params\">(Message msg, <span class=\"keyword\">long</span> delayMillis)</span></div><div class=\"line\">    </span>&#123;</div><div class=\"line\">        <span class=\"keyword\">if</span> (delayMillis &lt; <span class=\"number\">0</span>) &#123;</div><div class=\"line\">            delayMillis = <span class=\"number\">0</span>;</div><div class=\"line\">        &#125;</div><div class=\"line\">        <span class=\"keyword\">return</span> sendMessageAtTime(msg, SystemClock.uptimeMillis() + delayMillis);</div><div class=\"line\">    &#125;</div></pre></td></tr></table></figure>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">boolean</span> <span class=\"title\">sendMessageAtTime</span><span class=\"params\">(Message msg, <span class=\"keyword\">long</span> uptimeMillis)</span> </span>&#123;</div><div class=\"line\">        MessageQueue queue = mQueue;</div><div class=\"line\">        <span class=\"keyword\">if</span> (queue == <span class=\"keyword\">null</span>) &#123;</div><div class=\"line\">            RuntimeException e = <span class=\"keyword\">new</span> RuntimeException(</div><div class=\"line\">                    <span class=\"keyword\">this</span> + <span class=\"string\">\" sendMessageAtTime() called with no mQueue\"</span>);</div><div class=\"line\">            Log.w(<span class=\"string\">\"Looper\"</span>, e.getMessage(), e);</div><div class=\"line\">            <span class=\"keyword\">return</span> <span class=\"keyword\">false</span>;</div><div class=\"line\">        &#125;</div><div class=\"line\">        <span class=\"keyword\">return</span> enqueueMessage(queue, msg, uptimeMillis);</div><div class=\"line\">    &#125;</div></pre></td></tr></table></figure>\n<p>依次调用这三个方法，这些方法是处理发送实时消息和延迟消息的区别，拿到每个消息被传递时的具体时间戳。这样就能按照严格的顺序来发送对应的消息。<br><figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"function\"><span class=\"keyword\">private</span> <span class=\"keyword\">boolean</span> <span class=\"title\">enqueueMessage</span><span class=\"params\">(MessageQueue queue, Message msg, <span class=\"keyword\">long</span> uptimeMillis)</span> </span>&#123;</div><div class=\"line\">        msg.target = <span class=\"keyword\">this</span>;</div><div class=\"line\">        <span class=\"keyword\">if</span> (mAsynchronous) &#123;</div><div class=\"line\">            msg.setAsynchronous(<span class=\"keyword\">true</span>);</div><div class=\"line\">        &#125;</div><div class=\"line\">        <span class=\"keyword\">return</span> queue.enqueueMessage(msg, uptimeMillis);</div><div class=\"line\">    &#125;</div></pre></td></tr></table></figure></p>\n<p>这里，MessageQueue 就是一个队列，用于承载 Message 。这里的 <code>queue.enqueueMessage(msg, uptimeMillis)</code> 就是将消息按照时间顺序依次排好队，等待被取用。<br><figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div><div class=\"line\">14</div><div class=\"line\">15</div><div class=\"line\">16</div><div class=\"line\">17</div><div class=\"line\">18</div><div class=\"line\">19</div><div class=\"line\">20</div><div class=\"line\">21</div><div class=\"line\">22</div><div class=\"line\">23</div><div class=\"line\">24</div><div class=\"line\">25</div><div class=\"line\">26</div><div class=\"line\">27</div><div class=\"line\">28</div><div class=\"line\">29</div><div class=\"line\">30</div><div class=\"line\">31</div><div class=\"line\">32</div><div class=\"line\">33</div><div class=\"line\">34</div><div class=\"line\">35</div><div class=\"line\">36</div><div class=\"line\">37</div><div class=\"line\">38</div><div class=\"line\">39</div><div class=\"line\">40</div><div class=\"line\">41</div><div class=\"line\">42</div><div class=\"line\">43</div><div class=\"line\">44</div><div class=\"line\">45</div><div class=\"line\">46</div><div class=\"line\">47</div><div class=\"line\">48</div><div class=\"line\">49</div><div class=\"line\">50</div><div class=\"line\">51</div><div class=\"line\">52</div><div class=\"line\">53</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"function\"><span class=\"keyword\">boolean</span> <span class=\"title\">enqueueMessage</span><span class=\"params\">(Message msg, <span class=\"keyword\">long</span> when)</span> </span>&#123;</div><div class=\"line\">        <span class=\"keyword\">if</span> (msg.target == <span class=\"keyword\">null</span>) &#123;</div><div class=\"line\">            <span class=\"keyword\">throw</span> <span class=\"keyword\">new</span> IllegalArgumentException(<span class=\"string\">\"Message must have a target.\"</span>);</div><div class=\"line\">        &#125;</div><div class=\"line\">        <span class=\"keyword\">if</span> (msg.isInUse()) &#123;</div><div class=\"line\">            <span class=\"keyword\">throw</span> <span class=\"keyword\">new</span> IllegalStateException(msg + <span class=\"string\">\" This message is already in use.\"</span>);</div><div class=\"line\">        &#125;</div><div class=\"line\"></div><div class=\"line\">        <span class=\"keyword\">synchronized</span> (<span class=\"keyword\">this</span>) &#123;</div><div class=\"line\">            <span class=\"keyword\">if</span> (mQuitting) &#123;</div><div class=\"line\">                IllegalStateException e = <span class=\"keyword\">new</span> IllegalStateException(</div><div class=\"line\">                        msg.target + <span class=\"string\">\" sending message to a Handler on a dead thread\"</span>);</div><div class=\"line\">                Log.w(TAG, e.getMessage(), e);</div><div class=\"line\">                msg.recycle();</div><div class=\"line\">                <span class=\"keyword\">return</span> <span class=\"keyword\">false</span>;</div><div class=\"line\">            &#125;</div><div class=\"line\"></div><div class=\"line\">            msg.markInUse();</div><div class=\"line\">            msg.when = when;</div><div class=\"line\">            Message p = mMessages;</div><div class=\"line\">            <span class=\"keyword\">boolean</span> needWake;</div><div class=\"line\">            <span class=\"keyword\">if</span> (p == <span class=\"keyword\">null</span> || when == <span class=\"number\">0</span> || when &lt; p.when) &#123;</div><div class=\"line\">                <span class=\"comment\">// New head, wake up the event queue if blocked.</span></div><div class=\"line\">                msg.next = p;</div><div class=\"line\">                mMessages = msg;</div><div class=\"line\">                needWake = mBlocked;</div><div class=\"line\">            &#125; <span class=\"keyword\">else</span> &#123;</div><div class=\"line\">                <span class=\"comment\">// Inserted within the middle of the queue.  Usually we don't have to wake</span></div><div class=\"line\">                <span class=\"comment\">// up the event queue unless there is a barrier at the head of the queue</span></div><div class=\"line\">                <span class=\"comment\">// and the message is the earliest asynchronous message in the queue.</span></div><div class=\"line\">                needWake = mBlocked &amp;&amp; p.target == <span class=\"keyword\">null</span> &amp;&amp; msg.isAsynchronous();</div><div class=\"line\">                Message prev;</div><div class=\"line\">                <span class=\"keyword\">for</span> (;;) &#123;</div><div class=\"line\">                    prev = p;</div><div class=\"line\">                    p = p.next;</div><div class=\"line\">                    <span class=\"keyword\">if</span> (p == <span class=\"keyword\">null</span> || when &lt; p.when) &#123;</div><div class=\"line\">                        <span class=\"keyword\">break</span>;</div><div class=\"line\">                    &#125;</div><div class=\"line\">                    <span class=\"keyword\">if</span> (needWake &amp;&amp; p.isAsynchronous()) &#123;</div><div class=\"line\">                        needWake = <span class=\"keyword\">false</span>;</div><div class=\"line\">                    &#125;</div><div class=\"line\">                &#125;</div><div class=\"line\">                msg.next = p; <span class=\"comment\">// invariant: p == prev.next</span></div><div class=\"line\">                prev.next = msg;</div><div class=\"line\">            &#125;</div><div class=\"line\"></div><div class=\"line\">            <span class=\"comment\">// We can assume mPtr != 0 because mQuitting is false.</span></div><div class=\"line\">            <span class=\"keyword\">if</span> (needWake) &#123;</div><div class=\"line\">                nativeWake(mPtr);</div><div class=\"line\">            &#125;</div><div class=\"line\">        &#125;</div><div class=\"line\">        <span class=\"keyword\">return</span> <span class=\"keyword\">true</span>;</div><div class=\"line\">    &#125;</div></pre></td></tr></table></figure></p>\n<p>在这里，我们可以知道 Message 的底层结构是一个链表的形式，至于为什么要使用链表这种数据结构，那是由于我们的消息需要频繁的插入取出。通过 <code>enqueueMessage(Message msg, long when)</code>这个方法处理后，我们的 MessageQueue 就是一个有序的队列了。</p>\n<h3 id=\"Looper-处理消息队列\"><a href=\"#Looper-处理消息队列\" class=\"headerlink\" title=\"Looper 处理消息队列\"></a>Looper 处理消息队列</h3><figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div><div class=\"line\">14</div><div class=\"line\">15</div><div class=\"line\">16</div><div class=\"line\">17</div><div class=\"line\">18</div><div class=\"line\">19</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"function\"><span class=\"keyword\">public</span> <span class=\"title\">Handler</span><span class=\"params\">(Callback callback, <span class=\"keyword\">boolean</span> async)</span> </span>&#123;</div><div class=\"line\">        <span class=\"keyword\">if</span> (FIND_POTENTIAL_LEAKS) &#123;</div><div class=\"line\">            <span class=\"keyword\">final</span> Class&lt;? extends Handler&gt; klass = getClass();</div><div class=\"line\">            <span class=\"keyword\">if</span> ((klass.isAnonymousClass() || klass.isMemberClass() || klass.isLocalClass()) &amp;&amp;</div><div class=\"line\">                    (klass.getModifiers() &amp; Modifier.STATIC) == <span class=\"number\">0</span>) &#123;</div><div class=\"line\">                Log.w(TAG, <span class=\"string\">\"The following Handler class should be static or leaks might occur: \"</span> +</div><div class=\"line\">                    klass.getCanonicalName());</div><div class=\"line\">            &#125;</div><div class=\"line\">        &#125;</div><div class=\"line\"></div><div class=\"line\">        mLooper = Looper.myLooper();</div><div class=\"line\">        <span class=\"keyword\">if</span> (mLooper == <span class=\"keyword\">null</span>) &#123;</div><div class=\"line\">            <span class=\"keyword\">throw</span> <span class=\"keyword\">new</span> RuntimeException(</div><div class=\"line\">                <span class=\"string\">\"Can't create handler inside thread that has not called Looper.prepare()\"</span>);</div><div class=\"line\">        &#125;</div><div class=\"line\">        mQueue = mLooper.mQueue;</div><div class=\"line\">        mCallback = callback;</div><div class=\"line\">        mAsynchronous = async;</div><div class=\"line\">    &#125;</div></pre></td></tr></table></figure>\n<p>从 Handler 的构造方法中，可以看出初始化 mLooper 和 mQueue 的操作，纵观 Looper 类，我们可以发现，Looper 维护着一个存放 Looper 对象的 ThreadLocal。ThreadLocal 是一个线程存储区域，确保着每个线程有自己的存储区域，跨线程是不能访问的。这样，就确保了每个线程有本线程的 Looper。这样，在 Looper 没有初始化之前，Handler是不能创建出来的，否则会出现下面的错误 <code>java.lang.RuntimeException: Can&#39;t create handler inside thread that has not called Looper.prepare()</code>。对于主线程，app在启动的时候，在 ActivityThread 的 <code>main</code> 方法中就有这主线程的 Looper 初始化的操作。再接着就是 <code>Looper.loop()</code> 方法的执行。<br><figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div><div class=\"line\">14</div><div class=\"line\">15</div><div class=\"line\">16</div><div class=\"line\">17</div><div class=\"line\">18</div><div class=\"line\">19</div><div class=\"line\">20</div><div class=\"line\">21</div><div class=\"line\">22</div><div class=\"line\">23</div><div class=\"line\">24</div><div class=\"line\">25</div><div class=\"line\">26</div><div class=\"line\">27</div><div class=\"line\">28</div><div class=\"line\">29</div><div class=\"line\">30</div><div class=\"line\">31</div><div class=\"line\">32</div><div class=\"line\">33</div><div class=\"line\">34</div><div class=\"line\">35</div><div class=\"line\">36</div><div class=\"line\">37</div><div class=\"line\">38</div><div class=\"line\">39</div><div class=\"line\">40</div><div class=\"line\">41</div><div class=\"line\">42</div><div class=\"line\">43</div><div class=\"line\">44</div><div class=\"line\">45</div><div class=\"line\">46</div><div class=\"line\">47</div><div class=\"line\">48</div><div class=\"line\">49</div><div class=\"line\">50</div><div class=\"line\">51</div><div class=\"line\">52</div><div class=\"line\">53</div><div class=\"line\">54</div><div class=\"line\">55</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">static</span> <span class=\"keyword\">void</span> <span class=\"title\">loop</span><span class=\"params\">()</span> </span>&#123;</div><div class=\"line\">        <span class=\"keyword\">final</span> Looper me = myLooper();</div><div class=\"line\">        <span class=\"keyword\">if</span> (me == <span class=\"keyword\">null</span>) &#123;</div><div class=\"line\">            <span class=\"keyword\">throw</span> <span class=\"keyword\">new</span> RuntimeException(<span class=\"string\">\"No Looper; Looper.prepare() wasn't called on this thread.\"</span>);</div><div class=\"line\">        &#125;</div><div class=\"line\">        <span class=\"keyword\">final</span> MessageQueue queue = me.mQueue;</div><div class=\"line\"></div><div class=\"line\">        <span class=\"comment\">// Make sure the identity of this thread is that of the local process,</span></div><div class=\"line\">        <span class=\"comment\">// and keep track of what that identity token actually is.</span></div><div class=\"line\">        Binder.clearCallingIdentity();</div><div class=\"line\">        <span class=\"keyword\">final</span> <span class=\"keyword\">long</span> ident = Binder.clearCallingIdentity();</div><div class=\"line\"></div><div class=\"line\">        <span class=\"keyword\">for</span> (;;) &#123;</div><div class=\"line\">            Message msg = queue.next(); <span class=\"comment\">// might block</span></div><div class=\"line\">            <span class=\"keyword\">if</span> (msg == <span class=\"keyword\">null</span>) &#123;</div><div class=\"line\">                <span class=\"comment\">// No message indicates that the message queue is quitting.</span></div><div class=\"line\">                <span class=\"keyword\">return</span>;</div><div class=\"line\">            &#125;</div><div class=\"line\"></div><div class=\"line\">            <span class=\"comment\">// This must be in a local variable, in case a UI event sets the logger</span></div><div class=\"line\">            <span class=\"keyword\">final</span> Printer logging = me.mLogging;</div><div class=\"line\">            <span class=\"keyword\">if</span> (logging != <span class=\"keyword\">null</span>) &#123;</div><div class=\"line\">                logging.println(<span class=\"string\">\"&gt;&gt;&gt;&gt;&gt; Dispatching to \"</span> + msg.target + <span class=\"string\">\" \"</span> +</div><div class=\"line\">                        msg.callback + <span class=\"string\">\": \"</span> + msg.what);</div><div class=\"line\">            &#125;</div><div class=\"line\"></div><div class=\"line\">            <span class=\"keyword\">final</span> <span class=\"keyword\">long</span> traceTag = me.mTraceTag;</div><div class=\"line\">            <span class=\"keyword\">if</span> (traceTag != <span class=\"number\">0</span> &amp;&amp; Trace.isTagEnabled(traceTag)) &#123;</div><div class=\"line\">                Trace.traceBegin(traceTag, msg.target.getTraceName(msg));</div><div class=\"line\">            &#125;</div><div class=\"line\">            <span class=\"keyword\">try</span> &#123;</div><div class=\"line\">                msg.target.dispatchMessage(msg);</div><div class=\"line\">            &#125; <span class=\"keyword\">finally</span> &#123;</div><div class=\"line\">                <span class=\"keyword\">if</span> (traceTag != <span class=\"number\">0</span>) &#123;</div><div class=\"line\">                    Trace.traceEnd(traceTag);</div><div class=\"line\">                &#125;</div><div class=\"line\">            &#125;</div><div class=\"line\"></div><div class=\"line\">            <span class=\"keyword\">if</span> (logging != <span class=\"keyword\">null</span>) &#123;</div><div class=\"line\">                logging.println(<span class=\"string\">\"&lt;&lt;&lt;&lt;&lt; Finished to \"</span> + msg.target + <span class=\"string\">\" \"</span> + msg.callback);</div><div class=\"line\">            &#125;</div><div class=\"line\"></div><div class=\"line\">            <span class=\"comment\">// Make sure that during the course of dispatching the</span></div><div class=\"line\">            <span class=\"comment\">// identity of the thread wasn't corrupted.</span></div><div class=\"line\">            <span class=\"keyword\">final</span> <span class=\"keyword\">long</span> newIdent = Binder.clearCallingIdentity();</div><div class=\"line\">            <span class=\"keyword\">if</span> (ident != newIdent) &#123;</div><div class=\"line\">                Log.wtf(TAG, <span class=\"string\">\"Thread identity changed from 0x\"</span></div><div class=\"line\">                        + Long.toHexString(ident) + <span class=\"string\">\" to 0x\"</span></div><div class=\"line\">                        + Long.toHexString(newIdent) + <span class=\"string\">\" while dispatching to \"</span></div><div class=\"line\">                        + msg.target.getClass().getName() + <span class=\"string\">\" \"</span></div><div class=\"line\">                        + msg.callback + <span class=\"string\">\" what=\"</span> + msg.what);</div><div class=\"line\">            &#125;</div><div class=\"line\"></div><div class=\"line\">            msg.recycleUnchecked();</div><div class=\"line\">        &#125;</div></pre></td></tr></table></figure></p>\n<p>主要代码就是开启了一个死循环，去调用 <code>queue.next()</code> 从消息队列里取消息，如果消息队列里存在未处理的消息，那么就拿出来，交给这个 Message 所对应的 Handler 的 <code>handleMessage(Message msg)</code>。这个就是我们自己的 Handler 中重写的方法。我们在这里就可以根据对应的消息来进行对应的UI处理了。</p>\n<h3 id=\"Message-中的消息池\"><a href=\"#Message-中的消息池\" class=\"headerlink\" title=\"Message 中的消息池\"></a>Message 中的消息池</h3><p>在使用过程中，我们获取 Message 对象的方法一般都是使用 <code>Message.obtain()</code><br><figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div><div class=\"line\">14</div><div class=\"line\">15</div><div class=\"line\">16</div><div class=\"line\">17</div><div class=\"line\">18</div><div class=\"line\">19</div><div class=\"line\">20</div><div class=\"line\">21</div><div class=\"line\">22</div><div class=\"line\">23</div><div class=\"line\">24</div><div class=\"line\">25</div><div class=\"line\">26</div><div class=\"line\">27</div><div class=\"line\">28</div><div class=\"line\">29</div><div class=\"line\">30</div><div class=\"line\">31</div><div class=\"line\">32</div><div class=\"line\">33</div><div class=\"line\">34</div><div class=\"line\">35</div><div class=\"line\">36</div><div class=\"line\">37</div><div class=\"line\">38</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"keyword\">private</span> <span class=\"keyword\">static</span> <span class=\"keyword\">final</span> <span class=\"keyword\">int</span> MAX_POOL_SIZE = <span class=\"number\">50</span>;</div><div class=\"line\"></div><div class=\"line\"><span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">static</span> Message <span class=\"title\">obtain</span><span class=\"params\">()</span> </span>&#123;</div><div class=\"line\">        <span class=\"keyword\">synchronized</span> (sPoolSync) &#123;</div><div class=\"line\">            <span class=\"keyword\">if</span> (sPool != <span class=\"keyword\">null</span>) &#123;</div><div class=\"line\">                Message m = sPool;</div><div class=\"line\">                sPool = m.next;</div><div class=\"line\">                m.next = <span class=\"keyword\">null</span>;</div><div class=\"line\">                m.flags = <span class=\"number\">0</span>; <span class=\"comment\">// clear in-use flag</span></div><div class=\"line\">                sPoolSize--;</div><div class=\"line\">                <span class=\"keyword\">return</span> m;</div><div class=\"line\">            &#125;</div><div class=\"line\">        &#125;</div><div class=\"line\">        <span class=\"keyword\">return</span> <span class=\"keyword\">new</span> Message();</div><div class=\"line\">    &#125;</div><div class=\"line\"></div><div class=\"line\"><span class=\"function\"><span class=\"keyword\">void</span> <span class=\"title\">recycleUnchecked</span><span class=\"params\">()</span> </span>&#123;</div><div class=\"line\">        <span class=\"comment\">// Mark the message as in use while it remains in the recycled object pool.</span></div><div class=\"line\">        <span class=\"comment\">// Clear out all other details.</span></div><div class=\"line\">        flags = FLAG_IN_USE;</div><div class=\"line\">        what = <span class=\"number\">0</span>;</div><div class=\"line\">        arg1 = <span class=\"number\">0</span>;</div><div class=\"line\">        arg2 = <span class=\"number\">0</span>;</div><div class=\"line\">        obj = <span class=\"keyword\">null</span>;</div><div class=\"line\">        replyTo = <span class=\"keyword\">null</span>;</div><div class=\"line\">        sendingUid = -<span class=\"number\">1</span>;</div><div class=\"line\">        when = <span class=\"number\">0</span>;</div><div class=\"line\">        target = <span class=\"keyword\">null</span>;</div><div class=\"line\">        callback = <span class=\"keyword\">null</span>;</div><div class=\"line\">        data = <span class=\"keyword\">null</span>;</div><div class=\"line\"></div><div class=\"line\">        <span class=\"keyword\">synchronized</span> (sPoolSync) &#123;</div><div class=\"line\">            <span class=\"keyword\">if</span> (sPoolSize &lt; MAX_POOL_SIZE) &#123;</div><div class=\"line\">                next = sPool;</div><div class=\"line\">                sPool = <span class=\"keyword\">this</span>;</div><div class=\"line\">                sPoolSize++;</div><div class=\"line\">            &#125;</div><div class=\"line\">        &#125;</div></pre></td></tr></table></figure></p>\n<p>从中我们可以看到 <code>obtain</code> 是从一个大小为50的消息池中去取消息对象。在使用完后，回收消息，重新放入消息池。</p>"},{"title":"LayoutInflater源码分析","date":"2017-10-10T14:41:43.000Z","_content":"在 Android 开发中，LayoutInflater 经常被使用，它的作用就是将所需要的 xml 布局填充到我们的 View 对象中。\n首先，我们看一下它的用法，获取其实例的方法有三种：\n```java\n // 1. 在 Activity 中获取 LayoutInflater：\n  LayoutInflater layoutInflater = getLayoutInflater();\n  // 2. 通过 LayoutInflater 的静态方法获取\n  LayoutInflater layoutInflater = LayoutInflater.from(context);\n  // 3 通过 Context 中的 getSystemService 方法获取\n  LayoutInflater LayoutInflater = (LayoutInflater) context.getSystemService(Context.LAYOUT_INFLATER_SERVICE);\n```\n<!--more-->\n通过查看源码，我们可以发现此三种获取实例的方式最后都是通过第三种方式获取到 LayoutInflater 的实例的。我们来看看 ContextImpl 类中的 getSystemService 方法：\n```java\n@Override\npublic Object getSystemService(String name) {\n    return SystemServiceRegistry.getSystemService(this, name);\n}\n```\n我们再看看 SystemServiceRegistry 类中的代码：\n```java\n    static {\n        //...省略部分代码\n\n        registerService(Context.LAYOUT_INFLATER_SERVICE, LayoutInflater.class,\n                new CachedServiceFetcher<LayoutInflater>() {\n            @Override\n            public LayoutInflater createService(ContextImpl ctx) {\n                return new PhoneLayoutInflater(ctx.getOuterContext());\n            }});\n\n      //...省略部分代码\n    }\n\n    /**\n    * Gets a system service from a given context.\n    */\n    public static Object getSystemService(ContextImpl ctx, String name) {\n        ServiceFetcher<?> fetcher = SYSTEM_SERVICE_FETCHERS.get(name);\n        return fetcher != null ? fetcher.getService(ctx) : null;\n    }\n```\n关于这部分内容，SystemServiceRegistry 在什么时候初始化，在什么时候注册这些服务，不是本文的主题，这里不做赘述。最关键的是，我们看到最终我们拿到的是 PhoneLayoutInflater 对象。我们先将这个对象放在这里，看看获取到的 LayoutInflater 接下来干的活。\n我们在使用的时候都是调用了 inflater 方法：\n```java\nView view = inflater.inflate(layoutId, parent, attachToParent)\n```\n在 LayoutInflater 中，重载了几个 inflater 方法，最后都是调用了下面这个重载方法：\n```java\npublic View inflate(XmlPullParser parser, @Nullable ViewGroup root, boolean attachToRoot) {\n        synchronized (mConstructorArgs) {\n            Trace.traceBegin(Trace.TRACE_TAG_VIEW, \"inflate\");\n\n            final Context inflaterContext = mContext;\n            final AttributeSet attrs = Xml.asAttributeSet(parser);\n            // Context 对象\n            Context lastContext = (Context) mConstructorArgs[0];\n            mConstructorArgs[0] = inflaterContext;\n            // 存储父视图\n            View result = root;\n\n            try {\n                // Look for the root node.\n                int type;\n                while ((type = parser.next()) != XmlPullParser.START_TAG &&\n                        type != XmlPullParser.END_DOCUMENT) {\n                    // Empty\n                }\n\n                final String name = parser.getName();\n                // 解析 merge 标签\n                if (TAG_MERGE.equals(name)) {\n                    if (root == null || !attachToRoot) {\n                        throw new InflateException(\"<merge /> can be used only with a valid \"\n                                + \"ViewGroup root and attachToRoot=true\");\n                    }\n                    rInflate(parser, root, inflaterContext, attrs, false);\n                } else {\n                    // Temp is the root view that was found in the xml\n                    // 这里就是通过 xml 的 tag 来解析 layout 根视图\n                    final View temp = createViewFromTag(root, name, inflaterContext, attrs);\n\n                    ViewGroup.LayoutParams params = null;\n\n                    if (root != null) {\n                        // Create layout params that match root, if supplied   生成布局参数\n                        params = root.generateLayoutParams(attrs);\n                        if (!attachToRoot) {\n                            // 如果  attachToRoot 为 false  给 temp 设置布局参数\n                            temp.setLayoutParams(params);\n                        }\n                    }\n\n                    // Inflate all children under temp against its context. 解析 temp 下的所有子 View\n                    rInflateChildren(parser, temp, attrs, true);\n\n                    // 如果 root 不为空，且 attachToRoot 为 true，将 temp 添加到 父视图\n                    if (root != null && attachToRoot) {\n                        root.addView(temp, params);\n                    }\n\n                    // 如果 root 为空或者 attachToRoot 为 false，返回的就是 temp\n                    if (root == null || !attachToRoot) {\n                        result = temp;\n                    }\n                }\n\n            } \n            //省略 catch finaly 代码\n\n            return result;\n        }\n    }\n```\n这里的流程很清晰，首先会去解析 xml 中的根标签，如果是 merge，就会调用 rInflater 方法，将 merge 下的所有子 View 直接添加到根标签中；如果是普通元素，就会调用 `createViewFromTag` 方法来解析，再接着 调用 rInflater 对 temp 下的子 View 解析，并添加到 temp 下。最后就将解析到的根视图返回。我们关键来看看 `createViewFromTag` 方法：\n```java\nView createViewFromTag(View parent, String name, Context context, AttributeSet attrs,\n            boolean ignoreThemeAttr) {\n        if (name.equals(\"view\")) {\n            name = attrs.getAttributeValue(null, \"class\");\n        }\n        // ...代码省略\n        try {\n            View view;\n            if (mFactory2 != null) {\n                view = mFactory2.onCreateView(parent, name, context, attrs);\n            } else if (mFactory != null) {\n                view = mFactory.onCreateView(name, context, attrs);\n            } else {\n                view = null;\n            }\n\n            if (view == null && mPrivateFactory != null) {\n                view = mPrivateFactory.onCreateView(parent, name, context, attrs);\n            }\n\n            if (view == null) {\n                final Object lastContext = mConstructorArgs[0];\n                mConstructorArgs[0] = context;\n                try {\n                    if (-1 == name.indexOf('.')) {\n                        // 内置 View 控件的解析\n                        view = onCreateView(parent, name, attrs);\n                    } else {\n                        // 自定义控件的解析\n                        view = createView(name, null, attrs);\n                    }\n                } finally {\n                    mConstructorArgs[0] = lastContext;\n                }\n            }\n\n            return view;\n        } \n        // ... 省略 catch 代码\n    }\n\n```\n这里，重点代码就是判断 View 是否为自带的控件，如果是自带的控件，就会将 name 拼全，这里就是 PhoneLayoutInflater 这个实现类起作用的时候了。\n在 PhoneLayoutInflater 重写的 onCreateView 方法中，会将 \"android.widget.\"，\"android.webkit.\"， \"android.app.\" 这个几个前缀拼在 View 的 name 前面，然后调用 `createView` 方法来创建一个 View ：\n```java\n  public final View createView(String name, String prefix, AttributeSet attrs)\n            throws ClassNotFoundException, InflateException {\n        // 从缓存中获取构造函数\n        Constructor<? extends View> constructor = sConstructorMap.get(name);\n        if (constructor != null && !verifyClassLoader(constructor)) {\n            constructor = null;\n            sConstructorMap.remove(name);\n        }\n        Class<? extends View> clazz = null;\n\n        try {\n            Trace.traceBegin(Trace.TRACE_TAG_VIEW, name);\n\n            if (constructor == null) {\n                // 如果 prefix 不为空，构造完整的 View 路径，并且加载该类\n                clazz = mContext.getClassLoader().loadClass(\n                        prefix != null ? (prefix + name) : name).asSubclass(View.class);\n                // ...代码省略\n                // 获取构造函数\n                constructor = clazz.getConstructor(mConstructorSignature);\n                constructor.setAccessible(true);   \n                // 将构造函数添加到缓存中\n                sConstructorMap.put(name, constructor);\n            } else {\n               // ...代码省略\n            }\n\n            Object[] args = mConstructorArgs;\n            args[1] = attrs;\n            // 通过构造函数实例化View\n            final View view = constructor.newInstance(args);\n            if (view instanceof ViewStub) {\n                // Use the same context when inflating ViewStub later.\n                final ViewStub viewStub = (ViewStub) view;\n                viewStub.setLayoutInflater(cloneInContext((Context) args[0]));\n            }\n            return view;\n\n        } \n        // 省略catch finaly 代码\n    }\n```\n这里主要功能就是通过 ClassLoader 加载这个特定的View的类，然后通过这个类的构造函数来实例化这个 View。这样子，我们单个 View 就被解析出来了，由于我们的 xml 是一个视图树，在 LayoutInflater 中，我们通过 `rInflate` 递归调用，来解析整个视图树。在将解析到的子 View 添加到它的 parent 中。\n\n总结：\n        LayoutInflater 加载布局文件就是通过 Android 提供的 pull 解析方式来一层一层解析布局文件，然后将最后生成的视图返回。由于解析也是需要一定时间，况且一个布局文件层级过多的话，解析的时间就会增加，这样就会导致页面卡顿。所以在实际开发中，我们应该尽量将布局文件少些层级，来保证 App 操作的流畅度。\n","source":"_posts/LayoutInflater源码分析.md","raw":"---\ntitle: LayoutInflater源码分析\ndate: 2017-10-10 22:41:43\ntags: Android\ncategories: Android\n---\n在 Android 开发中，LayoutInflater 经常被使用，它的作用就是将所需要的 xml 布局填充到我们的 View 对象中。\n首先，我们看一下它的用法，获取其实例的方法有三种：\n```java\n // 1. 在 Activity 中获取 LayoutInflater：\n  LayoutInflater layoutInflater = getLayoutInflater();\n  // 2. 通过 LayoutInflater 的静态方法获取\n  LayoutInflater layoutInflater = LayoutInflater.from(context);\n  // 3 通过 Context 中的 getSystemService 方法获取\n  LayoutInflater LayoutInflater = (LayoutInflater) context.getSystemService(Context.LAYOUT_INFLATER_SERVICE);\n```\n<!--more-->\n通过查看源码，我们可以发现此三种获取实例的方式最后都是通过第三种方式获取到 LayoutInflater 的实例的。我们来看看 ContextImpl 类中的 getSystemService 方法：\n```java\n@Override\npublic Object getSystemService(String name) {\n    return SystemServiceRegistry.getSystemService(this, name);\n}\n```\n我们再看看 SystemServiceRegistry 类中的代码：\n```java\n    static {\n        //...省略部分代码\n\n        registerService(Context.LAYOUT_INFLATER_SERVICE, LayoutInflater.class,\n                new CachedServiceFetcher<LayoutInflater>() {\n            @Override\n            public LayoutInflater createService(ContextImpl ctx) {\n                return new PhoneLayoutInflater(ctx.getOuterContext());\n            }});\n\n      //...省略部分代码\n    }\n\n    /**\n    * Gets a system service from a given context.\n    */\n    public static Object getSystemService(ContextImpl ctx, String name) {\n        ServiceFetcher<?> fetcher = SYSTEM_SERVICE_FETCHERS.get(name);\n        return fetcher != null ? fetcher.getService(ctx) : null;\n    }\n```\n关于这部分内容，SystemServiceRegistry 在什么时候初始化，在什么时候注册这些服务，不是本文的主题，这里不做赘述。最关键的是，我们看到最终我们拿到的是 PhoneLayoutInflater 对象。我们先将这个对象放在这里，看看获取到的 LayoutInflater 接下来干的活。\n我们在使用的时候都是调用了 inflater 方法：\n```java\nView view = inflater.inflate(layoutId, parent, attachToParent)\n```\n在 LayoutInflater 中，重载了几个 inflater 方法，最后都是调用了下面这个重载方法：\n```java\npublic View inflate(XmlPullParser parser, @Nullable ViewGroup root, boolean attachToRoot) {\n        synchronized (mConstructorArgs) {\n            Trace.traceBegin(Trace.TRACE_TAG_VIEW, \"inflate\");\n\n            final Context inflaterContext = mContext;\n            final AttributeSet attrs = Xml.asAttributeSet(parser);\n            // Context 对象\n            Context lastContext = (Context) mConstructorArgs[0];\n            mConstructorArgs[0] = inflaterContext;\n            // 存储父视图\n            View result = root;\n\n            try {\n                // Look for the root node.\n                int type;\n                while ((type = parser.next()) != XmlPullParser.START_TAG &&\n                        type != XmlPullParser.END_DOCUMENT) {\n                    // Empty\n                }\n\n                final String name = parser.getName();\n                // 解析 merge 标签\n                if (TAG_MERGE.equals(name)) {\n                    if (root == null || !attachToRoot) {\n                        throw new InflateException(\"<merge /> can be used only with a valid \"\n                                + \"ViewGroup root and attachToRoot=true\");\n                    }\n                    rInflate(parser, root, inflaterContext, attrs, false);\n                } else {\n                    // Temp is the root view that was found in the xml\n                    // 这里就是通过 xml 的 tag 来解析 layout 根视图\n                    final View temp = createViewFromTag(root, name, inflaterContext, attrs);\n\n                    ViewGroup.LayoutParams params = null;\n\n                    if (root != null) {\n                        // Create layout params that match root, if supplied   生成布局参数\n                        params = root.generateLayoutParams(attrs);\n                        if (!attachToRoot) {\n                            // 如果  attachToRoot 为 false  给 temp 设置布局参数\n                            temp.setLayoutParams(params);\n                        }\n                    }\n\n                    // Inflate all children under temp against its context. 解析 temp 下的所有子 View\n                    rInflateChildren(parser, temp, attrs, true);\n\n                    // 如果 root 不为空，且 attachToRoot 为 true，将 temp 添加到 父视图\n                    if (root != null && attachToRoot) {\n                        root.addView(temp, params);\n                    }\n\n                    // 如果 root 为空或者 attachToRoot 为 false，返回的就是 temp\n                    if (root == null || !attachToRoot) {\n                        result = temp;\n                    }\n                }\n\n            } \n            //省略 catch finaly 代码\n\n            return result;\n        }\n    }\n```\n这里的流程很清晰，首先会去解析 xml 中的根标签，如果是 merge，就会调用 rInflater 方法，将 merge 下的所有子 View 直接添加到根标签中；如果是普通元素，就会调用 `createViewFromTag` 方法来解析，再接着 调用 rInflater 对 temp 下的子 View 解析，并添加到 temp 下。最后就将解析到的根视图返回。我们关键来看看 `createViewFromTag` 方法：\n```java\nView createViewFromTag(View parent, String name, Context context, AttributeSet attrs,\n            boolean ignoreThemeAttr) {\n        if (name.equals(\"view\")) {\n            name = attrs.getAttributeValue(null, \"class\");\n        }\n        // ...代码省略\n        try {\n            View view;\n            if (mFactory2 != null) {\n                view = mFactory2.onCreateView(parent, name, context, attrs);\n            } else if (mFactory != null) {\n                view = mFactory.onCreateView(name, context, attrs);\n            } else {\n                view = null;\n            }\n\n            if (view == null && mPrivateFactory != null) {\n                view = mPrivateFactory.onCreateView(parent, name, context, attrs);\n            }\n\n            if (view == null) {\n                final Object lastContext = mConstructorArgs[0];\n                mConstructorArgs[0] = context;\n                try {\n                    if (-1 == name.indexOf('.')) {\n                        // 内置 View 控件的解析\n                        view = onCreateView(parent, name, attrs);\n                    } else {\n                        // 自定义控件的解析\n                        view = createView(name, null, attrs);\n                    }\n                } finally {\n                    mConstructorArgs[0] = lastContext;\n                }\n            }\n\n            return view;\n        } \n        // ... 省略 catch 代码\n    }\n\n```\n这里，重点代码就是判断 View 是否为自带的控件，如果是自带的控件，就会将 name 拼全，这里就是 PhoneLayoutInflater 这个实现类起作用的时候了。\n在 PhoneLayoutInflater 重写的 onCreateView 方法中，会将 \"android.widget.\"，\"android.webkit.\"， \"android.app.\" 这个几个前缀拼在 View 的 name 前面，然后调用 `createView` 方法来创建一个 View ：\n```java\n  public final View createView(String name, String prefix, AttributeSet attrs)\n            throws ClassNotFoundException, InflateException {\n        // 从缓存中获取构造函数\n        Constructor<? extends View> constructor = sConstructorMap.get(name);\n        if (constructor != null && !verifyClassLoader(constructor)) {\n            constructor = null;\n            sConstructorMap.remove(name);\n        }\n        Class<? extends View> clazz = null;\n\n        try {\n            Trace.traceBegin(Trace.TRACE_TAG_VIEW, name);\n\n            if (constructor == null) {\n                // 如果 prefix 不为空，构造完整的 View 路径，并且加载该类\n                clazz = mContext.getClassLoader().loadClass(\n                        prefix != null ? (prefix + name) : name).asSubclass(View.class);\n                // ...代码省略\n                // 获取构造函数\n                constructor = clazz.getConstructor(mConstructorSignature);\n                constructor.setAccessible(true);   \n                // 将构造函数添加到缓存中\n                sConstructorMap.put(name, constructor);\n            } else {\n               // ...代码省略\n            }\n\n            Object[] args = mConstructorArgs;\n            args[1] = attrs;\n            // 通过构造函数实例化View\n            final View view = constructor.newInstance(args);\n            if (view instanceof ViewStub) {\n                // Use the same context when inflating ViewStub later.\n                final ViewStub viewStub = (ViewStub) view;\n                viewStub.setLayoutInflater(cloneInContext((Context) args[0]));\n            }\n            return view;\n\n        } \n        // 省略catch finaly 代码\n    }\n```\n这里主要功能就是通过 ClassLoader 加载这个特定的View的类，然后通过这个类的构造函数来实例化这个 View。这样子，我们单个 View 就被解析出来了，由于我们的 xml 是一个视图树，在 LayoutInflater 中，我们通过 `rInflate` 递归调用，来解析整个视图树。在将解析到的子 View 添加到它的 parent 中。\n\n总结：\n        LayoutInflater 加载布局文件就是通过 Android 提供的 pull 解析方式来一层一层解析布局文件，然后将最后生成的视图返回。由于解析也是需要一定时间，况且一个布局文件层级过多的话，解析的时间就会增加，这样就会导致页面卡顿。所以在实际开发中，我们应该尽量将布局文件少些层级，来保证 App 操作的流畅度。\n","slug":"LayoutInflater源码分析","published":1,"updated":"2021-01-23T15:44:55.449Z","comments":1,"layout":"post","photos":[],"link":"","_id":"ckk9w1mfi0007fw0i7hz94kzg","content":"<p>在 Android 开发中，LayoutInflater 经常被使用，它的作用就是将所需要的 xml 布局填充到我们的 View 对象中。<br>首先，我们看一下它的用法，获取其实例的方法有三种：<br><figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"comment\">// 1. 在 Activity 中获取 LayoutInflater：</span></div><div class=\"line\"> LayoutInflater layoutInflater = getLayoutInflater();</div><div class=\"line\"> <span class=\"comment\">// 2. 通过 LayoutInflater 的静态方法获取</span></div><div class=\"line\"> LayoutInflater layoutInflater = LayoutInflater.from(context);</div><div class=\"line\"> <span class=\"comment\">// 3 通过 Context 中的 getSystemService 方法获取</span></div><div class=\"line\"> LayoutInflater LayoutInflater = (LayoutInflater) context.getSystemService(Context.LAYOUT_INFLATER_SERVICE);</div></pre></td></tr></table></figure></p>\n<a id=\"more\"></a>\n<p>通过查看源码，我们可以发现此三种获取实例的方式最后都是通过第三种方式获取到 LayoutInflater 的实例的。我们来看看 ContextImpl 类中的 getSystemService 方法：<br><figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"meta\">@Override</span></div><div class=\"line\"><span class=\"function\"><span class=\"keyword\">public</span> Object <span class=\"title\">getSystemService</span><span class=\"params\">(String name)</span> </span>&#123;</div><div class=\"line\">    <span class=\"keyword\">return</span> SystemServiceRegistry.getSystemService(<span class=\"keyword\">this</span>, name);</div><div class=\"line\">&#125;</div></pre></td></tr></table></figure></p>\n<p>我们再看看 SystemServiceRegistry 类中的代码：<br><figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div><div class=\"line\">14</div><div class=\"line\">15</div><div class=\"line\">16</div><div class=\"line\">17</div><div class=\"line\">18</div><div class=\"line\">19</div><div class=\"line\">20</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"keyword\">static</span> &#123;</div><div class=\"line\">    <span class=\"comment\">//...省略部分代码</span></div><div class=\"line\"></div><div class=\"line\">    registerService(Context.LAYOUT_INFLATER_SERVICE, LayoutInflater.class,</div><div class=\"line\">            <span class=\"keyword\">new</span> CachedServiceFetcher&lt;LayoutInflater&gt;() &#123;</div><div class=\"line\">        <span class=\"meta\">@Override</span></div><div class=\"line\">        <span class=\"function\"><span class=\"keyword\">public</span> LayoutInflater <span class=\"title\">createService</span><span class=\"params\">(ContextImpl ctx)</span> </span>&#123;</div><div class=\"line\">            <span class=\"keyword\">return</span> <span class=\"keyword\">new</span> PhoneLayoutInflater(ctx.getOuterContext());</div><div class=\"line\">        &#125;&#125;);</div><div class=\"line\"></div><div class=\"line\">  <span class=\"comment\">//...省略部分代码</span></div><div class=\"line\">&#125;</div><div class=\"line\"></div><div class=\"line\"><span class=\"comment\">/**</span></div><div class=\"line\">* Gets a system service from a given context.</div><div class=\"line\">*/</div><div class=\"line\"><span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">static</span> Object <span class=\"title\">getSystemService</span><span class=\"params\">(ContextImpl ctx, String name)</span> </span>&#123;</div><div class=\"line\">    ServiceFetcher&lt;?&gt; fetcher = SYSTEM_SERVICE_FETCHERS.get(name);</div><div class=\"line\">    <span class=\"keyword\">return</span> fetcher != <span class=\"keyword\">null</span> ? fetcher.getService(ctx) : <span class=\"keyword\">null</span>;</div><div class=\"line\">&#125;</div></pre></td></tr></table></figure></p>\n<p>关于这部分内容，SystemServiceRegistry 在什么时候初始化，在什么时候注册这些服务，不是本文的主题，这里不做赘述。最关键的是，我们看到最终我们拿到的是 PhoneLayoutInflater 对象。我们先将这个对象放在这里，看看获取到的 LayoutInflater 接下来干的活。<br>我们在使用的时候都是调用了 inflater 方法：<br><figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div></pre></td><td class=\"code\"><pre><div class=\"line\">View view = inflater.inflate(layoutId, parent, attachToParent)</div></pre></td></tr></table></figure></p>\n<p>在 LayoutInflater 中，重载了几个 inflater 方法，最后都是调用了下面这个重载方法：<br><figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div><div class=\"line\">14</div><div class=\"line\">15</div><div class=\"line\">16</div><div class=\"line\">17</div><div class=\"line\">18</div><div class=\"line\">19</div><div class=\"line\">20</div><div class=\"line\">21</div><div class=\"line\">22</div><div class=\"line\">23</div><div class=\"line\">24</div><div class=\"line\">25</div><div class=\"line\">26</div><div class=\"line\">27</div><div class=\"line\">28</div><div class=\"line\">29</div><div class=\"line\">30</div><div class=\"line\">31</div><div class=\"line\">32</div><div class=\"line\">33</div><div class=\"line\">34</div><div class=\"line\">35</div><div class=\"line\">36</div><div class=\"line\">37</div><div class=\"line\">38</div><div class=\"line\">39</div><div class=\"line\">40</div><div class=\"line\">41</div><div class=\"line\">42</div><div class=\"line\">43</div><div class=\"line\">44</div><div class=\"line\">45</div><div class=\"line\">46</div><div class=\"line\">47</div><div class=\"line\">48</div><div class=\"line\">49</div><div class=\"line\">50</div><div class=\"line\">51</div><div class=\"line\">52</div><div class=\"line\">53</div><div class=\"line\">54</div><div class=\"line\">55</div><div class=\"line\">56</div><div class=\"line\">57</div><div class=\"line\">58</div><div class=\"line\">59</div><div class=\"line\">60</div><div class=\"line\">61</div><div class=\"line\">62</div><div class=\"line\">63</div><div class=\"line\">64</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"function\"><span class=\"keyword\">public</span> View <span class=\"title\">inflate</span><span class=\"params\">(XmlPullParser parser, @Nullable ViewGroup root, <span class=\"keyword\">boolean</span> attachToRoot)</span> </span>&#123;</div><div class=\"line\">        <span class=\"keyword\">synchronized</span> (mConstructorArgs) &#123;</div><div class=\"line\">            Trace.traceBegin(Trace.TRACE_TAG_VIEW, <span class=\"string\">\"inflate\"</span>);</div><div class=\"line\"></div><div class=\"line\">            <span class=\"keyword\">final</span> Context inflaterContext = mContext;</div><div class=\"line\">            <span class=\"keyword\">final</span> AttributeSet attrs = Xml.asAttributeSet(parser);</div><div class=\"line\">            <span class=\"comment\">// Context 对象</span></div><div class=\"line\">            Context lastContext = (Context) mConstructorArgs[<span class=\"number\">0</span>];</div><div class=\"line\">            mConstructorArgs[<span class=\"number\">0</span>] = inflaterContext;</div><div class=\"line\">            <span class=\"comment\">// 存储父视图</span></div><div class=\"line\">            View result = root;</div><div class=\"line\"></div><div class=\"line\">            <span class=\"keyword\">try</span> &#123;</div><div class=\"line\">                <span class=\"comment\">// Look for the root node.</span></div><div class=\"line\">                <span class=\"keyword\">int</span> type;</div><div class=\"line\">                <span class=\"keyword\">while</span> ((type = parser.next()) != XmlPullParser.START_TAG &amp;&amp;</div><div class=\"line\">                        type != XmlPullParser.END_DOCUMENT) &#123;</div><div class=\"line\">                    <span class=\"comment\">// Empty</span></div><div class=\"line\">                &#125;</div><div class=\"line\"></div><div class=\"line\">                <span class=\"keyword\">final</span> String name = parser.getName();</div><div class=\"line\">                <span class=\"comment\">// 解析 merge 标签</span></div><div class=\"line\">                <span class=\"keyword\">if</span> (TAG_MERGE.equals(name)) &#123;</div><div class=\"line\">                    <span class=\"keyword\">if</span> (root == <span class=\"keyword\">null</span> || !attachToRoot) &#123;</div><div class=\"line\">                        <span class=\"keyword\">throw</span> <span class=\"keyword\">new</span> InflateException(<span class=\"string\">\"&lt;merge /&gt; can be used only with a valid \"</span></div><div class=\"line\">                                + <span class=\"string\">\"ViewGroup root and attachToRoot=true\"</span>);</div><div class=\"line\">                    &#125;</div><div class=\"line\">                    rInflate(parser, root, inflaterContext, attrs, <span class=\"keyword\">false</span>);</div><div class=\"line\">                &#125; <span class=\"keyword\">else</span> &#123;</div><div class=\"line\">                    <span class=\"comment\">// Temp is the root view that was found in the xml</span></div><div class=\"line\">                    <span class=\"comment\">// 这里就是通过 xml 的 tag 来解析 layout 根视图</span></div><div class=\"line\">                    <span class=\"keyword\">final</span> View temp = createViewFromTag(root, name, inflaterContext, attrs);</div><div class=\"line\"></div><div class=\"line\">                    ViewGroup.LayoutParams params = <span class=\"keyword\">null</span>;</div><div class=\"line\"></div><div class=\"line\">                    <span class=\"keyword\">if</span> (root != <span class=\"keyword\">null</span>) &#123;</div><div class=\"line\">                        <span class=\"comment\">// Create layout params that match root, if supplied   生成布局参数</span></div><div class=\"line\">                        params = root.generateLayoutParams(attrs);</div><div class=\"line\">                        <span class=\"keyword\">if</span> (!attachToRoot) &#123;</div><div class=\"line\">                            <span class=\"comment\">// 如果  attachToRoot 为 false  给 temp 设置布局参数</span></div><div class=\"line\">                            temp.setLayoutParams(params);</div><div class=\"line\">                        &#125;</div><div class=\"line\">                    &#125;</div><div class=\"line\"></div><div class=\"line\">                    <span class=\"comment\">// Inflate all children under temp against its context. 解析 temp 下的所有子 View</span></div><div class=\"line\">                    rInflateChildren(parser, temp, attrs, <span class=\"keyword\">true</span>);</div><div class=\"line\"></div><div class=\"line\">                    <span class=\"comment\">// 如果 root 不为空，且 attachToRoot 为 true，将 temp 添加到 父视图</span></div><div class=\"line\">                    <span class=\"keyword\">if</span> (root != <span class=\"keyword\">null</span> &amp;&amp; attachToRoot) &#123;</div><div class=\"line\">                        root.addView(temp, params);</div><div class=\"line\">                    &#125;</div><div class=\"line\"></div><div class=\"line\">                    <span class=\"comment\">// 如果 root 为空或者 attachToRoot 为 false，返回的就是 temp</span></div><div class=\"line\">                    <span class=\"keyword\">if</span> (root == <span class=\"keyword\">null</span> || !attachToRoot) &#123;</div><div class=\"line\">                        result = temp;</div><div class=\"line\">                    &#125;</div><div class=\"line\">                &#125;</div><div class=\"line\"></div><div class=\"line\">            &#125; </div><div class=\"line\">            <span class=\"comment\">//省略 catch finaly 代码</span></div><div class=\"line\"></div><div class=\"line\">            <span class=\"keyword\">return</span> result;</div><div class=\"line\">        &#125;</div><div class=\"line\">    &#125;</div></pre></td></tr></table></figure></p>\n<p>这里的流程很清晰，首先会去解析 xml 中的根标签，如果是 merge，就会调用 rInflater 方法，将 merge 下的所有子 View 直接添加到根标签中；如果是普通元素，就会调用 <code>createViewFromTag</code> 方法来解析，再接着 调用 rInflater 对 temp 下的子 View 解析，并添加到 temp 下。最后就将解析到的根视图返回。我们关键来看看 <code>createViewFromTag</code> 方法：<br><figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div><div class=\"line\">14</div><div class=\"line\">15</div><div class=\"line\">16</div><div class=\"line\">17</div><div class=\"line\">18</div><div class=\"line\">19</div><div class=\"line\">20</div><div class=\"line\">21</div><div class=\"line\">22</div><div class=\"line\">23</div><div class=\"line\">24</div><div class=\"line\">25</div><div class=\"line\">26</div><div class=\"line\">27</div><div class=\"line\">28</div><div class=\"line\">29</div><div class=\"line\">30</div><div class=\"line\">31</div><div class=\"line\">32</div><div class=\"line\">33</div><div class=\"line\">34</div><div class=\"line\">35</div><div class=\"line\">36</div><div class=\"line\">37</div><div class=\"line\">38</div><div class=\"line\">39</div><div class=\"line\">40</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"function\">View <span class=\"title\">createViewFromTag</span><span class=\"params\">(View parent, String name, Context context, AttributeSet attrs,</span></span></div><div class=\"line\">            <span class=\"keyword\">boolean</span> ignoreThemeAttr) &#123;</div><div class=\"line\">        <span class=\"keyword\">if</span> (name.equals(<span class=\"string\">\"view\"</span>)) &#123;</div><div class=\"line\">            name = attrs.getAttributeValue(<span class=\"keyword\">null</span>, <span class=\"string\">\"class\"</span>);</div><div class=\"line\">        &#125;</div><div class=\"line\">        <span class=\"comment\">// ...代码省略</span></div><div class=\"line\">        <span class=\"keyword\">try</span> &#123;</div><div class=\"line\">            View view;</div><div class=\"line\">            <span class=\"keyword\">if</span> (mFactory2 != <span class=\"keyword\">null</span>) &#123;</div><div class=\"line\">                view = mFactory2.onCreateView(parent, name, context, attrs);</div><div class=\"line\">            &#125; <span class=\"keyword\">else</span> <span class=\"keyword\">if</span> (mFactory != <span class=\"keyword\">null</span>) &#123;</div><div class=\"line\">                view = mFactory.onCreateView(name, context, attrs);</div><div class=\"line\">            &#125; <span class=\"keyword\">else</span> &#123;</div><div class=\"line\">                view = <span class=\"keyword\">null</span>;</div><div class=\"line\">            &#125;</div><div class=\"line\"></div><div class=\"line\">            <span class=\"keyword\">if</span> (view == <span class=\"keyword\">null</span> &amp;&amp; mPrivateFactory != <span class=\"keyword\">null</span>) &#123;</div><div class=\"line\">                view = mPrivateFactory.onCreateView(parent, name, context, attrs);</div><div class=\"line\">            &#125;</div><div class=\"line\"></div><div class=\"line\">            <span class=\"keyword\">if</span> (view == <span class=\"keyword\">null</span>) &#123;</div><div class=\"line\">                <span class=\"keyword\">final</span> Object lastContext = mConstructorArgs[<span class=\"number\">0</span>];</div><div class=\"line\">                mConstructorArgs[<span class=\"number\">0</span>] = context;</div><div class=\"line\">                <span class=\"keyword\">try</span> &#123;</div><div class=\"line\">                    <span class=\"keyword\">if</span> (-<span class=\"number\">1</span> == name.indexOf(<span class=\"string\">'.'</span>)) &#123;</div><div class=\"line\">                        <span class=\"comment\">// 内置 View 控件的解析</span></div><div class=\"line\">                        view = onCreateView(parent, name, attrs);</div><div class=\"line\">                    &#125; <span class=\"keyword\">else</span> &#123;</div><div class=\"line\">                        <span class=\"comment\">// 自定义控件的解析</span></div><div class=\"line\">                        view = createView(name, <span class=\"keyword\">null</span>, attrs);</div><div class=\"line\">                    &#125;</div><div class=\"line\">                &#125; <span class=\"keyword\">finally</span> &#123;</div><div class=\"line\">                    mConstructorArgs[<span class=\"number\">0</span>] = lastContext;</div><div class=\"line\">                &#125;</div><div class=\"line\">            &#125;</div><div class=\"line\"></div><div class=\"line\">            <span class=\"keyword\">return</span> view;</div><div class=\"line\">        &#125; </div><div class=\"line\">        <span class=\"comment\">// ... 省略 catch 代码</span></div><div class=\"line\">    &#125;</div></pre></td></tr></table></figure></p>\n<p>这里，重点代码就是判断 View 是否为自带的控件，如果是自带的控件，就会将 name 拼全，这里就是 PhoneLayoutInflater 这个实现类起作用的时候了。<br>在 PhoneLayoutInflater 重写的 onCreateView 方法中，会将 “android.widget.”，”android.webkit.”， “android.app.” 这个几个前缀拼在 View 的 name 前面，然后调用 <code>createView</code> 方法来创建一个 View ：<br><figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div><div class=\"line\">14</div><div class=\"line\">15</div><div class=\"line\">16</div><div class=\"line\">17</div><div class=\"line\">18</div><div class=\"line\">19</div><div class=\"line\">20</div><div class=\"line\">21</div><div class=\"line\">22</div><div class=\"line\">23</div><div class=\"line\">24</div><div class=\"line\">25</div><div class=\"line\">26</div><div class=\"line\">27</div><div class=\"line\">28</div><div class=\"line\">29</div><div class=\"line\">30</div><div class=\"line\">31</div><div class=\"line\">32</div><div class=\"line\">33</div><div class=\"line\">34</div><div class=\"line\">35</div><div class=\"line\">36</div><div class=\"line\">37</div><div class=\"line\">38</div><div class=\"line\">39</div><div class=\"line\">40</div><div class=\"line\">41</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">final</span> View <span class=\"title\">createView</span><span class=\"params\">(String name, String prefix, AttributeSet attrs)</span></span></div><div class=\"line\">          <span class=\"keyword\">throws</span> ClassNotFoundException, InflateException &#123;</div><div class=\"line\">      <span class=\"comment\">// 从缓存中获取构造函数</span></div><div class=\"line\">      Constructor&lt;? extends View&gt; constructor = sConstructorMap.get(name);</div><div class=\"line\">      <span class=\"keyword\">if</span> (constructor != <span class=\"keyword\">null</span> &amp;&amp; !verifyClassLoader(constructor)) &#123;</div><div class=\"line\">          constructor = <span class=\"keyword\">null</span>;</div><div class=\"line\">          sConstructorMap.remove(name);</div><div class=\"line\">      &#125;</div><div class=\"line\">      Class&lt;? extends View&gt; clazz = <span class=\"keyword\">null</span>;</div><div class=\"line\"></div><div class=\"line\">      <span class=\"keyword\">try</span> &#123;</div><div class=\"line\">          Trace.traceBegin(Trace.TRACE_TAG_VIEW, name);</div><div class=\"line\"></div><div class=\"line\">          <span class=\"keyword\">if</span> (constructor == <span class=\"keyword\">null</span>) &#123;</div><div class=\"line\">              <span class=\"comment\">// 如果 prefix 不为空，构造完整的 View 路径，并且加载该类</span></div><div class=\"line\">              clazz = mContext.getClassLoader().loadClass(</div><div class=\"line\">                      prefix != <span class=\"keyword\">null</span> ? (prefix + name) : name).asSubclass(View.class);</div><div class=\"line\">              <span class=\"comment\">// ...代码省略</span></div><div class=\"line\">              <span class=\"comment\">// 获取构造函数</span></div><div class=\"line\">              constructor = clazz.getConstructor(mConstructorSignature);</div><div class=\"line\">              constructor.setAccessible(<span class=\"keyword\">true</span>);   </div><div class=\"line\">              <span class=\"comment\">// 将构造函数添加到缓存中</span></div><div class=\"line\">              sConstructorMap.put(name, constructor);</div><div class=\"line\">          &#125; <span class=\"keyword\">else</span> &#123;</div><div class=\"line\">             <span class=\"comment\">// ...代码省略</span></div><div class=\"line\">          &#125;</div><div class=\"line\"></div><div class=\"line\">          Object[] args = mConstructorArgs;</div><div class=\"line\">          args[<span class=\"number\">1</span>] = attrs;</div><div class=\"line\">          <span class=\"comment\">// 通过构造函数实例化View</span></div><div class=\"line\">          <span class=\"keyword\">final</span> View view = constructor.newInstance(args);</div><div class=\"line\">          <span class=\"keyword\">if</span> (view <span class=\"keyword\">instanceof</span> ViewStub) &#123;</div><div class=\"line\">              <span class=\"comment\">// Use the same context when inflating ViewStub later.</span></div><div class=\"line\">              <span class=\"keyword\">final</span> ViewStub viewStub = (ViewStub) view;</div><div class=\"line\">              viewStub.setLayoutInflater(cloneInContext((Context) args[<span class=\"number\">0</span>]));</div><div class=\"line\">          &#125;</div><div class=\"line\">          <span class=\"keyword\">return</span> view;</div><div class=\"line\"></div><div class=\"line\">      &#125; </div><div class=\"line\">      <span class=\"comment\">// 省略catch finaly 代码</span></div><div class=\"line\">  &#125;</div></pre></td></tr></table></figure></p>\n<p>这里主要功能就是通过 ClassLoader 加载这个特定的View的类，然后通过这个类的构造函数来实例化这个 View。这样子，我们单个 View 就被解析出来了，由于我们的 xml 是一个视图树，在 LayoutInflater 中，我们通过 <code>rInflate</code> 递归调用，来解析整个视图树。在将解析到的子 View 添加到它的 parent 中。</p>\n<p>总结：<br>        LayoutInflater 加载布局文件就是通过 Android 提供的 pull 解析方式来一层一层解析布局文件，然后将最后生成的视图返回。由于解析也是需要一定时间，况且一个布局文件层级过多的话，解析的时间就会增加，这样就会导致页面卡顿。所以在实际开发中，我们应该尽量将布局文件少些层级，来保证 App 操作的流畅度。</p>\n","excerpt":"<p>在 Android 开发中，LayoutInflater 经常被使用，它的作用就是将所需要的 xml 布局填充到我们的 View 对象中。<br>首先，我们看一下它的用法，获取其实例的方法有三种：<br><figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"comment\">// 1. 在 Activity 中获取 LayoutInflater：</span></div><div class=\"line\"> LayoutInflater layoutInflater = getLayoutInflater();</div><div class=\"line\"> <span class=\"comment\">// 2. 通过 LayoutInflater 的静态方法获取</span></div><div class=\"line\"> LayoutInflater layoutInflater = LayoutInflater.from(context);</div><div class=\"line\"> <span class=\"comment\">// 3 通过 Context 中的 getSystemService 方法获取</span></div><div class=\"line\"> LayoutInflater LayoutInflater = (LayoutInflater) context.getSystemService(Context.LAYOUT_INFLATER_SERVICE);</div></pre></td></tr></table></figure></p>","more":"<p>通过查看源码，我们可以发现此三种获取实例的方式最后都是通过第三种方式获取到 LayoutInflater 的实例的。我们来看看 ContextImpl 类中的 getSystemService 方法：<br><figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"meta\">@Override</span></div><div class=\"line\"><span class=\"function\"><span class=\"keyword\">public</span> Object <span class=\"title\">getSystemService</span><span class=\"params\">(String name)</span> </span>&#123;</div><div class=\"line\">    <span class=\"keyword\">return</span> SystemServiceRegistry.getSystemService(<span class=\"keyword\">this</span>, name);</div><div class=\"line\">&#125;</div></pre></td></tr></table></figure></p>\n<p>我们再看看 SystemServiceRegistry 类中的代码：<br><figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div><div class=\"line\">14</div><div class=\"line\">15</div><div class=\"line\">16</div><div class=\"line\">17</div><div class=\"line\">18</div><div class=\"line\">19</div><div class=\"line\">20</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"keyword\">static</span> &#123;</div><div class=\"line\">    <span class=\"comment\">//...省略部分代码</span></div><div class=\"line\"></div><div class=\"line\">    registerService(Context.LAYOUT_INFLATER_SERVICE, LayoutInflater.class,</div><div class=\"line\">            <span class=\"keyword\">new</span> CachedServiceFetcher&lt;LayoutInflater&gt;() &#123;</div><div class=\"line\">        <span class=\"meta\">@Override</span></div><div class=\"line\">        <span class=\"function\"><span class=\"keyword\">public</span> LayoutInflater <span class=\"title\">createService</span><span class=\"params\">(ContextImpl ctx)</span> </span>&#123;</div><div class=\"line\">            <span class=\"keyword\">return</span> <span class=\"keyword\">new</span> PhoneLayoutInflater(ctx.getOuterContext());</div><div class=\"line\">        &#125;&#125;);</div><div class=\"line\"></div><div class=\"line\">  <span class=\"comment\">//...省略部分代码</span></div><div class=\"line\">&#125;</div><div class=\"line\"></div><div class=\"line\"><span class=\"comment\">/**</div><div class=\"line\">* Gets a system service from a given context.</div><div class=\"line\">*/</span></div><div class=\"line\"><span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">static</span> Object <span class=\"title\">getSystemService</span><span class=\"params\">(ContextImpl ctx, String name)</span> </span>&#123;</div><div class=\"line\">    ServiceFetcher&lt;?&gt; fetcher = SYSTEM_SERVICE_FETCHERS.get(name);</div><div class=\"line\">    <span class=\"keyword\">return</span> fetcher != <span class=\"keyword\">null</span> ? fetcher.getService(ctx) : <span class=\"keyword\">null</span>;</div><div class=\"line\">&#125;</div></pre></td></tr></table></figure></p>\n<p>关于这部分内容，SystemServiceRegistry 在什么时候初始化，在什么时候注册这些服务，不是本文的主题，这里不做赘述。最关键的是，我们看到最终我们拿到的是 PhoneLayoutInflater 对象。我们先将这个对象放在这里，看看获取到的 LayoutInflater 接下来干的活。<br>我们在使用的时候都是调用了 inflater 方法：<br><figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div></pre></td><td class=\"code\"><pre><div class=\"line\">View view = inflater.inflate(layoutId, parent, attachToParent)</div></pre></td></tr></table></figure></p>\n<p>在 LayoutInflater 中，重载了几个 inflater 方法，最后都是调用了下面这个重载方法：<br><figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div><div class=\"line\">14</div><div class=\"line\">15</div><div class=\"line\">16</div><div class=\"line\">17</div><div class=\"line\">18</div><div class=\"line\">19</div><div class=\"line\">20</div><div class=\"line\">21</div><div class=\"line\">22</div><div class=\"line\">23</div><div class=\"line\">24</div><div class=\"line\">25</div><div class=\"line\">26</div><div class=\"line\">27</div><div class=\"line\">28</div><div class=\"line\">29</div><div class=\"line\">30</div><div class=\"line\">31</div><div class=\"line\">32</div><div class=\"line\">33</div><div class=\"line\">34</div><div class=\"line\">35</div><div class=\"line\">36</div><div class=\"line\">37</div><div class=\"line\">38</div><div class=\"line\">39</div><div class=\"line\">40</div><div class=\"line\">41</div><div class=\"line\">42</div><div class=\"line\">43</div><div class=\"line\">44</div><div class=\"line\">45</div><div class=\"line\">46</div><div class=\"line\">47</div><div class=\"line\">48</div><div class=\"line\">49</div><div class=\"line\">50</div><div class=\"line\">51</div><div class=\"line\">52</div><div class=\"line\">53</div><div class=\"line\">54</div><div class=\"line\">55</div><div class=\"line\">56</div><div class=\"line\">57</div><div class=\"line\">58</div><div class=\"line\">59</div><div class=\"line\">60</div><div class=\"line\">61</div><div class=\"line\">62</div><div class=\"line\">63</div><div class=\"line\">64</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"function\"><span class=\"keyword\">public</span> View <span class=\"title\">inflate</span><span class=\"params\">(XmlPullParser parser, @Nullable ViewGroup root, <span class=\"keyword\">boolean</span> attachToRoot)</span> </span>&#123;</div><div class=\"line\">        <span class=\"keyword\">synchronized</span> (mConstructorArgs) &#123;</div><div class=\"line\">            Trace.traceBegin(Trace.TRACE_TAG_VIEW, <span class=\"string\">\"inflate\"</span>);</div><div class=\"line\"></div><div class=\"line\">            <span class=\"keyword\">final</span> Context inflaterContext = mContext;</div><div class=\"line\">            <span class=\"keyword\">final</span> AttributeSet attrs = Xml.asAttributeSet(parser);</div><div class=\"line\">            <span class=\"comment\">// Context 对象</span></div><div class=\"line\">            Context lastContext = (Context) mConstructorArgs[<span class=\"number\">0</span>];</div><div class=\"line\">            mConstructorArgs[<span class=\"number\">0</span>] = inflaterContext;</div><div class=\"line\">            <span class=\"comment\">// 存储父视图</span></div><div class=\"line\">            View result = root;</div><div class=\"line\"></div><div class=\"line\">            <span class=\"keyword\">try</span> &#123;</div><div class=\"line\">                <span class=\"comment\">// Look for the root node.</span></div><div class=\"line\">                <span class=\"keyword\">int</span> type;</div><div class=\"line\">                <span class=\"keyword\">while</span> ((type = parser.next()) != XmlPullParser.START_TAG &amp;&amp;</div><div class=\"line\">                        type != XmlPullParser.END_DOCUMENT) &#123;</div><div class=\"line\">                    <span class=\"comment\">// Empty</span></div><div class=\"line\">                &#125;</div><div class=\"line\"></div><div class=\"line\">                <span class=\"keyword\">final</span> String name = parser.getName();</div><div class=\"line\">                <span class=\"comment\">// 解析 merge 标签</span></div><div class=\"line\">                <span class=\"keyword\">if</span> (TAG_MERGE.equals(name)) &#123;</div><div class=\"line\">                    <span class=\"keyword\">if</span> (root == <span class=\"keyword\">null</span> || !attachToRoot) &#123;</div><div class=\"line\">                        <span class=\"keyword\">throw</span> <span class=\"keyword\">new</span> InflateException(<span class=\"string\">\"&lt;merge /&gt; can be used only with a valid \"</span></div><div class=\"line\">                                + <span class=\"string\">\"ViewGroup root and attachToRoot=true\"</span>);</div><div class=\"line\">                    &#125;</div><div class=\"line\">                    rInflate(parser, root, inflaterContext, attrs, <span class=\"keyword\">false</span>);</div><div class=\"line\">                &#125; <span class=\"keyword\">else</span> &#123;</div><div class=\"line\">                    <span class=\"comment\">// Temp is the root view that was found in the xml</span></div><div class=\"line\">                    <span class=\"comment\">// 这里就是通过 xml 的 tag 来解析 layout 根视图</span></div><div class=\"line\">                    <span class=\"keyword\">final</span> View temp = createViewFromTag(root, name, inflaterContext, attrs);</div><div class=\"line\"></div><div class=\"line\">                    ViewGroup.LayoutParams params = <span class=\"keyword\">null</span>;</div><div class=\"line\"></div><div class=\"line\">                    <span class=\"keyword\">if</span> (root != <span class=\"keyword\">null</span>) &#123;</div><div class=\"line\">                        <span class=\"comment\">// Create layout params that match root, if supplied   生成布局参数</span></div><div class=\"line\">                        params = root.generateLayoutParams(attrs);</div><div class=\"line\">                        <span class=\"keyword\">if</span> (!attachToRoot) &#123;</div><div class=\"line\">                            <span class=\"comment\">// 如果  attachToRoot 为 false  给 temp 设置布局参数</span></div><div class=\"line\">                            temp.setLayoutParams(params);</div><div class=\"line\">                        &#125;</div><div class=\"line\">                    &#125;</div><div class=\"line\"></div><div class=\"line\">                    <span class=\"comment\">// Inflate all children under temp against its context. 解析 temp 下的所有子 View</span></div><div class=\"line\">                    rInflateChildren(parser, temp, attrs, <span class=\"keyword\">true</span>);</div><div class=\"line\"></div><div class=\"line\">                    <span class=\"comment\">// 如果 root 不为空，且 attachToRoot 为 true，将 temp 添加到 父视图</span></div><div class=\"line\">                    <span class=\"keyword\">if</span> (root != <span class=\"keyword\">null</span> &amp;&amp; attachToRoot) &#123;</div><div class=\"line\">                        root.addView(temp, params);</div><div class=\"line\">                    &#125;</div><div class=\"line\"></div><div class=\"line\">                    <span class=\"comment\">// 如果 root 为空或者 attachToRoot 为 false，返回的就是 temp</span></div><div class=\"line\">                    <span class=\"keyword\">if</span> (root == <span class=\"keyword\">null</span> || !attachToRoot) &#123;</div><div class=\"line\">                        result = temp;</div><div class=\"line\">                    &#125;</div><div class=\"line\">                &#125;</div><div class=\"line\"></div><div class=\"line\">            &#125; </div><div class=\"line\">            <span class=\"comment\">//省略 catch finaly 代码</span></div><div class=\"line\"></div><div class=\"line\">            <span class=\"keyword\">return</span> result;</div><div class=\"line\">        &#125;</div><div class=\"line\">    &#125;</div></pre></td></tr></table></figure></p>\n<p>这里的流程很清晰，首先会去解析 xml 中的根标签，如果是 merge，就会调用 rInflater 方法，将 merge 下的所有子 View 直接添加到根标签中；如果是普通元素，就会调用 <code>createViewFromTag</code> 方法来解析，再接着 调用 rInflater 对 temp 下的子 View 解析，并添加到 temp 下。最后就将解析到的根视图返回。我们关键来看看 <code>createViewFromTag</code> 方法：<br><figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div><div class=\"line\">14</div><div class=\"line\">15</div><div class=\"line\">16</div><div class=\"line\">17</div><div class=\"line\">18</div><div class=\"line\">19</div><div class=\"line\">20</div><div class=\"line\">21</div><div class=\"line\">22</div><div class=\"line\">23</div><div class=\"line\">24</div><div class=\"line\">25</div><div class=\"line\">26</div><div class=\"line\">27</div><div class=\"line\">28</div><div class=\"line\">29</div><div class=\"line\">30</div><div class=\"line\">31</div><div class=\"line\">32</div><div class=\"line\">33</div><div class=\"line\">34</div><div class=\"line\">35</div><div class=\"line\">36</div><div class=\"line\">37</div><div class=\"line\">38</div><div class=\"line\">39</div><div class=\"line\">40</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"function\">View <span class=\"title\">createViewFromTag</span><span class=\"params\">(View parent, String name, Context context, AttributeSet attrs,</div><div class=\"line\">            <span class=\"keyword\">boolean</span> ignoreThemeAttr)</span> </span>&#123;</div><div class=\"line\">        <span class=\"keyword\">if</span> (name.equals(<span class=\"string\">\"view\"</span>)) &#123;</div><div class=\"line\">            name = attrs.getAttributeValue(<span class=\"keyword\">null</span>, <span class=\"string\">\"class\"</span>);</div><div class=\"line\">        &#125;</div><div class=\"line\">        <span class=\"comment\">// ...代码省略</span></div><div class=\"line\">        <span class=\"keyword\">try</span> &#123;</div><div class=\"line\">            View view;</div><div class=\"line\">            <span class=\"keyword\">if</span> (mFactory2 != <span class=\"keyword\">null</span>) &#123;</div><div class=\"line\">                view = mFactory2.onCreateView(parent, name, context, attrs);</div><div class=\"line\">            &#125; <span class=\"keyword\">else</span> <span class=\"keyword\">if</span> (mFactory != <span class=\"keyword\">null</span>) &#123;</div><div class=\"line\">                view = mFactory.onCreateView(name, context, attrs);</div><div class=\"line\">            &#125; <span class=\"keyword\">else</span> &#123;</div><div class=\"line\">                view = <span class=\"keyword\">null</span>;</div><div class=\"line\">            &#125;</div><div class=\"line\"></div><div class=\"line\">            <span class=\"keyword\">if</span> (view == <span class=\"keyword\">null</span> &amp;&amp; mPrivateFactory != <span class=\"keyword\">null</span>) &#123;</div><div class=\"line\">                view = mPrivateFactory.onCreateView(parent, name, context, attrs);</div><div class=\"line\">            &#125;</div><div class=\"line\"></div><div class=\"line\">            <span class=\"keyword\">if</span> (view == <span class=\"keyword\">null</span>) &#123;</div><div class=\"line\">                <span class=\"keyword\">final</span> Object lastContext = mConstructorArgs[<span class=\"number\">0</span>];</div><div class=\"line\">                mConstructorArgs[<span class=\"number\">0</span>] = context;</div><div class=\"line\">                <span class=\"keyword\">try</span> &#123;</div><div class=\"line\">                    <span class=\"keyword\">if</span> (-<span class=\"number\">1</span> == name.indexOf(<span class=\"string\">'.'</span>)) &#123;</div><div class=\"line\">                        <span class=\"comment\">// 内置 View 控件的解析</span></div><div class=\"line\">                        view = onCreateView(parent, name, attrs);</div><div class=\"line\">                    &#125; <span class=\"keyword\">else</span> &#123;</div><div class=\"line\">                        <span class=\"comment\">// 自定义控件的解析</span></div><div class=\"line\">                        view = createView(name, <span class=\"keyword\">null</span>, attrs);</div><div class=\"line\">                    &#125;</div><div class=\"line\">                &#125; <span class=\"keyword\">finally</span> &#123;</div><div class=\"line\">                    mConstructorArgs[<span class=\"number\">0</span>] = lastContext;</div><div class=\"line\">                &#125;</div><div class=\"line\">            &#125;</div><div class=\"line\"></div><div class=\"line\">            <span class=\"keyword\">return</span> view;</div><div class=\"line\">        &#125; </div><div class=\"line\">        <span class=\"comment\">// ... 省略 catch 代码</span></div><div class=\"line\">    &#125;</div></pre></td></tr></table></figure></p>\n<p>这里，重点代码就是判断 View 是否为自带的控件，如果是自带的控件，就会将 name 拼全，这里就是 PhoneLayoutInflater 这个实现类起作用的时候了。<br>在 PhoneLayoutInflater 重写的 onCreateView 方法中，会将 “android.widget.”，”android.webkit.”， “android.app.” 这个几个前缀拼在 View 的 name 前面，然后调用 <code>createView</code> 方法来创建一个 View ：<br><figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div><div class=\"line\">14</div><div class=\"line\">15</div><div class=\"line\">16</div><div class=\"line\">17</div><div class=\"line\">18</div><div class=\"line\">19</div><div class=\"line\">20</div><div class=\"line\">21</div><div class=\"line\">22</div><div class=\"line\">23</div><div class=\"line\">24</div><div class=\"line\">25</div><div class=\"line\">26</div><div class=\"line\">27</div><div class=\"line\">28</div><div class=\"line\">29</div><div class=\"line\">30</div><div class=\"line\">31</div><div class=\"line\">32</div><div class=\"line\">33</div><div class=\"line\">34</div><div class=\"line\">35</div><div class=\"line\">36</div><div class=\"line\">37</div><div class=\"line\">38</div><div class=\"line\">39</div><div class=\"line\">40</div><div class=\"line\">41</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">final</span> View <span class=\"title\">createView</span><span class=\"params\">(String name, String prefix, AttributeSet attrs)</span></div><div class=\"line\">          <span class=\"keyword\">throws</span> ClassNotFoundException, InflateException </span>&#123;</div><div class=\"line\">      <span class=\"comment\">// 从缓存中获取构造函数</span></div><div class=\"line\">      Constructor&lt;? extends View&gt; constructor = sConstructorMap.get(name);</div><div class=\"line\">      <span class=\"keyword\">if</span> (constructor != <span class=\"keyword\">null</span> &amp;&amp; !verifyClassLoader(constructor)) &#123;</div><div class=\"line\">          constructor = <span class=\"keyword\">null</span>;</div><div class=\"line\">          sConstructorMap.remove(name);</div><div class=\"line\">      &#125;</div><div class=\"line\">      Class&lt;? extends View&gt; clazz = <span class=\"keyword\">null</span>;</div><div class=\"line\"></div><div class=\"line\">      <span class=\"keyword\">try</span> &#123;</div><div class=\"line\">          Trace.traceBegin(Trace.TRACE_TAG_VIEW, name);</div><div class=\"line\"></div><div class=\"line\">          <span class=\"keyword\">if</span> (constructor == <span class=\"keyword\">null</span>) &#123;</div><div class=\"line\">              <span class=\"comment\">// 如果 prefix 不为空，构造完整的 View 路径，并且加载该类</span></div><div class=\"line\">              clazz = mContext.getClassLoader().loadClass(</div><div class=\"line\">                      prefix != <span class=\"keyword\">null</span> ? (prefix + name) : name).asSubclass(View.class);</div><div class=\"line\">              <span class=\"comment\">// ...代码省略</span></div><div class=\"line\">              <span class=\"comment\">// 获取构造函数</span></div><div class=\"line\">              constructor = clazz.getConstructor(mConstructorSignature);</div><div class=\"line\">              constructor.setAccessible(<span class=\"keyword\">true</span>);   </div><div class=\"line\">              <span class=\"comment\">// 将构造函数添加到缓存中</span></div><div class=\"line\">              sConstructorMap.put(name, constructor);</div><div class=\"line\">          &#125; <span class=\"keyword\">else</span> &#123;</div><div class=\"line\">             <span class=\"comment\">// ...代码省略</span></div><div class=\"line\">          &#125;</div><div class=\"line\"></div><div class=\"line\">          Object[] args = mConstructorArgs;</div><div class=\"line\">          args[<span class=\"number\">1</span>] = attrs;</div><div class=\"line\">          <span class=\"comment\">// 通过构造函数实例化View</span></div><div class=\"line\">          <span class=\"keyword\">final</span> View view = constructor.newInstance(args);</div><div class=\"line\">          <span class=\"keyword\">if</span> (view <span class=\"keyword\">instanceof</span> ViewStub) &#123;</div><div class=\"line\">              <span class=\"comment\">// Use the same context when inflating ViewStub later.</span></div><div class=\"line\">              <span class=\"keyword\">final</span> ViewStub viewStub = (ViewStub) view;</div><div class=\"line\">              viewStub.setLayoutInflater(cloneInContext((Context) args[<span class=\"number\">0</span>]));</div><div class=\"line\">          &#125;</div><div class=\"line\">          <span class=\"keyword\">return</span> view;</div><div class=\"line\"></div><div class=\"line\">      &#125; </div><div class=\"line\">      <span class=\"comment\">// 省略catch finaly 代码</span></div><div class=\"line\">  &#125;</div></pre></td></tr></table></figure></p>\n<p>这里主要功能就是通过 ClassLoader 加载这个特定的View的类，然后通过这个类的构造函数来实例化这个 View。这样子，我们单个 View 就被解析出来了，由于我们的 xml 是一个视图树，在 LayoutInflater 中，我们通过 <code>rInflate</code> 递归调用，来解析整个视图树。在将解析到的子 View 添加到它的 parent 中。</p>\n<p>总结：<br>        LayoutInflater 加载布局文件就是通过 Android 提供的 pull 解析方式来一层一层解析布局文件，然后将最后生成的视图返回。由于解析也是需要一定时间，况且一个布局文件层级过多的话，解析的时间就会增加，这样就会导致页面卡顿。所以在实际开发中，我们应该尽量将布局文件少些层级，来保证 App 操作的流畅度。</p>"},{"title":"View的状态保存和恢复","date":"2017-01-22T14:05:43.000Z","_content":">在写自定义控件的时候发现一个问题，在控件中设置了变量来控制控件的状态，但是在屏幕旋转的时候，activity经历了销毁重启，此时自定义控件中的状态也随之重置了。\n>\n>为了保证在屏幕旋转的时候，控件的状态保持不变，可以通过重写**View#onSaveInstanceState**和**View#onRestoreInstanceState**来保证自定义控件的状态在重启的时候得到保留。\n>\n>通过这个小问题的解决，对View的保存和恢复状态有了一个了解。本篇文章只针对于View的保存和恢复。\n\n<!--more-->\n## 一、保存状态流程\n###  Activity#onSaveInstaceState\n```java\nprotected void onSaveInstanceState(Bundle outState) {\n\t//将view树的状态保存在bundle中\n\toutState.putBundle(WINDOW_HIERARCHY_TAG, mWindow.saveHierarchyState());\n\tParcelable p = mFragments.saveAllState();\n\t\tif (p != null) {\n\t\toutState.putParcelable(FRAGMENTS_TAG, p);\n\t}\n\tgetApplication().dispatchActivitySaveInstanceState(this, outState);\n}\n```\n通过WINDOW\\_HIERARCHY\\_TAG这个key来保存view树的数据，这里Window的实现类是PhoneWindow.\n\n### PhoneWindow#saveHierarchyState\n```java\n@Override\npublic Bundle saveHierarchyState() {\n\tBundle outState = new Bundle();\n\tif (mContentParent == null) {\n\t\treturn outState;\n\t}\n\t\t\n\tSparseArray<Parcelable> states = new SparseArray<Parcelable>();\n\tmContentParent.saveHierarchyState(states);\n\toutState.putSparseParcelableArray(VIEWS_TAG, states);\n\t// save the focused view id\n\tView focusedView = mContentParent.findFocus();\n\tif (focusedView != null) {\n\t\tif (focusedView.getId() != View.NO_ID) {\n\t\t\toutState.putInt(FOCUSED_ID_TAG, focusedView.getId());\n\t\t} else {\n\t\t\tif (false) {\n\t\t\t\tLog.d(TAG, \"couldn't save which view has focus because the focused view \"\n\t\t\t\t\t\t+ focusedView + \" has no id.\");\n\t\t\t}\n\t\t}\n\t}\n\t// save the panels\n\tSparseArray<Parcelable> panelStates = new SparseArray<Parcelable>();\n\tsavePanelState(panelStates);\n\tif (panelStates.size() > 0) {\n\t\toutState.putSparseParcelableArray(PANELS_TAG, panelStates);\n\t}\n\tif (mDecorContentParent != null) {\n\t\tSparseArray<Parcelable> actionBarStates = new SparseArray<Parcelable>();\n\t\tmDecorContentParent.saveToolbarHierarchyState(actionBarStates);\n\t\toutState.putSparseParcelableArray(ACTION_BAR_TAG, actionBarStates);\n\t}\n\treturn outState;\n}\n```\n这里的SparseArray类似HashMap，接着调用了mContentParent的saveHierarchyState()方法，并把结果放进outState中并返回。这里的mContentParent是DecorView的子元素或者其自身，这里可以把mContentParent看做整个View树的顶层视图，由于mContentParent是一个ViewGroup，但是ViewGroup没有重写saveHierarchyState方法,那么这里调用的便是\n\n### ViewGroup#saveHierarchyState:\n```java\npublic void saveHierarchyState(SparseArray<Parcelable> container) {\n\tdispatchSaveInstanceState(container);\n}\n```\n分发到 各个子view，去保存各个子view的数据\n### View#saveHierarchyState:\n```java\nprotected void dispatchSaveInstanceState(SparseArray<Parcelable> container) {\n\tif (mID != NO_ID && (mViewFlags & SAVE_DISABLED_MASK) == 0) {\n\t\tmPrivateFlags &= ~PFLAG_SAVE_STATE_CALLED;\n\t\tParcelable state = onSaveInstanceState();\n\t\tif ((mPrivateFlags & PFLAG_SAVE_STATE_CALLED) == 0) {\n\t\t\tthrow new IllegalStateException(\n\t\t\t\t\t\"Derived class did not call      super.onSaveInstanceState()\");\n\t\t}\n\t\tif (state != null) {\n\t\t\t// Log.i(\"View\", \"Freezing #\" + Integer.toHexString(mID)\n\t\t\t// + \": \" + state);\n\t\t\tcontainer.put(mID, state);\n\t\t}\n\t}\n}\n```\n\n这里首先判断当前View是不是有一个ID以及saveEnable属性，接着下面便调用到了View#onSaveInstanceState()方法，也即我们的自定义View需要重写的方法，这个方法返回Parcelable对象，即可序列化对象，最后把该Parcelable对象放进了SparseArray内，key是该View的id。\n\n\n>由此可知，如果一个View需要保存状态，那么至少需要以下两个条件：\n>\n1.  必须给view设置一个id\n2.  view的saveEnable属性必须是true\n\n## 二、恢复状态流程\n### Activity#onRestoreInstanceState\n```java\nprotected void onRestoreInstanceState(Bundle savedInstanceState) {\n\tif (mWindow != null) {\n\t\tBundle windowState = savedInstanceState.getBundle(WINDOW_HIERARCHY_TAG);\n\t\tif (windowState != null) {\n\t\t\tmWindow.restoreHierarchyState(windowState);\n\t\t}\n\t}\n}\n```\n先是根据WINDOW\\_HIERARCHY\\_TAG这个key获取Bundle对应的数据，即View树数据，接着调用mWindow.restoreHierarchyState方法，我们继续看\n\n### PhoneWindow#restoreHierarchyState：\n```java\n@Override\n\tpublic void restoreHierarchyState(Bundle savedInstanceState) {\n\tSparseArray<Parcelable> savedStates\n\t\t\t= savedInstanceState.getSparseParcelableArray(VIEWS_TAG);\n\tif (savedStates != null) {\n\t\tmContentParent.restoreHierarchyState(savedStates);\n\t}\n\t//省略...\n}\n```\n从Bundle里面根据VIEWS\\_TAG来获取SparseArray，这个之前我们也说过了，这就是View树数据所对应的SparseArray，接着调用mContentParent.restoreHierarchyState，到这里我们也知道接下来应该是调用**View#restoreHierarchyState**方法，而就如保存状态一样，恢复状态也需要把事件分发给ViewGroup的所有子View，所以在restoreHierarchyState方法里面又调用到了 \n\n### ViewGroup#dispatchRestoreInstanceState:\n```java\n@Override\nprotected void dispatchRestoreInstanceState(SparseArray<Parcelable> container) {\n\t//调用View的dispatchRestoreInstanceState，目的是恢复ViewGroup自身的状态\n\tsuper.dispatchRestoreInstanceState(container);\n\tfinal int count = mChildrenCount;\n\tfinal View[] children = mChildren;\n\t//遍历所有子View，逐个恢复它们的状态\n\tfor (int i = 0; i < count; i++) {\n\t\tView c = children[i];\n\t\tif ((c.mViewFlags & PARENT_SAVE_DISABLED_MASK) != PARENT_SAVE_DISABLED) {\n\t\t\tc.dispatchRestoreInstanceState(container);\n\t\t}\n\t}\n}\n```\n可以看出，代码和dispatchOnSaveInstanceState方法基本类似，接着我们看 \n  \n### View#dispatchRestoreInstanceState:\n```java\nprotected void dispatchRestoreInstanceState(SparseArray<Parcelable> container) {\n\tif (mID != NO_ID) {\n\t\tParcelable state = container.get(mID);\n\t\tif (state != null) {\n\t\t\tmPrivateFlags &= ~PFLAG_SAVE_STATE_CALLED;\n\t\t\tonRestoreInstanceState(state);\n\t\t}\n\t}\n}\t\n```\n这里根据View的Id在SparseArray中获得对应的Parcelable对象，即视图数据，接着调用了**View#onRestoreInstanceState(Parcelable)**方法，交给每一个View来自行恢复数据，至此，View树的数据恢复解析完毕。\n\n>一般对于自定义View来说，我们会重写**onSaveInstanceState()**和**onRestoreInstanceState(Parcelable)**方法，来处理我们需要恢复的数据。\n\n## 参考文章：\n>1. [Android 视图树&View状态保存](http://www.jianshu.com/p/4c1a6d382a85)\n>2. [Android View状态保存 ](http://blog.csdn.net/hp910315/article/details/51890813)\n>3. [Android状态保存与恢复流程 完全解析](http://www.jianshu.com/p/58579627f70a)","source":"_posts/View的状态保存和恢复.md","raw":"---\ntitle: View的状态保存和恢复\ndate: 2017-01-22 22:05:43\ntags: Android\ncategories: Android\n---\n>在写自定义控件的时候发现一个问题，在控件中设置了变量来控制控件的状态，但是在屏幕旋转的时候，activity经历了销毁重启，此时自定义控件中的状态也随之重置了。\n>\n>为了保证在屏幕旋转的时候，控件的状态保持不变，可以通过重写**View#onSaveInstanceState**和**View#onRestoreInstanceState**来保证自定义控件的状态在重启的时候得到保留。\n>\n>通过这个小问题的解决，对View的保存和恢复状态有了一个了解。本篇文章只针对于View的保存和恢复。\n\n<!--more-->\n## 一、保存状态流程\n###  Activity#onSaveInstaceState\n```java\nprotected void onSaveInstanceState(Bundle outState) {\n\t//将view树的状态保存在bundle中\n\toutState.putBundle(WINDOW_HIERARCHY_TAG, mWindow.saveHierarchyState());\n\tParcelable p = mFragments.saveAllState();\n\t\tif (p != null) {\n\t\toutState.putParcelable(FRAGMENTS_TAG, p);\n\t}\n\tgetApplication().dispatchActivitySaveInstanceState(this, outState);\n}\n```\n通过WINDOW\\_HIERARCHY\\_TAG这个key来保存view树的数据，这里Window的实现类是PhoneWindow.\n\n### PhoneWindow#saveHierarchyState\n```java\n@Override\npublic Bundle saveHierarchyState() {\n\tBundle outState = new Bundle();\n\tif (mContentParent == null) {\n\t\treturn outState;\n\t}\n\t\t\n\tSparseArray<Parcelable> states = new SparseArray<Parcelable>();\n\tmContentParent.saveHierarchyState(states);\n\toutState.putSparseParcelableArray(VIEWS_TAG, states);\n\t// save the focused view id\n\tView focusedView = mContentParent.findFocus();\n\tif (focusedView != null) {\n\t\tif (focusedView.getId() != View.NO_ID) {\n\t\t\toutState.putInt(FOCUSED_ID_TAG, focusedView.getId());\n\t\t} else {\n\t\t\tif (false) {\n\t\t\t\tLog.d(TAG, \"couldn't save which view has focus because the focused view \"\n\t\t\t\t\t\t+ focusedView + \" has no id.\");\n\t\t\t}\n\t\t}\n\t}\n\t// save the panels\n\tSparseArray<Parcelable> panelStates = new SparseArray<Parcelable>();\n\tsavePanelState(panelStates);\n\tif (panelStates.size() > 0) {\n\t\toutState.putSparseParcelableArray(PANELS_TAG, panelStates);\n\t}\n\tif (mDecorContentParent != null) {\n\t\tSparseArray<Parcelable> actionBarStates = new SparseArray<Parcelable>();\n\t\tmDecorContentParent.saveToolbarHierarchyState(actionBarStates);\n\t\toutState.putSparseParcelableArray(ACTION_BAR_TAG, actionBarStates);\n\t}\n\treturn outState;\n}\n```\n这里的SparseArray类似HashMap，接着调用了mContentParent的saveHierarchyState()方法，并把结果放进outState中并返回。这里的mContentParent是DecorView的子元素或者其自身，这里可以把mContentParent看做整个View树的顶层视图，由于mContentParent是一个ViewGroup，但是ViewGroup没有重写saveHierarchyState方法,那么这里调用的便是\n\n### ViewGroup#saveHierarchyState:\n```java\npublic void saveHierarchyState(SparseArray<Parcelable> container) {\n\tdispatchSaveInstanceState(container);\n}\n```\n分发到 各个子view，去保存各个子view的数据\n### View#saveHierarchyState:\n```java\nprotected void dispatchSaveInstanceState(SparseArray<Parcelable> container) {\n\tif (mID != NO_ID && (mViewFlags & SAVE_DISABLED_MASK) == 0) {\n\t\tmPrivateFlags &= ~PFLAG_SAVE_STATE_CALLED;\n\t\tParcelable state = onSaveInstanceState();\n\t\tif ((mPrivateFlags & PFLAG_SAVE_STATE_CALLED) == 0) {\n\t\t\tthrow new IllegalStateException(\n\t\t\t\t\t\"Derived class did not call      super.onSaveInstanceState()\");\n\t\t}\n\t\tif (state != null) {\n\t\t\t// Log.i(\"View\", \"Freezing #\" + Integer.toHexString(mID)\n\t\t\t// + \": \" + state);\n\t\t\tcontainer.put(mID, state);\n\t\t}\n\t}\n}\n```\n\n这里首先判断当前View是不是有一个ID以及saveEnable属性，接着下面便调用到了View#onSaveInstanceState()方法，也即我们的自定义View需要重写的方法，这个方法返回Parcelable对象，即可序列化对象，最后把该Parcelable对象放进了SparseArray内，key是该View的id。\n\n\n>由此可知，如果一个View需要保存状态，那么至少需要以下两个条件：\n>\n1.  必须给view设置一个id\n2.  view的saveEnable属性必须是true\n\n## 二、恢复状态流程\n### Activity#onRestoreInstanceState\n```java\nprotected void onRestoreInstanceState(Bundle savedInstanceState) {\n\tif (mWindow != null) {\n\t\tBundle windowState = savedInstanceState.getBundle(WINDOW_HIERARCHY_TAG);\n\t\tif (windowState != null) {\n\t\t\tmWindow.restoreHierarchyState(windowState);\n\t\t}\n\t}\n}\n```\n先是根据WINDOW\\_HIERARCHY\\_TAG这个key获取Bundle对应的数据，即View树数据，接着调用mWindow.restoreHierarchyState方法，我们继续看\n\n### PhoneWindow#restoreHierarchyState：\n```java\n@Override\n\tpublic void restoreHierarchyState(Bundle savedInstanceState) {\n\tSparseArray<Parcelable> savedStates\n\t\t\t= savedInstanceState.getSparseParcelableArray(VIEWS_TAG);\n\tif (savedStates != null) {\n\t\tmContentParent.restoreHierarchyState(savedStates);\n\t}\n\t//省略...\n}\n```\n从Bundle里面根据VIEWS\\_TAG来获取SparseArray，这个之前我们也说过了，这就是View树数据所对应的SparseArray，接着调用mContentParent.restoreHierarchyState，到这里我们也知道接下来应该是调用**View#restoreHierarchyState**方法，而就如保存状态一样，恢复状态也需要把事件分发给ViewGroup的所有子View，所以在restoreHierarchyState方法里面又调用到了 \n\n### ViewGroup#dispatchRestoreInstanceState:\n```java\n@Override\nprotected void dispatchRestoreInstanceState(SparseArray<Parcelable> container) {\n\t//调用View的dispatchRestoreInstanceState，目的是恢复ViewGroup自身的状态\n\tsuper.dispatchRestoreInstanceState(container);\n\tfinal int count = mChildrenCount;\n\tfinal View[] children = mChildren;\n\t//遍历所有子View，逐个恢复它们的状态\n\tfor (int i = 0; i < count; i++) {\n\t\tView c = children[i];\n\t\tif ((c.mViewFlags & PARENT_SAVE_DISABLED_MASK) != PARENT_SAVE_DISABLED) {\n\t\t\tc.dispatchRestoreInstanceState(container);\n\t\t}\n\t}\n}\n```\n可以看出，代码和dispatchOnSaveInstanceState方法基本类似，接着我们看 \n  \n### View#dispatchRestoreInstanceState:\n```java\nprotected void dispatchRestoreInstanceState(SparseArray<Parcelable> container) {\n\tif (mID != NO_ID) {\n\t\tParcelable state = container.get(mID);\n\t\tif (state != null) {\n\t\t\tmPrivateFlags &= ~PFLAG_SAVE_STATE_CALLED;\n\t\t\tonRestoreInstanceState(state);\n\t\t}\n\t}\n}\t\n```\n这里根据View的Id在SparseArray中获得对应的Parcelable对象，即视图数据，接着调用了**View#onRestoreInstanceState(Parcelable)**方法，交给每一个View来自行恢复数据，至此，View树的数据恢复解析完毕。\n\n>一般对于自定义View来说，我们会重写**onSaveInstanceState()**和**onRestoreInstanceState(Parcelable)**方法，来处理我们需要恢复的数据。\n\n## 参考文章：\n>1. [Android 视图树&View状态保存](http://www.jianshu.com/p/4c1a6d382a85)\n>2. [Android View状态保存 ](http://blog.csdn.net/hp910315/article/details/51890813)\n>3. [Android状态保存与恢复流程 完全解析](http://www.jianshu.com/p/58579627f70a)","slug":"View的状态保存和恢复","published":1,"updated":"2021-01-23T15:44:55.449Z","comments":1,"layout":"post","photos":[],"link":"","_id":"ckk9w1mfj0008fw0i0j82wjsr","content":"<blockquote>\n<p>在写自定义控件的时候发现一个问题，在控件中设置了变量来控制控件的状态，但是在屏幕旋转的时候，activity经历了销毁重启，此时自定义控件中的状态也随之重置了。</p>\n<p>为了保证在屏幕旋转的时候，控件的状态保持不变，可以通过重写<strong>View#onSaveInstanceState</strong>和<strong>View#onRestoreInstanceState</strong>来保证自定义控件的状态在重启的时候得到保留。</p>\n<p>通过这个小问题的解决，对View的保存和恢复状态有了一个了解。本篇文章只针对于View的保存和恢复。</p>\n</blockquote>\n<a id=\"more\"></a>\n<h2 id=\"一、保存状态流程\"><a href=\"#一、保存状态流程\" class=\"headerlink\" title=\"一、保存状态流程\"></a>一、保存状态流程</h2><h3 id=\"Activity-onSaveInstaceState\"><a href=\"#Activity-onSaveInstaceState\" class=\"headerlink\" title=\"Activity#onSaveInstaceState\"></a>Activity#onSaveInstaceState</h3><figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"function\"><span class=\"keyword\">protected</span> <span class=\"keyword\">void</span> <span class=\"title\">onSaveInstanceState</span><span class=\"params\">(Bundle outState)</span> </span>&#123;</div><div class=\"line\">\t<span class=\"comment\">//将view树的状态保存在bundle中</span></div><div class=\"line\">\toutState.putBundle(WINDOW_HIERARCHY_TAG, mWindow.saveHierarchyState());</div><div class=\"line\">\tParcelable p = mFragments.saveAllState();</div><div class=\"line\">\t\t<span class=\"keyword\">if</span> (p != <span class=\"keyword\">null</span>) &#123;</div><div class=\"line\">\t\toutState.putParcelable(FRAGMENTS_TAG, p);</div><div class=\"line\">\t&#125;</div><div class=\"line\">\tgetApplication().dispatchActivitySaveInstanceState(<span class=\"keyword\">this</span>, outState);</div><div class=\"line\">&#125;</div></pre></td></tr></table></figure>\n<p>通过WINDOW_HIERARCHY_TAG这个key来保存view树的数据，这里Window的实现类是PhoneWindow.</p>\n<h3 id=\"PhoneWindow-saveHierarchyState\"><a href=\"#PhoneWindow-saveHierarchyState\" class=\"headerlink\" title=\"PhoneWindow#saveHierarchyState\"></a>PhoneWindow#saveHierarchyState</h3><figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div><div class=\"line\">14</div><div class=\"line\">15</div><div class=\"line\">16</div><div class=\"line\">17</div><div class=\"line\">18</div><div class=\"line\">19</div><div class=\"line\">20</div><div class=\"line\">21</div><div class=\"line\">22</div><div class=\"line\">23</div><div class=\"line\">24</div><div class=\"line\">25</div><div class=\"line\">26</div><div class=\"line\">27</div><div class=\"line\">28</div><div class=\"line\">29</div><div class=\"line\">30</div><div class=\"line\">31</div><div class=\"line\">32</div><div class=\"line\">33</div><div class=\"line\">34</div><div class=\"line\">35</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"meta\">@Override</span></div><div class=\"line\"><span class=\"function\"><span class=\"keyword\">public</span> Bundle <span class=\"title\">saveHierarchyState</span><span class=\"params\">()</span> </span>&#123;</div><div class=\"line\">\tBundle outState = <span class=\"keyword\">new</span> Bundle();</div><div class=\"line\">\t<span class=\"keyword\">if</span> (mContentParent == <span class=\"keyword\">null</span>) &#123;</div><div class=\"line\">\t\t<span class=\"keyword\">return</span> outState;</div><div class=\"line\">\t&#125;</div><div class=\"line\">\t\t</div><div class=\"line\">\tSparseArray&lt;Parcelable&gt; states = <span class=\"keyword\">new</span> SparseArray&lt;Parcelable&gt;();</div><div class=\"line\">\tmContentParent.saveHierarchyState(states);</div><div class=\"line\">\toutState.putSparseParcelableArray(VIEWS_TAG, states);</div><div class=\"line\">\t<span class=\"comment\">// save the focused view id</span></div><div class=\"line\">\tView focusedView = mContentParent.findFocus();</div><div class=\"line\">\t<span class=\"keyword\">if</span> (focusedView != <span class=\"keyword\">null</span>) &#123;</div><div class=\"line\">\t\t<span class=\"keyword\">if</span> (focusedView.getId() != View.NO_ID) &#123;</div><div class=\"line\">\t\t\toutState.putInt(FOCUSED_ID_TAG, focusedView.getId());</div><div class=\"line\">\t\t&#125; <span class=\"keyword\">else</span> &#123;</div><div class=\"line\">\t\t\t<span class=\"keyword\">if</span> (<span class=\"keyword\">false</span>) &#123;</div><div class=\"line\">\t\t\t\tLog.d(TAG, <span class=\"string\">\"couldn't save which view has focus because the focused view \"</span></div><div class=\"line\">\t\t\t\t\t\t+ focusedView + <span class=\"string\">\" has no id.\"</span>);</div><div class=\"line\">\t\t\t&#125;</div><div class=\"line\">\t\t&#125;</div><div class=\"line\">\t&#125;</div><div class=\"line\">\t<span class=\"comment\">// save the panels</span></div><div class=\"line\">\tSparseArray&lt;Parcelable&gt; panelStates = <span class=\"keyword\">new</span> SparseArray&lt;Parcelable&gt;();</div><div class=\"line\">\tsavePanelState(panelStates);</div><div class=\"line\">\t<span class=\"keyword\">if</span> (panelStates.size() &gt; <span class=\"number\">0</span>) &#123;</div><div class=\"line\">\t\toutState.putSparseParcelableArray(PANELS_TAG, panelStates);</div><div class=\"line\">\t&#125;</div><div class=\"line\">\t<span class=\"keyword\">if</span> (mDecorContentParent != <span class=\"keyword\">null</span>) &#123;</div><div class=\"line\">\t\tSparseArray&lt;Parcelable&gt; actionBarStates = <span class=\"keyword\">new</span> SparseArray&lt;Parcelable&gt;();</div><div class=\"line\">\t\tmDecorContentParent.saveToolbarHierarchyState(actionBarStates);</div><div class=\"line\">\t\toutState.putSparseParcelableArray(ACTION_BAR_TAG, actionBarStates);</div><div class=\"line\">\t&#125;</div><div class=\"line\">\t<span class=\"keyword\">return</span> outState;</div><div class=\"line\">&#125;</div></pre></td></tr></table></figure>\n<p>这里的SparseArray类似HashMap，接着调用了mContentParent的saveHierarchyState()方法，并把结果放进outState中并返回。这里的mContentParent是DecorView的子元素或者其自身，这里可以把mContentParent看做整个View树的顶层视图，由于mContentParent是一个ViewGroup，但是ViewGroup没有重写saveHierarchyState方法,那么这里调用的便是</p>\n<h3 id=\"ViewGroup-saveHierarchyState\"><a href=\"#ViewGroup-saveHierarchyState\" class=\"headerlink\" title=\"ViewGroup#saveHierarchyState:\"></a>ViewGroup#saveHierarchyState:</h3><figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">void</span> <span class=\"title\">saveHierarchyState</span><span class=\"params\">(SparseArray&lt;Parcelable&gt; container)</span> </span>&#123;</div><div class=\"line\">\tdispatchSaveInstanceState(container);</div><div class=\"line\">&#125;</div></pre></td></tr></table></figure>\n<p>分发到 各个子view，去保存各个子view的数据</p>\n<h3 id=\"View-saveHierarchyState\"><a href=\"#View-saveHierarchyState\" class=\"headerlink\" title=\"View#saveHierarchyState:\"></a>View#saveHierarchyState:</h3><figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div><div class=\"line\">14</div><div class=\"line\">15</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"function\"><span class=\"keyword\">protected</span> <span class=\"keyword\">void</span> <span class=\"title\">dispatchSaveInstanceState</span><span class=\"params\">(SparseArray&lt;Parcelable&gt; container)</span> </span>&#123;</div><div class=\"line\">\t<span class=\"keyword\">if</span> (mID != NO_ID &amp;&amp; (mViewFlags &amp; SAVE_DISABLED_MASK) == <span class=\"number\">0</span>) &#123;</div><div class=\"line\">\t\tmPrivateFlags &amp;= ~PFLAG_SAVE_STATE_CALLED;</div><div class=\"line\">\t\tParcelable state = onSaveInstanceState();</div><div class=\"line\">\t\t<span class=\"keyword\">if</span> ((mPrivateFlags &amp; PFLAG_SAVE_STATE_CALLED) == <span class=\"number\">0</span>) &#123;</div><div class=\"line\">\t\t\t<span class=\"keyword\">throw</span> <span class=\"keyword\">new</span> IllegalStateException(</div><div class=\"line\">\t\t\t\t\t<span class=\"string\">\"Derived class did not call      super.onSaveInstanceState()\"</span>);</div><div class=\"line\">\t\t&#125;</div><div class=\"line\">\t\t<span class=\"keyword\">if</span> (state != <span class=\"keyword\">null</span>) &#123;</div><div class=\"line\">\t\t\t<span class=\"comment\">// Log.i(\"View\", \"Freezing #\" + Integer.toHexString(mID)</span></div><div class=\"line\">\t\t\t<span class=\"comment\">// + \": \" + state);</span></div><div class=\"line\">\t\t\tcontainer.put(mID, state);</div><div class=\"line\">\t\t&#125;</div><div class=\"line\">\t&#125;</div><div class=\"line\">&#125;</div></pre></td></tr></table></figure>\n<p>这里首先判断当前View是不是有一个ID以及saveEnable属性，接着下面便调用到了View#onSaveInstanceState()方法，也即我们的自定义View需要重写的方法，这个方法返回Parcelable对象，即可序列化对象，最后把该Parcelable对象放进了SparseArray内，key是该View的id。</p>\n<blockquote>\n<p>由此可知，如果一个View需要保存状态，那么至少需要以下两个条件：</p>\n<ol>\n<li>必须给view设置一个id</li>\n<li>view的saveEnable属性必须是true</li>\n</ol>\n</blockquote>\n<h2 id=\"二、恢复状态流程\"><a href=\"#二、恢复状态流程\" class=\"headerlink\" title=\"二、恢复状态流程\"></a>二、恢复状态流程</h2><h3 id=\"Activity-onRestoreInstanceState\"><a href=\"#Activity-onRestoreInstanceState\" class=\"headerlink\" title=\"Activity#onRestoreInstanceState\"></a>Activity#onRestoreInstanceState</h3><figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"function\"><span class=\"keyword\">protected</span> <span class=\"keyword\">void</span> <span class=\"title\">onRestoreInstanceState</span><span class=\"params\">(Bundle savedInstanceState)</span> </span>&#123;</div><div class=\"line\">\t<span class=\"keyword\">if</span> (mWindow != <span class=\"keyword\">null</span>) &#123;</div><div class=\"line\">\t\tBundle windowState = savedInstanceState.getBundle(WINDOW_HIERARCHY_TAG);</div><div class=\"line\">\t\t<span class=\"keyword\">if</span> (windowState != <span class=\"keyword\">null</span>) &#123;</div><div class=\"line\">\t\t\tmWindow.restoreHierarchyState(windowState);</div><div class=\"line\">\t\t&#125;</div><div class=\"line\">\t&#125;</div><div class=\"line\">&#125;</div></pre></td></tr></table></figure>\n<p>先是根据WINDOW_HIERARCHY_TAG这个key获取Bundle对应的数据，即View树数据，接着调用mWindow.restoreHierarchyState方法，我们继续看</p>\n<h3 id=\"PhoneWindow-restoreHierarchyState：\"><a href=\"#PhoneWindow-restoreHierarchyState：\" class=\"headerlink\" title=\"PhoneWindow#restoreHierarchyState：\"></a>PhoneWindow#restoreHierarchyState：</h3><figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"meta\">@Override</span></div><div class=\"line\">\t<span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">void</span> <span class=\"title\">restoreHierarchyState</span><span class=\"params\">(Bundle savedInstanceState)</span> </span>&#123;</div><div class=\"line\">\tSparseArray&lt;Parcelable&gt; savedStates</div><div class=\"line\">\t\t\t= savedInstanceState.getSparseParcelableArray(VIEWS_TAG);</div><div class=\"line\">\t<span class=\"keyword\">if</span> (savedStates != <span class=\"keyword\">null</span>) &#123;</div><div class=\"line\">\t\tmContentParent.restoreHierarchyState(savedStates);</div><div class=\"line\">\t&#125;</div><div class=\"line\">\t<span class=\"comment\">//省略...</span></div><div class=\"line\">&#125;</div></pre></td></tr></table></figure>\n<p>从Bundle里面根据VIEWS_TAG来获取SparseArray，这个之前我们也说过了，这就是View树数据所对应的SparseArray，接着调用mContentParent.restoreHierarchyState，到这里我们也知道接下来应该是调用<strong>View#restoreHierarchyState</strong>方法，而就如保存状态一样，恢复状态也需要把事件分发给ViewGroup的所有子View，所以在restoreHierarchyState方法里面又调用到了 </p>\n<h3 id=\"ViewGroup-dispatchRestoreInstanceState\"><a href=\"#ViewGroup-dispatchRestoreInstanceState\" class=\"headerlink\" title=\"ViewGroup#dispatchRestoreInstanceState:\"></a>ViewGroup#dispatchRestoreInstanceState:</h3><figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div><div class=\"line\">14</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"meta\">@Override</span></div><div class=\"line\"><span class=\"function\"><span class=\"keyword\">protected</span> <span class=\"keyword\">void</span> <span class=\"title\">dispatchRestoreInstanceState</span><span class=\"params\">(SparseArray&lt;Parcelable&gt; container)</span> </span>&#123;</div><div class=\"line\">\t<span class=\"comment\">//调用View的dispatchRestoreInstanceState，目的是恢复ViewGroup自身的状态</span></div><div class=\"line\">\t<span class=\"keyword\">super</span>.dispatchRestoreInstanceState(container);</div><div class=\"line\">\t<span class=\"keyword\">final</span> <span class=\"keyword\">int</span> count = mChildrenCount;</div><div class=\"line\">\t<span class=\"keyword\">final</span> View[] children = mChildren;</div><div class=\"line\">\t<span class=\"comment\">//遍历所有子View，逐个恢复它们的状态</span></div><div class=\"line\">\t<span class=\"keyword\">for</span> (<span class=\"keyword\">int</span> i = <span class=\"number\">0</span>; i &lt; count; i++) &#123;</div><div class=\"line\">\t\tView c = children[i];</div><div class=\"line\">\t\t<span class=\"keyword\">if</span> ((c.mViewFlags &amp; PARENT_SAVE_DISABLED_MASK) != PARENT_SAVE_DISABLED) &#123;</div><div class=\"line\">\t\t\tc.dispatchRestoreInstanceState(container);</div><div class=\"line\">\t\t&#125;</div><div class=\"line\">\t&#125;</div><div class=\"line\">&#125;</div></pre></td></tr></table></figure>\n<p>可以看出，代码和dispatchOnSaveInstanceState方法基本类似，接着我们看 </p>\n<h3 id=\"View-dispatchRestoreInstanceState\"><a href=\"#View-dispatchRestoreInstanceState\" class=\"headerlink\" title=\"View#dispatchRestoreInstanceState:\"></a>View#dispatchRestoreInstanceState:</h3><figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"function\"><span class=\"keyword\">protected</span> <span class=\"keyword\">void</span> <span class=\"title\">dispatchRestoreInstanceState</span><span class=\"params\">(SparseArray&lt;Parcelable&gt; container)</span> </span>&#123;</div><div class=\"line\">\t<span class=\"keyword\">if</span> (mID != NO_ID) &#123;</div><div class=\"line\">\t\tParcelable state = container.get(mID);</div><div class=\"line\">\t\t<span class=\"keyword\">if</span> (state != <span class=\"keyword\">null</span>) &#123;</div><div class=\"line\">\t\t\tmPrivateFlags &amp;= ~PFLAG_SAVE_STATE_CALLED;</div><div class=\"line\">\t\t\tonRestoreInstanceState(state);</div><div class=\"line\">\t\t&#125;</div><div class=\"line\">\t&#125;</div><div class=\"line\">&#125;</div></pre></td></tr></table></figure>\n<p>这里根据View的Id在SparseArray中获得对应的Parcelable对象，即视图数据，接着调用了<strong>View#onRestoreInstanceState(Parcelable)</strong>方法，交给每一个View来自行恢复数据，至此，View树的数据恢复解析完毕。</p>\n<blockquote>\n<p>一般对于自定义View来说，我们会重写<strong>onSaveInstanceState()</strong>和<strong>onRestoreInstanceState(Parcelable)</strong>方法，来处理我们需要恢复的数据。</p>\n</blockquote>\n<h2 id=\"参考文章：\"><a href=\"#参考文章：\" class=\"headerlink\" title=\"参考文章：\"></a>参考文章：</h2><blockquote>\n<ol>\n<li><a href=\"http://www.jianshu.com/p/4c1a6d382a85\" target=\"_blank\" rel=\"external\">Android 视图树&amp;View状态保存</a></li>\n<li><a href=\"http://blog.csdn.net/hp910315/article/details/51890813\" target=\"_blank\" rel=\"external\">Android View状态保存 </a></li>\n<li><a href=\"http://www.jianshu.com/p/58579627f70a\" target=\"_blank\" rel=\"external\">Android状态保存与恢复流程 完全解析</a></li>\n</ol>\n</blockquote>\n","excerpt":"<blockquote>\n<p>在写自定义控件的时候发现一个问题，在控件中设置了变量来控制控件的状态，但是在屏幕旋转的时候，activity经历了销毁重启，此时自定义控件中的状态也随之重置了。</p>\n<p>为了保证在屏幕旋转的时候，控件的状态保持不变，可以通过重写<strong>View#onSaveInstanceState</strong>和<strong>View#onRestoreInstanceState</strong>来保证自定义控件的状态在重启的时候得到保留。</p>\n<p>通过这个小问题的解决，对View的保存和恢复状态有了一个了解。本篇文章只针对于View的保存和恢复。</p>\n</blockquote>","more":"<h2 id=\"一、保存状态流程\"><a href=\"#一、保存状态流程\" class=\"headerlink\" title=\"一、保存状态流程\"></a>一、保存状态流程</h2><h3 id=\"Activity-onSaveInstaceState\"><a href=\"#Activity-onSaveInstaceState\" class=\"headerlink\" title=\"Activity#onSaveInstaceState\"></a>Activity#onSaveInstaceState</h3><figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"function\"><span class=\"keyword\">protected</span> <span class=\"keyword\">void</span> <span class=\"title\">onSaveInstanceState</span><span class=\"params\">(Bundle outState)</span> </span>&#123;</div><div class=\"line\">\t<span class=\"comment\">//将view树的状态保存在bundle中</span></div><div class=\"line\">\toutState.putBundle(WINDOW_HIERARCHY_TAG, mWindow.saveHierarchyState());</div><div class=\"line\">\tParcelable p = mFragments.saveAllState();</div><div class=\"line\">\t\t<span class=\"keyword\">if</span> (p != <span class=\"keyword\">null</span>) &#123;</div><div class=\"line\">\t\toutState.putParcelable(FRAGMENTS_TAG, p);</div><div class=\"line\">\t&#125;</div><div class=\"line\">\tgetApplication().dispatchActivitySaveInstanceState(<span class=\"keyword\">this</span>, outState);</div><div class=\"line\">&#125;</div></pre></td></tr></table></figure>\n<p>通过WINDOW_HIERARCHY_TAG这个key来保存view树的数据，这里Window的实现类是PhoneWindow.</p>\n<h3 id=\"PhoneWindow-saveHierarchyState\"><a href=\"#PhoneWindow-saveHierarchyState\" class=\"headerlink\" title=\"PhoneWindow#saveHierarchyState\"></a>PhoneWindow#saveHierarchyState</h3><figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div><div class=\"line\">14</div><div class=\"line\">15</div><div class=\"line\">16</div><div class=\"line\">17</div><div class=\"line\">18</div><div class=\"line\">19</div><div class=\"line\">20</div><div class=\"line\">21</div><div class=\"line\">22</div><div class=\"line\">23</div><div class=\"line\">24</div><div class=\"line\">25</div><div class=\"line\">26</div><div class=\"line\">27</div><div class=\"line\">28</div><div class=\"line\">29</div><div class=\"line\">30</div><div class=\"line\">31</div><div class=\"line\">32</div><div class=\"line\">33</div><div class=\"line\">34</div><div class=\"line\">35</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"meta\">@Override</span></div><div class=\"line\"><span class=\"function\"><span class=\"keyword\">public</span> Bundle <span class=\"title\">saveHierarchyState</span><span class=\"params\">()</span> </span>&#123;</div><div class=\"line\">\tBundle outState = <span class=\"keyword\">new</span> Bundle();</div><div class=\"line\">\t<span class=\"keyword\">if</span> (mContentParent == <span class=\"keyword\">null</span>) &#123;</div><div class=\"line\">\t\t<span class=\"keyword\">return</span> outState;</div><div class=\"line\">\t&#125;</div><div class=\"line\">\t\t</div><div class=\"line\">\tSparseArray&lt;Parcelable&gt; states = <span class=\"keyword\">new</span> SparseArray&lt;Parcelable&gt;();</div><div class=\"line\">\tmContentParent.saveHierarchyState(states);</div><div class=\"line\">\toutState.putSparseParcelableArray(VIEWS_TAG, states);</div><div class=\"line\">\t<span class=\"comment\">// save the focused view id</span></div><div class=\"line\">\tView focusedView = mContentParent.findFocus();</div><div class=\"line\">\t<span class=\"keyword\">if</span> (focusedView != <span class=\"keyword\">null</span>) &#123;</div><div class=\"line\">\t\t<span class=\"keyword\">if</span> (focusedView.getId() != View.NO_ID) &#123;</div><div class=\"line\">\t\t\toutState.putInt(FOCUSED_ID_TAG, focusedView.getId());</div><div class=\"line\">\t\t&#125; <span class=\"keyword\">else</span> &#123;</div><div class=\"line\">\t\t\t<span class=\"keyword\">if</span> (<span class=\"keyword\">false</span>) &#123;</div><div class=\"line\">\t\t\t\tLog.d(TAG, <span class=\"string\">\"couldn't save which view has focus because the focused view \"</span></div><div class=\"line\">\t\t\t\t\t\t+ focusedView + <span class=\"string\">\" has no id.\"</span>);</div><div class=\"line\">\t\t\t&#125;</div><div class=\"line\">\t\t&#125;</div><div class=\"line\">\t&#125;</div><div class=\"line\">\t<span class=\"comment\">// save the panels</span></div><div class=\"line\">\tSparseArray&lt;Parcelable&gt; panelStates = <span class=\"keyword\">new</span> SparseArray&lt;Parcelable&gt;();</div><div class=\"line\">\tsavePanelState(panelStates);</div><div class=\"line\">\t<span class=\"keyword\">if</span> (panelStates.size() &gt; <span class=\"number\">0</span>) &#123;</div><div class=\"line\">\t\toutState.putSparseParcelableArray(PANELS_TAG, panelStates);</div><div class=\"line\">\t&#125;</div><div class=\"line\">\t<span class=\"keyword\">if</span> (mDecorContentParent != <span class=\"keyword\">null</span>) &#123;</div><div class=\"line\">\t\tSparseArray&lt;Parcelable&gt; actionBarStates = <span class=\"keyword\">new</span> SparseArray&lt;Parcelable&gt;();</div><div class=\"line\">\t\tmDecorContentParent.saveToolbarHierarchyState(actionBarStates);</div><div class=\"line\">\t\toutState.putSparseParcelableArray(ACTION_BAR_TAG, actionBarStates);</div><div class=\"line\">\t&#125;</div><div class=\"line\">\t<span class=\"keyword\">return</span> outState;</div><div class=\"line\">&#125;</div></pre></td></tr></table></figure>\n<p>这里的SparseArray类似HashMap，接着调用了mContentParent的saveHierarchyState()方法，并把结果放进outState中并返回。这里的mContentParent是DecorView的子元素或者其自身，这里可以把mContentParent看做整个View树的顶层视图，由于mContentParent是一个ViewGroup，但是ViewGroup没有重写saveHierarchyState方法,那么这里调用的便是</p>\n<h3 id=\"ViewGroup-saveHierarchyState\"><a href=\"#ViewGroup-saveHierarchyState\" class=\"headerlink\" title=\"ViewGroup#saveHierarchyState:\"></a>ViewGroup#saveHierarchyState:</h3><figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">void</span> <span class=\"title\">saveHierarchyState</span><span class=\"params\">(SparseArray&lt;Parcelable&gt; container)</span> </span>&#123;</div><div class=\"line\">\tdispatchSaveInstanceState(container);</div><div class=\"line\">&#125;</div></pre></td></tr></table></figure>\n<p>分发到 各个子view，去保存各个子view的数据</p>\n<h3 id=\"View-saveHierarchyState\"><a href=\"#View-saveHierarchyState\" class=\"headerlink\" title=\"View#saveHierarchyState:\"></a>View#saveHierarchyState:</h3><figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div><div class=\"line\">14</div><div class=\"line\">15</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"function\"><span class=\"keyword\">protected</span> <span class=\"keyword\">void</span> <span class=\"title\">dispatchSaveInstanceState</span><span class=\"params\">(SparseArray&lt;Parcelable&gt; container)</span> </span>&#123;</div><div class=\"line\">\t<span class=\"keyword\">if</span> (mID != NO_ID &amp;&amp; (mViewFlags &amp; SAVE_DISABLED_MASK) == <span class=\"number\">0</span>) &#123;</div><div class=\"line\">\t\tmPrivateFlags &amp;= ~PFLAG_SAVE_STATE_CALLED;</div><div class=\"line\">\t\tParcelable state = onSaveInstanceState();</div><div class=\"line\">\t\t<span class=\"keyword\">if</span> ((mPrivateFlags &amp; PFLAG_SAVE_STATE_CALLED) == <span class=\"number\">0</span>) &#123;</div><div class=\"line\">\t\t\t<span class=\"keyword\">throw</span> <span class=\"keyword\">new</span> IllegalStateException(</div><div class=\"line\">\t\t\t\t\t<span class=\"string\">\"Derived class did not call      super.onSaveInstanceState()\"</span>);</div><div class=\"line\">\t\t&#125;</div><div class=\"line\">\t\t<span class=\"keyword\">if</span> (state != <span class=\"keyword\">null</span>) &#123;</div><div class=\"line\">\t\t\t<span class=\"comment\">// Log.i(\"View\", \"Freezing #\" + Integer.toHexString(mID)</span></div><div class=\"line\">\t\t\t<span class=\"comment\">// + \": \" + state);</span></div><div class=\"line\">\t\t\tcontainer.put(mID, state);</div><div class=\"line\">\t\t&#125;</div><div class=\"line\">\t&#125;</div><div class=\"line\">&#125;</div></pre></td></tr></table></figure>\n<p>这里首先判断当前View是不是有一个ID以及saveEnable属性，接着下面便调用到了View#onSaveInstanceState()方法，也即我们的自定义View需要重写的方法，这个方法返回Parcelable对象，即可序列化对象，最后把该Parcelable对象放进了SparseArray内，key是该View的id。</p>\n<blockquote>\n<p>由此可知，如果一个View需要保存状态，那么至少需要以下两个条件：</p>\n<ol>\n<li>必须给view设置一个id</li>\n<li>view的saveEnable属性必须是true</li>\n</ol>\n</blockquote>\n<h2 id=\"二、恢复状态流程\"><a href=\"#二、恢复状态流程\" class=\"headerlink\" title=\"二、恢复状态流程\"></a>二、恢复状态流程</h2><h3 id=\"Activity-onRestoreInstanceState\"><a href=\"#Activity-onRestoreInstanceState\" class=\"headerlink\" title=\"Activity#onRestoreInstanceState\"></a>Activity#onRestoreInstanceState</h3><figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"function\"><span class=\"keyword\">protected</span> <span class=\"keyword\">void</span> <span class=\"title\">onRestoreInstanceState</span><span class=\"params\">(Bundle savedInstanceState)</span> </span>&#123;</div><div class=\"line\">\t<span class=\"keyword\">if</span> (mWindow != <span class=\"keyword\">null</span>) &#123;</div><div class=\"line\">\t\tBundle windowState = savedInstanceState.getBundle(WINDOW_HIERARCHY_TAG);</div><div class=\"line\">\t\t<span class=\"keyword\">if</span> (windowState != <span class=\"keyword\">null</span>) &#123;</div><div class=\"line\">\t\t\tmWindow.restoreHierarchyState(windowState);</div><div class=\"line\">\t\t&#125;</div><div class=\"line\">\t&#125;</div><div class=\"line\">&#125;</div></pre></td></tr></table></figure>\n<p>先是根据WINDOW_HIERARCHY_TAG这个key获取Bundle对应的数据，即View树数据，接着调用mWindow.restoreHierarchyState方法，我们继续看</p>\n<h3 id=\"PhoneWindow-restoreHierarchyState：\"><a href=\"#PhoneWindow-restoreHierarchyState：\" class=\"headerlink\" title=\"PhoneWindow#restoreHierarchyState：\"></a>PhoneWindow#restoreHierarchyState：</h3><figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"meta\">@Override</span></div><div class=\"line\">\t<span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">void</span> <span class=\"title\">restoreHierarchyState</span><span class=\"params\">(Bundle savedInstanceState)</span> </span>&#123;</div><div class=\"line\">\tSparseArray&lt;Parcelable&gt; savedStates</div><div class=\"line\">\t\t\t= savedInstanceState.getSparseParcelableArray(VIEWS_TAG);</div><div class=\"line\">\t<span class=\"keyword\">if</span> (savedStates != <span class=\"keyword\">null</span>) &#123;</div><div class=\"line\">\t\tmContentParent.restoreHierarchyState(savedStates);</div><div class=\"line\">\t&#125;</div><div class=\"line\">\t<span class=\"comment\">//省略...</span></div><div class=\"line\">&#125;</div></pre></td></tr></table></figure>\n<p>从Bundle里面根据VIEWS_TAG来获取SparseArray，这个之前我们也说过了，这就是View树数据所对应的SparseArray，接着调用mContentParent.restoreHierarchyState，到这里我们也知道接下来应该是调用<strong>View#restoreHierarchyState</strong>方法，而就如保存状态一样，恢复状态也需要把事件分发给ViewGroup的所有子View，所以在restoreHierarchyState方法里面又调用到了 </p>\n<h3 id=\"ViewGroup-dispatchRestoreInstanceState\"><a href=\"#ViewGroup-dispatchRestoreInstanceState\" class=\"headerlink\" title=\"ViewGroup#dispatchRestoreInstanceState:\"></a>ViewGroup#dispatchRestoreInstanceState:</h3><figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div><div class=\"line\">14</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"meta\">@Override</span></div><div class=\"line\"><span class=\"function\"><span class=\"keyword\">protected</span> <span class=\"keyword\">void</span> <span class=\"title\">dispatchRestoreInstanceState</span><span class=\"params\">(SparseArray&lt;Parcelable&gt; container)</span> </span>&#123;</div><div class=\"line\">\t<span class=\"comment\">//调用View的dispatchRestoreInstanceState，目的是恢复ViewGroup自身的状态</span></div><div class=\"line\">\t<span class=\"keyword\">super</span>.dispatchRestoreInstanceState(container);</div><div class=\"line\">\t<span class=\"keyword\">final</span> <span class=\"keyword\">int</span> count = mChildrenCount;</div><div class=\"line\">\t<span class=\"keyword\">final</span> View[] children = mChildren;</div><div class=\"line\">\t<span class=\"comment\">//遍历所有子View，逐个恢复它们的状态</span></div><div class=\"line\">\t<span class=\"keyword\">for</span> (<span class=\"keyword\">int</span> i = <span class=\"number\">0</span>; i &lt; count; i++) &#123;</div><div class=\"line\">\t\tView c = children[i];</div><div class=\"line\">\t\t<span class=\"keyword\">if</span> ((c.mViewFlags &amp; PARENT_SAVE_DISABLED_MASK) != PARENT_SAVE_DISABLED) &#123;</div><div class=\"line\">\t\t\tc.dispatchRestoreInstanceState(container);</div><div class=\"line\">\t\t&#125;</div><div class=\"line\">\t&#125;</div><div class=\"line\">&#125;</div></pre></td></tr></table></figure>\n<p>可以看出，代码和dispatchOnSaveInstanceState方法基本类似，接着我们看 </p>\n<h3 id=\"View-dispatchRestoreInstanceState\"><a href=\"#View-dispatchRestoreInstanceState\" class=\"headerlink\" title=\"View#dispatchRestoreInstanceState:\"></a>View#dispatchRestoreInstanceState:</h3><figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"function\"><span class=\"keyword\">protected</span> <span class=\"keyword\">void</span> <span class=\"title\">dispatchRestoreInstanceState</span><span class=\"params\">(SparseArray&lt;Parcelable&gt; container)</span> </span>&#123;</div><div class=\"line\">\t<span class=\"keyword\">if</span> (mID != NO_ID) &#123;</div><div class=\"line\">\t\tParcelable state = container.get(mID);</div><div class=\"line\">\t\t<span class=\"keyword\">if</span> (state != <span class=\"keyword\">null</span>) &#123;</div><div class=\"line\">\t\t\tmPrivateFlags &amp;= ~PFLAG_SAVE_STATE_CALLED;</div><div class=\"line\">\t\t\tonRestoreInstanceState(state);</div><div class=\"line\">\t\t&#125;</div><div class=\"line\">\t&#125;</div><div class=\"line\">&#125;</div></pre></td></tr></table></figure>\n<p>这里根据View的Id在SparseArray中获得对应的Parcelable对象，即视图数据，接着调用了<strong>View#onRestoreInstanceState(Parcelable)</strong>方法，交给每一个View来自行恢复数据，至此，View树的数据恢复解析完毕。</p>\n<blockquote>\n<p>一般对于自定义View来说，我们会重写<strong>onSaveInstanceState()</strong>和<strong>onRestoreInstanceState(Parcelable)</strong>方法，来处理我们需要恢复的数据。</p>\n</blockquote>\n<h2 id=\"参考文章：\"><a href=\"#参考文章：\" class=\"headerlink\" title=\"参考文章：\"></a>参考文章：</h2><blockquote>\n<ol>\n<li><a href=\"http://www.jianshu.com/p/4c1a6d382a85\">Android 视图树&amp;View状态保存</a></li>\n<li><a href=\"http://blog.csdn.net/hp910315/article/details/51890813\">Android View状态保存 </a></li>\n<li><a href=\"http://www.jianshu.com/p/58579627f70a\">Android状态保存与恢复流程 完全解析</a></li>\n</ol>\n</blockquote>"},{"title":"事件分发源码分析","date":"2021-01-19T12:22:01.000Z","_content":"\n首先事件最先传递给当前的Activity，由Activity的`dispatchTouchEvent`来进行事件分发。\n\nActivity的`dispatchTouchEvent`代码如下\n\n```java\n/**\n  * Called to process touch screen events.  You can override this to\n  * intercept all touch screen events before they are dispatched to the\n  * window.  Be sure to call this implementation for touch screen events\n  * that should be handled normally.\n  *\n  * @param ev The touch screen event.\n  *\n  * @return boolean Return true if this event was consumed.\n  */\npublic boolean dispatchTouchEvent(MotionEvent ev) {\n  if (ev.getAction() == MotionEvent.ACTION_DOWN) {\n    // 空方法 当键盘、触摸、trackball事件被分发到当前Activity时，这个方法被回调\n    // 子类重写这个方法可以用于感知用户与设备的交互\n    onUserInteraction();\n  }\n  // 1-1 这里把MotionEvent交由Window去处理，如果结果是true，代表事件被消费了，直接返回true就行\n  if (getWindow().superDispatchTouchEvent(ev)) {\n    return true;\n  }\n  // 1-2 如果MotionEvent没有被处理，交回来给Activity的onTouchEvent来处理\n  return onTouchEvent(ev);\n}\n```\n在1-1这里，Activity就把MotionEvent交给Window去处理了，我们知道，Window的唯一子类就是`PhoneWindow`，所以接下来的流程我们就跳转到`PhoneWindow`里去看。\n\n<!--more-->\n\n```java\n// This is the top-level view of the window, containing the window decor.\nprivate DecorView mDecor;\n\n@Override\npublic boolean superDispatchTouchEvent(MotionEvent event) {\n  // 2-1 PhoneWindow将MotionEvent移交给DecorView去处理\n  return mDecor.superDispatchTouchEvent(event);\n}\n```\n\n2-1: PhoneWindow又将MotionEvent交由`DecorView`去处理\n\n```java\n public boolean superDispatchTouchEvent(MotionEvent event) {\n   // 3-1 DecorView其实是一个FrameLayout super.dispatchTouchEvent调用的是ViewGroup的方法\n   return super.dispatchTouchEvent(event);\n }\n```\n\n我们知道`Window`、`DecorView`、`contentView`的层级如下图所示\n\n![Window、DecorView、ContentView层级关系](https://bright-blog-1301150773.cos.ap-guangzhou.myqcloud.com/Window%E3%80%81DecorView%E3%80%81ContentView%E5%B1%82%E7%BA%A7%E5%85%B3%E7%B3%BB.png)\n\nDecorView的子控件`R.layout.screen_simple`、`R.id.content`这些都是ViewGroup。自己编写的`R.layout.main_activity`可以是View，也可以是ViewGroup。所以DecorView内部的控件就是ViewGroup一层一层嵌套，直到最后的View。所以我们继续从ViewGroup的`dispatchTouchEvent`往下看，这里也是ViewGroup分发事件的主要过程。\n\n`dispatchTouchEvent`方法有点长，我们拆解一下来看看，首先，我们手机在屏幕上点击或滑动，都是一系列的事件，每一次事件都是从`MotionEvent.ACTION_DOWN`开始的\n\n- 第一部分，就是对事件系列中的最开始`MotionEvent.ACTION_DOWN`的处理\n\n  ```java\n  public boolean dispatchTouchEvent(MotionEvent ev) {\n    \n      boolean handled = false;\n      if (onFilterTouchEventForSecurity(ev)) {\n          // ------------ 第一部分 针对事件初始进行前置准备处理 ------------\n          final int action = ev.getAction();\n          final int actionMasked = action & MotionEvent.ACTION_MASK;\n          // 最初的DOWN事件处理\n          if (actionMasked == MotionEvent.ACTION_DOWN) {\n              // Throw away all previous state when starting a new touch gesture.\n              // The framework may have dropped the up or cancel event for the previous gesture\n              // due to an app switch, ANR, or some other state change.\n            \t// 4-1 向mFirstTouchTarget指向的子元素分发cancel事件，然后将mFirstTouchTarget清除置为null\n              cancelAndClearTouchTargets(ev);\n            \t// 4-2 重置所有触摸状态，为下一个事件周期做准备\n              resetTouchState();\n          }\n          // ------------ 第一部分 结束 ------------\n        \n  \t\t\t\t// ...\n      }\n  \n      if (!handled && mInputEventConsistencyVerifier != null) {\n          mInputEventConsistencyVerifier.onUnhandledEvent(ev, 1);\n      }\n      return handled;\n  }\n  ```\n\n  4-1中`cancelAndClearTouchTargets`，作用就是清除之前的事件，为新一轮的事件分发做准备\n\n  ```java\n  private void cancelAndClearTouchTargets(MotionEvent event) {\n      if (mFirstTouchTarget != null) {\n          boolean syntheticEvent = false;\n          if (event == null) {\n              final long now = SystemClock.uptimeMillis();\n            \t// 构建一个ACTION_CANCEL的事件\n              event = MotionEvent.obtain(now, now,\n                      MotionEvent.ACTION_CANCEL, 0.0f, 0.0f, 0);\n              event.setSource(InputDevice.SOURCE_TOUCHSCREEN);\n              syntheticEvent = true;\n          }\n  \n          for (TouchTarget target = mFirstTouchTarget; target != null; target = target.next) {\n              resetCancelNextUpFlag(target.child);\n            \t// 向mFirstTouchTarget指向的子元素分发cancel事件\n              dispatchTransformedTouchEvent(event, true, target.child, target.pointerIdBits);\n          }\n        \t// 清除mFirstTouchTarget中的节点，置为null\n          clearTouchTargets();\n  \n          if (syntheticEvent) {\n              event.recycle();\n          }\n      }\n  }\n  ```\n\n  4-2中的`resetTouchState`就是 重置所有触摸状态，为下一个事件周期做准备\n\n  ```java\n  private void resetTouchState() {\n      clearTouchTargets();\n      resetCancelNextUpFlag(this);\n      mGroupFlags &= ~FLAG_DISALLOW_INTERCEPT;\n      mNestedScrollAxes = SCROLL_AXIS_NONE;\n  }\n  ```\n\n- 第二部分 处理当前ViewGroup是否要拦截事件\n\n  ```java\n  // ------------ 第二部分 判断当前ViewGroup是否需要拦截事件 ------------      \n      // Check for interception.\n      final boolean intercepted;\n      if (actionMasked == MotionEvent.ACTION_DOWN || mFirstTouchTarget != null) {\n          final boolean disallowIntercept = (mGroupFlags & FLAG_DISALLOW_INTERCEPT) != 0;\n          if (!disallowIntercept) {\n              intercepted = onInterceptTouchEvent(ev);\n              ev.setAction(action); // restore action in case it was changed\n          } else {\n              intercepted = false;\n          }\n      } else {\n          // There are no touch targets and this action is not an initial down\n          // so this view group continues to intercept touches.\n          intercepted = true;\n      }\n  // ------------ 第二部分 结束 ------------\n  ```\n\n  定义一个`boolean`类型的标志量`intercepted`，这个是用于记录该ViewGroup是否要拦截事件，可以看到 ViewGroup会在`actionMasked == MotionEvent.ACTION_DOWN`和`mFirstTouchTarget != null`这个条件下来进行是否需要拦截事件的判断，`mFirstTouchTarget`指向的是该ViewGroup的能处理事件成功的子View。那么如果ViewGroup拦截了事件，`mFirstTouchTarget`就是为null的，那么接下来的MOVE和UP事件则继续保持拦截状态，不会进入判断条件。\n\n  \n\n  然后在具体是否拦截的判断条件是是否设置了`FLAG_DISALLOW_INTERCEPT`标记位，如果设置了，该ViewGroup是不会拦截事件的，这个标志位一般是子View通过`getParent().requestDisallowInterceptTouchEvent(true)`来设置，子View请求父控件不要拦截事件。如果没有设置，再通过该ViewGroup自身的`onInterceptTouchEvent(ev)`方法返回值来判断是否需要拦截，这个方法通常就是继承类来覆写该方法来控制是否拦截事件。\n\n- 第三部分 遍历子View，判断子View是否需要拦截或处理事件\n\n  ```java\n  // ------------ 第三部分 遍历子View，判断子View是否需要拦截或处理事件 ------------      \n  // Check for cancelation.\n  final boolean canceled = resetCancelNextUpFlag(this)\n          || actionMasked == MotionEvent.ACTION_CANCEL;\n  \n  // Update list of touch targets for pointer down, if needed.\n  final boolean split = (mGroupFlags & FLAG_SPLIT_MOTION_EVENTS) != 0;\n  TouchTarget newTouchTarget = null;\n  boolean alreadyDispatchedToNewTouchTarget = false;\n  if (!canceled && !intercepted) {\n      if (actionMasked == MotionEvent.ACTION_DOWN\n              || (split && actionMasked == MotionEvent.ACTION_POINTER_DOWN)\n              || actionMasked == MotionEvent.ACTION_HOVER_MOVE) {\n          final int actionIndex = ev.getActionIndex(); // always 0 for down\n          final int idBitsToAssign = split ? 1 << ev.getPointerId(actionIndex)\n                  : TouchTarget.ALL_POINTER_IDS;\n  \n          // Clean up earlier touch targets for this pointer id in case they\n          // have become out of sync.\n          removePointersFromTouchTargets(idBitsToAssign);\n  \n          final int childrenCount = mChildrenCount;\n          if (newTouchTarget == null && childrenCount != 0) {\n              final float x = ev.getX(actionIndex);\n              final float y = ev.getY(actionIndex);\n              // Find a child that can receive the event.\n              // Scan children from front to back.\n              final ArrayList<View> preorderedList = buildTouchDispatchChildList();\n              final boolean customOrder = preorderedList == null\n                      && isChildrenDrawingOrderEnabled();\n              final View[] children = mChildren;\n            \t// 5-1 从最前面往里面遍历子View\n              for (int i = childrenCount - 1; i >= 0; i--) {\n                  final int childIndex = getAndVerifyPreorderedIndex(\n                          childrenCount, i, customOrder);\n                  final View child = getAndVerifyPreorderedView(\n                          preorderedList, children, childIndex);\n  \t\t\t\t\t\t\t\t// 5-2 判断子View是否能够接受到事件\n                  if (!canViewReceivePointerEvents(child)\n                          || !isTransformedTouchPointInView(x, y, child, null)) {\n                      ev.setTargetAccessibilityFocus(false);\n                      continue;\n                  }\n  \n                  newTouchTarget = getTouchTarget(child);\n                  if (newTouchTarget != null) {\n                      // Child is already receiving touch within its bounds.\n                      // Give it the new pointer in addition to the ones it is handling.\n                      newTouchTarget.pointerIdBits |= idBitsToAssign;\n                      break;\n                  }\n  \n                  resetCancelNextUpFlag(child);\n                \t// 5-3 将事件交由子View去dispatchTouchEvent，看子View是否处理事件\n                  if (dispatchTransformedTouchEvent(ev, false, child, idBitsToAssign)) {\n                      // Child wants to receive touch within its bounds.\n                      mLastTouchDownTime = ev.getDownTime();\n                      if (preorderedList != null) {\n                          // childIndex points into presorted list, find original index\n                          for (int j = 0; j < childrenCount; j++) {\n                              if (children[childIndex] == mChildren[j]) {\n                                  mLastTouchDownIndex = j;\n                                  break;\n                              }\n                          }\n                      } else {\n                          mLastTouchDownIndex = childIndex;\n                      }\n                      mLastTouchDownX = ev.getX();\n                      mLastTouchDownY = ev.getY();\n                    \t// 5-4 将处理事件的View添加到mFirstTouchTarget(链表)最前端\n                      newTouchTarget = addTouchTarget(child, idBitsToAssign);\n                      alreadyDispatchedToNewTouchTarget = true;\n                      break;\n                  }\n              }\n              if (preorderedList != null) preorderedList.clear();\n          }\n  \n          if (newTouchTarget == null && mFirstTouchTarget != null) {\n              // Did not find a child to receive the event.\n              // Assign the pointer to the least recently added target.\n              newTouchTarget = mFirstTouchTarget;\n              while (newTouchTarget.next != null) {\n                  newTouchTarget = newTouchTarget.next;\n              }\n              newTouchTarget.pointerIdBits |= idBitsToAssign;\n          }\n      }\n  }\n  // ------------ 第三部分 结束 ------------      \n  ```\n\n  在5-1处，从外层往里层依次遍历子View，然后在5-2处判断子View是否能够接受处理事件，判断条件是`canViewReceivePointerEvents(child)`和`isTransformedTouchPointInView(x, y, child, null)`，具体代码如下：\n\n  ```java\n  private static boolean canViewReceivePointerEvents(@NonNull View child) {\n    \t// 是否可见，是否在播放动画\n      return (child.mViewFlags & VISIBILITY_MASK) == VISIBLE || child.getAnimation() != null;\n  }\n  ```\n\n  ```java\n  protected boolean isTransformedTouchPointInView(float x, float y, View child,\n          PointF outLocalPoint) {\n    \t// 判断点击事件是否在子View的区域内\n      final float[] point = getTempPoint();\n      point[0] = x;\n      point[1] = y;\n      transformPointToViewLocal(point, child);\n      final boolean isInView = child.pointInView(point[0], point[1]);\n      if (isInView && outLocalPoint != null) {\n          outLocalPoint.set(point[0], point[1]);\n      }\n      return isInView;\n  }\n  ```\n\n  就是说子View不能接收点击事件或者点击事件不在该子View的区域内，那么事件也就不会分发到这个子View去，跳过这个子View继续遍历。\n\n  如果子View满足这两个条件，那么事件就会传递给它来处理，进入5-3处的 `dispatchTransformedTouchEvent`来看，撇开那些判断条件，最终的处理结果都依赖下面的代码，\n\n  ```java\n  if (child == null) {\n      handled = super.dispatchTouchEvent(event);\n  } else {\n      handled = child.dispatchTouchEvent(event);\n  }\n  ```\n\n  这里child传入的不为null，所以这里会执行子View的`dispatchTouchEvent`，如果`dispatchTouchEvent`返回的是true，那就暂时不考虑子View内部的分发逻辑，这里会走进if判断条件，执行到5-4处。\n\n  ```java\n  private TouchTarget addTouchTarget(@NonNull View child, int pointerIdBits) {\n      final TouchTarget target = TouchTarget.obtain(child, pointerIdBits);\n      target.next = mFirstTouchTarget;\n      mFirstTouchTarget = target;\n      return target;\n  }\n  ```\n\n  这里是对`mFirstTouchTarget`进行赋值，然后将`mFirstTouchTarget`当成一个子View是否处理事件的标志。如果是有子View处理事件，将`mFirstTouchTarget`赋值后，然后就跳出遍历子View的循环，如果当前子View的`dispatchTransformedTouchEvent`返回的是false，则继续往下遍历子View。\n\n- 第四部分 根据`mFirstTouchTarget`来分发事件，为null则是将事件交由ViewGroup的onTouchEvent处理\n\n  ```java\n  // ------------ 第四部分 根据mFirstTouchTarget来分发事件，为null则是ViewGroup的onTouchEvent处理 ------------ \n  // Dispatch to touch targets.\n  if (mFirstTouchTarget == null) {\n      // No touch targets so treat this as an ordinary view.\n    \t// 6-1 如果事件被该ViewGroup拦截了，或者没有子view处理事件\n      handled = dispatchTransformedTouchEvent(ev, canceled, null,\n              TouchTarget.ALL_POINTER_IDS);\n  } else {\n      // Dispatch to touch targets, excluding the new touch target if we already\n      // dispatched to it.  Cancel touch targets if necessary.\n    \t// 6-1 遍历mFirstTouchTarget，分发事件\n      TouchTarget predecessor = null;\n      TouchTarget target = mFirstTouchTarget;\n      while (target != null) {\n          final TouchTarget next = target.next;\n          if (alreadyDispatchedToNewTouchTarget && target == newTouchTarget) {\n              handled = true;\n          } else {\n              final boolean cancelChild = resetCancelNextUpFlag(target.child)\n                      || intercepted;\n              if (dispatchTransformedTouchEvent(ev, cancelChild,\n                      target.child, target.pointerIdBits)) {\n                  handled = true;\n              }\n              if (cancelChild) {\n                  if (predecessor == null) {\n                      mFirstTouchTarget = next;\n                  } else {\n                      predecessor.next = next;\n                  }\n                  target.recycle();\n                  target = next;\n                  continue;\n              }\n          }\n          predecessor = target;\n          target = next;\n      }\n  }\n  // ------------ 第四部分 结束 ------------ \n  ```\n\n  接着第三部分，如果没有子View没有处理事件(1. 有可能没有子View 2. 子View处理了事件，dispatchTouchEvent返回false)，这个时候`mFirstTouchTarget`是没有赋值的，为null，那么会走到代码6-1处。\n\n  这里跟5-3处调用的是一个方法，但是child参数传递的是null，那么就会执行`super.dispatchTouchEvent(event)`这行代码，会跳转到ViewGroup的父类View的`dispatchTouchEvent`，而View的`dispatchTouchEvent`就会调用`onTouchEvent`，也就是该ViewGroup自己通过`onTouchEvent`方法来处理事件。\n\n到这里，ViewGroup里的事件分发与拦截就分析完毕了，事件要么就交由下层View继续处理，要么就走到自己的`onTouchEvent`方法里处理。如果下层View还是ViewGroup，则逻辑还是跟上面分析的一样，如果是View，那么流程就有点不同了。\n\n - View的dispatchTouchEvent\n\n   ```java\n   public boolean dispatchTouchEvent(MotionEvent event) {\n       // ...\n   \n       boolean result = false;\n   \n       // ...\n   \n       if (onFilterTouchEventForSecurity(event)) {\n           if ((mViewFlags & ENABLED_MASK) == ENABLED && handleScrollBarDragging(event)) {\n               result = true;\n           }\n           //noinspection SimplifiableIfStatement\n           ListenerInfo li = mListenerInfo;\n           // 7-1 判断是否设置了OnTouchListener，设置了就交由listener处理\n           if (li != null && li.mOnTouchListener != null\n                   && (mViewFlags & ENABLED_MASK) == ENABLED\n                   && li.mOnTouchListener.onTouch(this, event)) {\n               result = true;\n           }\n   \n           // 7-2 没设置OnTouchListener，交由View的onTouchEvent方法来处理事件\n           if (!result && onTouchEvent(event)) {\n               result = true;\n           }\n       }\n   \n       // ...\n   \n       return result;\n   }\n   ```\n\n   View因为没有下层的子View了，所以dispatchTouchEvent也比较简单，从代码7-1和7-2可以很清晰看到View分发事件的逻辑，首先看是否设置了OnTouchEventListener，如果没有设置listener，再去看该View的onTouchEvent方法。OnTouchEventListener的优先级是高于onTouchEvent方法的，这样就可以暴露OnTouchEventListener，方便于View在外面处理点击事件了。\n\n- View的onTouchEvent\n\n  ```java\n  public boolean onTouchEvent(MotionEvent event) {\n      final float x = event.getX();\n      final float y = event.getY();\n      final int viewFlags = mViewFlags;\n      final int action = event.getAction();\n  \n      // ------------ 第一部分 View处于不可用状态下点击事件的处理  ------------\n      final boolean clickable = ((viewFlags & CLICKABLE) == CLICKABLE\n              || (viewFlags & LONG_CLICKABLE) == LONG_CLICKABLE)\n              || (viewFlags & CONTEXT_CLICKABLE) == CONTEXT_CLICKABLE;\n  \n      if ((viewFlags & ENABLED_MASK) == DISABLED) {\n          if (action == MotionEvent.ACTION_UP && (mPrivateFlags & PFLAG_PRESSED) != 0) {\n              setPressed(false);\n          }\n          mPrivateFlags3 &= ~PFLAG3_FINGER_DOWN;\n          // A disabled view that is clickable still consumes the touch\n          // events, it just doesn't respond to them.\n        \t// 不可用状态下，view也会消耗事件，只是不响应它们\n          return clickable;\n      }\n      // ------------ 第一部分 结束  ------------\n      \n      // ------------ 第二部分 有TouchDelegate则交由TouchDelegate处理事件  ------------\n      if (mTouchDelegate != null) {\n          if (mTouchDelegate.onTouchEvent(event)) {\n              return true;\n          }\n      }\n      // ------------ 第二部分 结束  ------------\n    \n      // ------------ 第三部分 点击事件的具体处理  ------------\n      if (clickable || (viewFlags & TOOLTIP) == TOOLTIP) {\n          switch (action) {\n              case MotionEvent.ACTION_UP:\n                  mPrivateFlags3 &= ~PFLAG3_FINGER_DOWN;\n                  if ((viewFlags & TOOLTIP) == TOOLTIP) {\n                      handleTooltipUp();\n                  }\n                  if (!clickable) {\n                      removeTapCallback();\n                      removeLongPressCallback();\n                      mInContextButtonPress = false;\n                      mHasPerformedLongPress = false;\n                      mIgnoreNextUpEvent = false;\n                      break;\n                  }\n                  boolean prepressed = (mPrivateFlags & PFLAG_PREPRESSED) != 0;\n                  if ((mPrivateFlags & PFLAG_PRESSED) != 0 || prepressed) {\n                      // take focus if we don't have it already and we should in\n                      // touch mode.\n                      boolean focusTaken = false;\n                      if (isFocusable() && isFocusableInTouchMode() && !isFocused()) {\n                          focusTaken = requestFocus();\n                      }\n  \n                      if (prepressed) {\n                          // The button is being released before we actually\n                          // showed it as pressed.  Make it show the pressed\n                          // state now (before scheduling the click) to ensure\n                          // the user sees it.\n                          setPressed(true, x, y);\n                      }\n  \n                      if (!mHasPerformedLongPress && !mIgnoreNextUpEvent) {\n                          // This is a tap, so remove the longpress check\n                          removeLongPressCallback();\n  \n                          // Only perform take click actions if we were in the pressed state\n                          if (!focusTaken) {\n                              // Use a Runnable and post this rather than calling\n                              // performClick directly. This lets other visual state\n                              // of the view update before click actions start.\n                            \t// 8-1 针对点击事件处理 通过Runnable调用performClickInternal() ，最终调用performClick()方法\n                              if (mPerformClick == null) {\n                                  mPerformClick = new PerformClick();\n                              }\n                              if (!post(mPerformClick)) {\n                                  performClickInternal();\n                              }\n                          }\n                      }\n  \n                      if (mUnsetPressedState == null) {\n                          mUnsetPressedState = new UnsetPressedState();\n                      }\n  \n                      if (prepressed) {\n                          postDelayed(mUnsetPressedState,\n                                  ViewConfiguration.getPressedStateDuration());\n                      } else if (!post(mUnsetPressedState)) {\n                          // If the post failed, unpress right now\n                          mUnsetPressedState.run();\n                      }\n  \n                      removeTapCallback();\n                  }\n                  mIgnoreNextUpEvent = false;\n                  break;\n  \n              case MotionEvent.ACTION_DOWN:\n                  if (event.getSource() == InputDevice.SOURCE_TOUCHSCREEN) {\n                      mPrivateFlags3 |= PFLAG3_FINGER_DOWN;\n                  }\n                  mHasPerformedLongPress = false;\n  \n                  if (!clickable) {\n                    \t// 8-2 针对长按事件处理 \n                      checkForLongClick(0, x, y);\n                      break;\n                  }\n  \n                  if (performButtonActionOnTouchDown(event)) {\n                      break;\n                  }\n  \n                  // Walk up the hierarchy to determine if we're inside a scrolling container.\n                  boolean isInScrollingContainer = isInScrollingContainer();\n  \n                  // For views inside a scrolling container, delay the pressed feedback for\n                  // a short period in case this is a scroll.\n                  if (isInScrollingContainer) {\n                      mPrivateFlags |= PFLAG_PREPRESSED;\n                      if (mPendingCheckForTap == null) {\n                          mPendingCheckForTap = new CheckForTap();\n                      }\n                      mPendingCheckForTap.x = event.getX();\n                      mPendingCheckForTap.y = event.getY();\n                      postDelayed(mPendingCheckForTap, ViewConfiguration.getTapTimeout());\n                  } else {\n                      // Not inside a scrolling container, so show the feedback right away\n                      setPressed(true, x, y);\n                      checkForLongClick(0, x, y);\n                  }\n                  break;\n  \n              case MotionEvent.ACTION_CANCEL:\n                  if (clickable) {\n                      setPressed(false);\n                  }\n                  removeTapCallback();\n                  removeLongPressCallback();\n                  mInContextButtonPress = false;\n                  mHasPerformedLongPress = false;\n                  mIgnoreNextUpEvent = false;\n                  mPrivateFlags3 &= ~PFLAG3_FINGER_DOWN;\n                  break;\n  \n              case MotionEvent.ACTION_MOVE:\n                  if (clickable) {\n                      drawableHotspotChanged(x, y);\n                  }\n  \n                  // Be lenient about moving outside of buttons\n                  if (!pointInView(x, y, mTouchSlop)) {\n                      // Outside button\n                      // Remove any future long press/tap checks\n                      removeTapCallback();\n                      removeLongPressCallback();\n                      if ((mPrivateFlags & PFLAG_PRESSED) != 0) {\n                          setPressed(false);\n                      }\n                      mPrivateFlags3 &= ~PFLAG3_FINGER_DOWN;\n                  }\n                  break;\n          }\n          return true;\n      }\n      // ------------ 第三部分 结束  ------------\n      return false;\n  }\n  ```\n\n  从以上代码我们可以看到，View的OnTouchEvent方法主要分为三个部分，首先对不可用的状态进行处理，虽然处于不可用状态，但是还是会消费点击事件，只是没什么响应而已。第二部分则是对设置了`TouchDelegate`的处理。重点在第三部分，这里就是我们非常熟悉的针对MotionEvent不同action类型(DOWN、MOVE、CANCEL、UP)的处理。\n\n  其中8-1代码处就是针对点击事件处理，通过post Runnable调用`performClickInternal() `，确保view的状态在点击前进行一遍更新。最终调用`performClick()`方法\n\n  ```java\n  public boolean performClick() {\n      // We still need to call this method to handle the cases where performClick() was called\n      // externally, instead of through performClickInternal()\n      notifyAutofillManagerOnClick();\n  \n      final boolean result;\n      final ListenerInfo li = mListenerInfo;\n    \t// 在这里回调出去，具体处理View的onClick事件\n      if (li != null && li.mOnClickListener != null) {\n          playSoundEffect(SoundEffectConstants.CLICK);\n          li.mOnClickListener.onClick(this);\n          result = true;\n      } else {\n          result = false;\n      }\n  \n      sendAccessibilityEvent(AccessibilityEvent.TYPE_VIEW_CLICKED);\n  \n      notifyEnterOrExitForAutoFillIfNeeded(true);\n  \n      return result;\n  }\n  ```\n\n  8-2处代码是在MotionEvent.ACTION_DOWN里去判断view要不要响应长按事件，具体实现跟点击事件类似，最终响应到View的`OnLongClickListener`去处理长按事件，这里具体就不再展开了。\n\n总结\n\n1. `onInterceptTouchEvent`方法代表是否需要拦截事件，`onTouch`和`onTouchEvent`方法的返回值代表是否消费事件\n2. 事件从Activity一层一层往底部View进行分发，过程中，各个ViewGroup都可以选择拦截事件，拦截后则交由该ViewGroup的`onTouchEvent`处理，不再继续分发\n3. 都不拦截的情况下，会分发到子View，如果view都不选择消费事件，事件会通过`onTouchEvent`一层一层往上冒泡，直到回到Activity的`onTouchEvent`，有一层选择消费事件，则不再往上传递\n4. 子View可以通过`getParent().requestDisallowInterceptTouchEvent`来申请父控件不要拦截事件\n5. 如果View没有消费`ACTION_DOWN`事件，之后的`ACTION_MOVE\\ACTION_UP`事件不会再接收\n6. 当View设置了可点击、可常按，那么就算该View不可用，也会消费事件\n7. `onTouch`优先级比`onTouchEvent`高，只有`onTouch`不执行的情况下，才会执行`onTouchEvent`\n\n事件分发流程图如下：\n\n![Touch事件分发流程](https://bright-blog-1301150773.cos.ap-guangzhou.myqcloud.com/Touch%E4%BA%8B%E4%BB%B6%E5%88%86%E5%8F%91%E6%B5%81%E7%A8%8B.png)\n\n\n\n","source":"_posts/事件分发源码分析.md","raw":"---\ntitle: 事件分发源码分析\ndate: 2021-01-19 20:22:01\ncategories: Android\ntags: \n- Android\n- 源码分析\n---\n\n首先事件最先传递给当前的Activity，由Activity的`dispatchTouchEvent`来进行事件分发。\n\nActivity的`dispatchTouchEvent`代码如下\n\n```java\n/**\n  * Called to process touch screen events.  You can override this to\n  * intercept all touch screen events before they are dispatched to the\n  * window.  Be sure to call this implementation for touch screen events\n  * that should be handled normally.\n  *\n  * @param ev The touch screen event.\n  *\n  * @return boolean Return true if this event was consumed.\n  */\npublic boolean dispatchTouchEvent(MotionEvent ev) {\n  if (ev.getAction() == MotionEvent.ACTION_DOWN) {\n    // 空方法 当键盘、触摸、trackball事件被分发到当前Activity时，这个方法被回调\n    // 子类重写这个方法可以用于感知用户与设备的交互\n    onUserInteraction();\n  }\n  // 1-1 这里把MotionEvent交由Window去处理，如果结果是true，代表事件被消费了，直接返回true就行\n  if (getWindow().superDispatchTouchEvent(ev)) {\n    return true;\n  }\n  // 1-2 如果MotionEvent没有被处理，交回来给Activity的onTouchEvent来处理\n  return onTouchEvent(ev);\n}\n```\n在1-1这里，Activity就把MotionEvent交给Window去处理了，我们知道，Window的唯一子类就是`PhoneWindow`，所以接下来的流程我们就跳转到`PhoneWindow`里去看。\n\n<!--more-->\n\n```java\n// This is the top-level view of the window, containing the window decor.\nprivate DecorView mDecor;\n\n@Override\npublic boolean superDispatchTouchEvent(MotionEvent event) {\n  // 2-1 PhoneWindow将MotionEvent移交给DecorView去处理\n  return mDecor.superDispatchTouchEvent(event);\n}\n```\n\n2-1: PhoneWindow又将MotionEvent交由`DecorView`去处理\n\n```java\n public boolean superDispatchTouchEvent(MotionEvent event) {\n   // 3-1 DecorView其实是一个FrameLayout super.dispatchTouchEvent调用的是ViewGroup的方法\n   return super.dispatchTouchEvent(event);\n }\n```\n\n我们知道`Window`、`DecorView`、`contentView`的层级如下图所示\n\n![Window、DecorView、ContentView层级关系](https://bright-blog-1301150773.cos.ap-guangzhou.myqcloud.com/Window%E3%80%81DecorView%E3%80%81ContentView%E5%B1%82%E7%BA%A7%E5%85%B3%E7%B3%BB.png)\n\nDecorView的子控件`R.layout.screen_simple`、`R.id.content`这些都是ViewGroup。自己编写的`R.layout.main_activity`可以是View，也可以是ViewGroup。所以DecorView内部的控件就是ViewGroup一层一层嵌套，直到最后的View。所以我们继续从ViewGroup的`dispatchTouchEvent`往下看，这里也是ViewGroup分发事件的主要过程。\n\n`dispatchTouchEvent`方法有点长，我们拆解一下来看看，首先，我们手机在屏幕上点击或滑动，都是一系列的事件，每一次事件都是从`MotionEvent.ACTION_DOWN`开始的\n\n- 第一部分，就是对事件系列中的最开始`MotionEvent.ACTION_DOWN`的处理\n\n  ```java\n  public boolean dispatchTouchEvent(MotionEvent ev) {\n    \n      boolean handled = false;\n      if (onFilterTouchEventForSecurity(ev)) {\n          // ------------ 第一部分 针对事件初始进行前置准备处理 ------------\n          final int action = ev.getAction();\n          final int actionMasked = action & MotionEvent.ACTION_MASK;\n          // 最初的DOWN事件处理\n          if (actionMasked == MotionEvent.ACTION_DOWN) {\n              // Throw away all previous state when starting a new touch gesture.\n              // The framework may have dropped the up or cancel event for the previous gesture\n              // due to an app switch, ANR, or some other state change.\n            \t// 4-1 向mFirstTouchTarget指向的子元素分发cancel事件，然后将mFirstTouchTarget清除置为null\n              cancelAndClearTouchTargets(ev);\n            \t// 4-2 重置所有触摸状态，为下一个事件周期做准备\n              resetTouchState();\n          }\n          // ------------ 第一部分 结束 ------------\n        \n  \t\t\t\t// ...\n      }\n  \n      if (!handled && mInputEventConsistencyVerifier != null) {\n          mInputEventConsistencyVerifier.onUnhandledEvent(ev, 1);\n      }\n      return handled;\n  }\n  ```\n\n  4-1中`cancelAndClearTouchTargets`，作用就是清除之前的事件，为新一轮的事件分发做准备\n\n  ```java\n  private void cancelAndClearTouchTargets(MotionEvent event) {\n      if (mFirstTouchTarget != null) {\n          boolean syntheticEvent = false;\n          if (event == null) {\n              final long now = SystemClock.uptimeMillis();\n            \t// 构建一个ACTION_CANCEL的事件\n              event = MotionEvent.obtain(now, now,\n                      MotionEvent.ACTION_CANCEL, 0.0f, 0.0f, 0);\n              event.setSource(InputDevice.SOURCE_TOUCHSCREEN);\n              syntheticEvent = true;\n          }\n  \n          for (TouchTarget target = mFirstTouchTarget; target != null; target = target.next) {\n              resetCancelNextUpFlag(target.child);\n            \t// 向mFirstTouchTarget指向的子元素分发cancel事件\n              dispatchTransformedTouchEvent(event, true, target.child, target.pointerIdBits);\n          }\n        \t// 清除mFirstTouchTarget中的节点，置为null\n          clearTouchTargets();\n  \n          if (syntheticEvent) {\n              event.recycle();\n          }\n      }\n  }\n  ```\n\n  4-2中的`resetTouchState`就是 重置所有触摸状态，为下一个事件周期做准备\n\n  ```java\n  private void resetTouchState() {\n      clearTouchTargets();\n      resetCancelNextUpFlag(this);\n      mGroupFlags &= ~FLAG_DISALLOW_INTERCEPT;\n      mNestedScrollAxes = SCROLL_AXIS_NONE;\n  }\n  ```\n\n- 第二部分 处理当前ViewGroup是否要拦截事件\n\n  ```java\n  // ------------ 第二部分 判断当前ViewGroup是否需要拦截事件 ------------      \n      // Check for interception.\n      final boolean intercepted;\n      if (actionMasked == MotionEvent.ACTION_DOWN || mFirstTouchTarget != null) {\n          final boolean disallowIntercept = (mGroupFlags & FLAG_DISALLOW_INTERCEPT) != 0;\n          if (!disallowIntercept) {\n              intercepted = onInterceptTouchEvent(ev);\n              ev.setAction(action); // restore action in case it was changed\n          } else {\n              intercepted = false;\n          }\n      } else {\n          // There are no touch targets and this action is not an initial down\n          // so this view group continues to intercept touches.\n          intercepted = true;\n      }\n  // ------------ 第二部分 结束 ------------\n  ```\n\n  定义一个`boolean`类型的标志量`intercepted`，这个是用于记录该ViewGroup是否要拦截事件，可以看到 ViewGroup会在`actionMasked == MotionEvent.ACTION_DOWN`和`mFirstTouchTarget != null`这个条件下来进行是否需要拦截事件的判断，`mFirstTouchTarget`指向的是该ViewGroup的能处理事件成功的子View。那么如果ViewGroup拦截了事件，`mFirstTouchTarget`就是为null的，那么接下来的MOVE和UP事件则继续保持拦截状态，不会进入判断条件。\n\n  \n\n  然后在具体是否拦截的判断条件是是否设置了`FLAG_DISALLOW_INTERCEPT`标记位，如果设置了，该ViewGroup是不会拦截事件的，这个标志位一般是子View通过`getParent().requestDisallowInterceptTouchEvent(true)`来设置，子View请求父控件不要拦截事件。如果没有设置，再通过该ViewGroup自身的`onInterceptTouchEvent(ev)`方法返回值来判断是否需要拦截，这个方法通常就是继承类来覆写该方法来控制是否拦截事件。\n\n- 第三部分 遍历子View，判断子View是否需要拦截或处理事件\n\n  ```java\n  // ------------ 第三部分 遍历子View，判断子View是否需要拦截或处理事件 ------------      \n  // Check for cancelation.\n  final boolean canceled = resetCancelNextUpFlag(this)\n          || actionMasked == MotionEvent.ACTION_CANCEL;\n  \n  // Update list of touch targets for pointer down, if needed.\n  final boolean split = (mGroupFlags & FLAG_SPLIT_MOTION_EVENTS) != 0;\n  TouchTarget newTouchTarget = null;\n  boolean alreadyDispatchedToNewTouchTarget = false;\n  if (!canceled && !intercepted) {\n      if (actionMasked == MotionEvent.ACTION_DOWN\n              || (split && actionMasked == MotionEvent.ACTION_POINTER_DOWN)\n              || actionMasked == MotionEvent.ACTION_HOVER_MOVE) {\n          final int actionIndex = ev.getActionIndex(); // always 0 for down\n          final int idBitsToAssign = split ? 1 << ev.getPointerId(actionIndex)\n                  : TouchTarget.ALL_POINTER_IDS;\n  \n          // Clean up earlier touch targets for this pointer id in case they\n          // have become out of sync.\n          removePointersFromTouchTargets(idBitsToAssign);\n  \n          final int childrenCount = mChildrenCount;\n          if (newTouchTarget == null && childrenCount != 0) {\n              final float x = ev.getX(actionIndex);\n              final float y = ev.getY(actionIndex);\n              // Find a child that can receive the event.\n              // Scan children from front to back.\n              final ArrayList<View> preorderedList = buildTouchDispatchChildList();\n              final boolean customOrder = preorderedList == null\n                      && isChildrenDrawingOrderEnabled();\n              final View[] children = mChildren;\n            \t// 5-1 从最前面往里面遍历子View\n              for (int i = childrenCount - 1; i >= 0; i--) {\n                  final int childIndex = getAndVerifyPreorderedIndex(\n                          childrenCount, i, customOrder);\n                  final View child = getAndVerifyPreorderedView(\n                          preorderedList, children, childIndex);\n  \t\t\t\t\t\t\t\t// 5-2 判断子View是否能够接受到事件\n                  if (!canViewReceivePointerEvents(child)\n                          || !isTransformedTouchPointInView(x, y, child, null)) {\n                      ev.setTargetAccessibilityFocus(false);\n                      continue;\n                  }\n  \n                  newTouchTarget = getTouchTarget(child);\n                  if (newTouchTarget != null) {\n                      // Child is already receiving touch within its bounds.\n                      // Give it the new pointer in addition to the ones it is handling.\n                      newTouchTarget.pointerIdBits |= idBitsToAssign;\n                      break;\n                  }\n  \n                  resetCancelNextUpFlag(child);\n                \t// 5-3 将事件交由子View去dispatchTouchEvent，看子View是否处理事件\n                  if (dispatchTransformedTouchEvent(ev, false, child, idBitsToAssign)) {\n                      // Child wants to receive touch within its bounds.\n                      mLastTouchDownTime = ev.getDownTime();\n                      if (preorderedList != null) {\n                          // childIndex points into presorted list, find original index\n                          for (int j = 0; j < childrenCount; j++) {\n                              if (children[childIndex] == mChildren[j]) {\n                                  mLastTouchDownIndex = j;\n                                  break;\n                              }\n                          }\n                      } else {\n                          mLastTouchDownIndex = childIndex;\n                      }\n                      mLastTouchDownX = ev.getX();\n                      mLastTouchDownY = ev.getY();\n                    \t// 5-4 将处理事件的View添加到mFirstTouchTarget(链表)最前端\n                      newTouchTarget = addTouchTarget(child, idBitsToAssign);\n                      alreadyDispatchedToNewTouchTarget = true;\n                      break;\n                  }\n              }\n              if (preorderedList != null) preorderedList.clear();\n          }\n  \n          if (newTouchTarget == null && mFirstTouchTarget != null) {\n              // Did not find a child to receive the event.\n              // Assign the pointer to the least recently added target.\n              newTouchTarget = mFirstTouchTarget;\n              while (newTouchTarget.next != null) {\n                  newTouchTarget = newTouchTarget.next;\n              }\n              newTouchTarget.pointerIdBits |= idBitsToAssign;\n          }\n      }\n  }\n  // ------------ 第三部分 结束 ------------      \n  ```\n\n  在5-1处，从外层往里层依次遍历子View，然后在5-2处判断子View是否能够接受处理事件，判断条件是`canViewReceivePointerEvents(child)`和`isTransformedTouchPointInView(x, y, child, null)`，具体代码如下：\n\n  ```java\n  private static boolean canViewReceivePointerEvents(@NonNull View child) {\n    \t// 是否可见，是否在播放动画\n      return (child.mViewFlags & VISIBILITY_MASK) == VISIBLE || child.getAnimation() != null;\n  }\n  ```\n\n  ```java\n  protected boolean isTransformedTouchPointInView(float x, float y, View child,\n          PointF outLocalPoint) {\n    \t// 判断点击事件是否在子View的区域内\n      final float[] point = getTempPoint();\n      point[0] = x;\n      point[1] = y;\n      transformPointToViewLocal(point, child);\n      final boolean isInView = child.pointInView(point[0], point[1]);\n      if (isInView && outLocalPoint != null) {\n          outLocalPoint.set(point[0], point[1]);\n      }\n      return isInView;\n  }\n  ```\n\n  就是说子View不能接收点击事件或者点击事件不在该子View的区域内，那么事件也就不会分发到这个子View去，跳过这个子View继续遍历。\n\n  如果子View满足这两个条件，那么事件就会传递给它来处理，进入5-3处的 `dispatchTransformedTouchEvent`来看，撇开那些判断条件，最终的处理结果都依赖下面的代码，\n\n  ```java\n  if (child == null) {\n      handled = super.dispatchTouchEvent(event);\n  } else {\n      handled = child.dispatchTouchEvent(event);\n  }\n  ```\n\n  这里child传入的不为null，所以这里会执行子View的`dispatchTouchEvent`，如果`dispatchTouchEvent`返回的是true，那就暂时不考虑子View内部的分发逻辑，这里会走进if判断条件，执行到5-4处。\n\n  ```java\n  private TouchTarget addTouchTarget(@NonNull View child, int pointerIdBits) {\n      final TouchTarget target = TouchTarget.obtain(child, pointerIdBits);\n      target.next = mFirstTouchTarget;\n      mFirstTouchTarget = target;\n      return target;\n  }\n  ```\n\n  这里是对`mFirstTouchTarget`进行赋值，然后将`mFirstTouchTarget`当成一个子View是否处理事件的标志。如果是有子View处理事件，将`mFirstTouchTarget`赋值后，然后就跳出遍历子View的循环，如果当前子View的`dispatchTransformedTouchEvent`返回的是false，则继续往下遍历子View。\n\n- 第四部分 根据`mFirstTouchTarget`来分发事件，为null则是将事件交由ViewGroup的onTouchEvent处理\n\n  ```java\n  // ------------ 第四部分 根据mFirstTouchTarget来分发事件，为null则是ViewGroup的onTouchEvent处理 ------------ \n  // Dispatch to touch targets.\n  if (mFirstTouchTarget == null) {\n      // No touch targets so treat this as an ordinary view.\n    \t// 6-1 如果事件被该ViewGroup拦截了，或者没有子view处理事件\n      handled = dispatchTransformedTouchEvent(ev, canceled, null,\n              TouchTarget.ALL_POINTER_IDS);\n  } else {\n      // Dispatch to touch targets, excluding the new touch target if we already\n      // dispatched to it.  Cancel touch targets if necessary.\n    \t// 6-1 遍历mFirstTouchTarget，分发事件\n      TouchTarget predecessor = null;\n      TouchTarget target = mFirstTouchTarget;\n      while (target != null) {\n          final TouchTarget next = target.next;\n          if (alreadyDispatchedToNewTouchTarget && target == newTouchTarget) {\n              handled = true;\n          } else {\n              final boolean cancelChild = resetCancelNextUpFlag(target.child)\n                      || intercepted;\n              if (dispatchTransformedTouchEvent(ev, cancelChild,\n                      target.child, target.pointerIdBits)) {\n                  handled = true;\n              }\n              if (cancelChild) {\n                  if (predecessor == null) {\n                      mFirstTouchTarget = next;\n                  } else {\n                      predecessor.next = next;\n                  }\n                  target.recycle();\n                  target = next;\n                  continue;\n              }\n          }\n          predecessor = target;\n          target = next;\n      }\n  }\n  // ------------ 第四部分 结束 ------------ \n  ```\n\n  接着第三部分，如果没有子View没有处理事件(1. 有可能没有子View 2. 子View处理了事件，dispatchTouchEvent返回false)，这个时候`mFirstTouchTarget`是没有赋值的，为null，那么会走到代码6-1处。\n\n  这里跟5-3处调用的是一个方法，但是child参数传递的是null，那么就会执行`super.dispatchTouchEvent(event)`这行代码，会跳转到ViewGroup的父类View的`dispatchTouchEvent`，而View的`dispatchTouchEvent`就会调用`onTouchEvent`，也就是该ViewGroup自己通过`onTouchEvent`方法来处理事件。\n\n到这里，ViewGroup里的事件分发与拦截就分析完毕了，事件要么就交由下层View继续处理，要么就走到自己的`onTouchEvent`方法里处理。如果下层View还是ViewGroup，则逻辑还是跟上面分析的一样，如果是View，那么流程就有点不同了。\n\n - View的dispatchTouchEvent\n\n   ```java\n   public boolean dispatchTouchEvent(MotionEvent event) {\n       // ...\n   \n       boolean result = false;\n   \n       // ...\n   \n       if (onFilterTouchEventForSecurity(event)) {\n           if ((mViewFlags & ENABLED_MASK) == ENABLED && handleScrollBarDragging(event)) {\n               result = true;\n           }\n           //noinspection SimplifiableIfStatement\n           ListenerInfo li = mListenerInfo;\n           // 7-1 判断是否设置了OnTouchListener，设置了就交由listener处理\n           if (li != null && li.mOnTouchListener != null\n                   && (mViewFlags & ENABLED_MASK) == ENABLED\n                   && li.mOnTouchListener.onTouch(this, event)) {\n               result = true;\n           }\n   \n           // 7-2 没设置OnTouchListener，交由View的onTouchEvent方法来处理事件\n           if (!result && onTouchEvent(event)) {\n               result = true;\n           }\n       }\n   \n       // ...\n   \n       return result;\n   }\n   ```\n\n   View因为没有下层的子View了，所以dispatchTouchEvent也比较简单，从代码7-1和7-2可以很清晰看到View分发事件的逻辑，首先看是否设置了OnTouchEventListener，如果没有设置listener，再去看该View的onTouchEvent方法。OnTouchEventListener的优先级是高于onTouchEvent方法的，这样就可以暴露OnTouchEventListener，方便于View在外面处理点击事件了。\n\n- View的onTouchEvent\n\n  ```java\n  public boolean onTouchEvent(MotionEvent event) {\n      final float x = event.getX();\n      final float y = event.getY();\n      final int viewFlags = mViewFlags;\n      final int action = event.getAction();\n  \n      // ------------ 第一部分 View处于不可用状态下点击事件的处理  ------------\n      final boolean clickable = ((viewFlags & CLICKABLE) == CLICKABLE\n              || (viewFlags & LONG_CLICKABLE) == LONG_CLICKABLE)\n              || (viewFlags & CONTEXT_CLICKABLE) == CONTEXT_CLICKABLE;\n  \n      if ((viewFlags & ENABLED_MASK) == DISABLED) {\n          if (action == MotionEvent.ACTION_UP && (mPrivateFlags & PFLAG_PRESSED) != 0) {\n              setPressed(false);\n          }\n          mPrivateFlags3 &= ~PFLAG3_FINGER_DOWN;\n          // A disabled view that is clickable still consumes the touch\n          // events, it just doesn't respond to them.\n        \t// 不可用状态下，view也会消耗事件，只是不响应它们\n          return clickable;\n      }\n      // ------------ 第一部分 结束  ------------\n      \n      // ------------ 第二部分 有TouchDelegate则交由TouchDelegate处理事件  ------------\n      if (mTouchDelegate != null) {\n          if (mTouchDelegate.onTouchEvent(event)) {\n              return true;\n          }\n      }\n      // ------------ 第二部分 结束  ------------\n    \n      // ------------ 第三部分 点击事件的具体处理  ------------\n      if (clickable || (viewFlags & TOOLTIP) == TOOLTIP) {\n          switch (action) {\n              case MotionEvent.ACTION_UP:\n                  mPrivateFlags3 &= ~PFLAG3_FINGER_DOWN;\n                  if ((viewFlags & TOOLTIP) == TOOLTIP) {\n                      handleTooltipUp();\n                  }\n                  if (!clickable) {\n                      removeTapCallback();\n                      removeLongPressCallback();\n                      mInContextButtonPress = false;\n                      mHasPerformedLongPress = false;\n                      mIgnoreNextUpEvent = false;\n                      break;\n                  }\n                  boolean prepressed = (mPrivateFlags & PFLAG_PREPRESSED) != 0;\n                  if ((mPrivateFlags & PFLAG_PRESSED) != 0 || prepressed) {\n                      // take focus if we don't have it already and we should in\n                      // touch mode.\n                      boolean focusTaken = false;\n                      if (isFocusable() && isFocusableInTouchMode() && !isFocused()) {\n                          focusTaken = requestFocus();\n                      }\n  \n                      if (prepressed) {\n                          // The button is being released before we actually\n                          // showed it as pressed.  Make it show the pressed\n                          // state now (before scheduling the click) to ensure\n                          // the user sees it.\n                          setPressed(true, x, y);\n                      }\n  \n                      if (!mHasPerformedLongPress && !mIgnoreNextUpEvent) {\n                          // This is a tap, so remove the longpress check\n                          removeLongPressCallback();\n  \n                          // Only perform take click actions if we were in the pressed state\n                          if (!focusTaken) {\n                              // Use a Runnable and post this rather than calling\n                              // performClick directly. This lets other visual state\n                              // of the view update before click actions start.\n                            \t// 8-1 针对点击事件处理 通过Runnable调用performClickInternal() ，最终调用performClick()方法\n                              if (mPerformClick == null) {\n                                  mPerformClick = new PerformClick();\n                              }\n                              if (!post(mPerformClick)) {\n                                  performClickInternal();\n                              }\n                          }\n                      }\n  \n                      if (mUnsetPressedState == null) {\n                          mUnsetPressedState = new UnsetPressedState();\n                      }\n  \n                      if (prepressed) {\n                          postDelayed(mUnsetPressedState,\n                                  ViewConfiguration.getPressedStateDuration());\n                      } else if (!post(mUnsetPressedState)) {\n                          // If the post failed, unpress right now\n                          mUnsetPressedState.run();\n                      }\n  \n                      removeTapCallback();\n                  }\n                  mIgnoreNextUpEvent = false;\n                  break;\n  \n              case MotionEvent.ACTION_DOWN:\n                  if (event.getSource() == InputDevice.SOURCE_TOUCHSCREEN) {\n                      mPrivateFlags3 |= PFLAG3_FINGER_DOWN;\n                  }\n                  mHasPerformedLongPress = false;\n  \n                  if (!clickable) {\n                    \t// 8-2 针对长按事件处理 \n                      checkForLongClick(0, x, y);\n                      break;\n                  }\n  \n                  if (performButtonActionOnTouchDown(event)) {\n                      break;\n                  }\n  \n                  // Walk up the hierarchy to determine if we're inside a scrolling container.\n                  boolean isInScrollingContainer = isInScrollingContainer();\n  \n                  // For views inside a scrolling container, delay the pressed feedback for\n                  // a short period in case this is a scroll.\n                  if (isInScrollingContainer) {\n                      mPrivateFlags |= PFLAG_PREPRESSED;\n                      if (mPendingCheckForTap == null) {\n                          mPendingCheckForTap = new CheckForTap();\n                      }\n                      mPendingCheckForTap.x = event.getX();\n                      mPendingCheckForTap.y = event.getY();\n                      postDelayed(mPendingCheckForTap, ViewConfiguration.getTapTimeout());\n                  } else {\n                      // Not inside a scrolling container, so show the feedback right away\n                      setPressed(true, x, y);\n                      checkForLongClick(0, x, y);\n                  }\n                  break;\n  \n              case MotionEvent.ACTION_CANCEL:\n                  if (clickable) {\n                      setPressed(false);\n                  }\n                  removeTapCallback();\n                  removeLongPressCallback();\n                  mInContextButtonPress = false;\n                  mHasPerformedLongPress = false;\n                  mIgnoreNextUpEvent = false;\n                  mPrivateFlags3 &= ~PFLAG3_FINGER_DOWN;\n                  break;\n  \n              case MotionEvent.ACTION_MOVE:\n                  if (clickable) {\n                      drawableHotspotChanged(x, y);\n                  }\n  \n                  // Be lenient about moving outside of buttons\n                  if (!pointInView(x, y, mTouchSlop)) {\n                      // Outside button\n                      // Remove any future long press/tap checks\n                      removeTapCallback();\n                      removeLongPressCallback();\n                      if ((mPrivateFlags & PFLAG_PRESSED) != 0) {\n                          setPressed(false);\n                      }\n                      mPrivateFlags3 &= ~PFLAG3_FINGER_DOWN;\n                  }\n                  break;\n          }\n          return true;\n      }\n      // ------------ 第三部分 结束  ------------\n      return false;\n  }\n  ```\n\n  从以上代码我们可以看到，View的OnTouchEvent方法主要分为三个部分，首先对不可用的状态进行处理，虽然处于不可用状态，但是还是会消费点击事件，只是没什么响应而已。第二部分则是对设置了`TouchDelegate`的处理。重点在第三部分，这里就是我们非常熟悉的针对MotionEvent不同action类型(DOWN、MOVE、CANCEL、UP)的处理。\n\n  其中8-1代码处就是针对点击事件处理，通过post Runnable调用`performClickInternal() `，确保view的状态在点击前进行一遍更新。最终调用`performClick()`方法\n\n  ```java\n  public boolean performClick() {\n      // We still need to call this method to handle the cases where performClick() was called\n      // externally, instead of through performClickInternal()\n      notifyAutofillManagerOnClick();\n  \n      final boolean result;\n      final ListenerInfo li = mListenerInfo;\n    \t// 在这里回调出去，具体处理View的onClick事件\n      if (li != null && li.mOnClickListener != null) {\n          playSoundEffect(SoundEffectConstants.CLICK);\n          li.mOnClickListener.onClick(this);\n          result = true;\n      } else {\n          result = false;\n      }\n  \n      sendAccessibilityEvent(AccessibilityEvent.TYPE_VIEW_CLICKED);\n  \n      notifyEnterOrExitForAutoFillIfNeeded(true);\n  \n      return result;\n  }\n  ```\n\n  8-2处代码是在MotionEvent.ACTION_DOWN里去判断view要不要响应长按事件，具体实现跟点击事件类似，最终响应到View的`OnLongClickListener`去处理长按事件，这里具体就不再展开了。\n\n总结\n\n1. `onInterceptTouchEvent`方法代表是否需要拦截事件，`onTouch`和`onTouchEvent`方法的返回值代表是否消费事件\n2. 事件从Activity一层一层往底部View进行分发，过程中，各个ViewGroup都可以选择拦截事件，拦截后则交由该ViewGroup的`onTouchEvent`处理，不再继续分发\n3. 都不拦截的情况下，会分发到子View，如果view都不选择消费事件，事件会通过`onTouchEvent`一层一层往上冒泡，直到回到Activity的`onTouchEvent`，有一层选择消费事件，则不再往上传递\n4. 子View可以通过`getParent().requestDisallowInterceptTouchEvent`来申请父控件不要拦截事件\n5. 如果View没有消费`ACTION_DOWN`事件，之后的`ACTION_MOVE\\ACTION_UP`事件不会再接收\n6. 当View设置了可点击、可常按，那么就算该View不可用，也会消费事件\n7. `onTouch`优先级比`onTouchEvent`高，只有`onTouch`不执行的情况下，才会执行`onTouchEvent`\n\n事件分发流程图如下：\n\n![Touch事件分发流程](https://bright-blog-1301150773.cos.ap-guangzhou.myqcloud.com/Touch%E4%BA%8B%E4%BB%B6%E5%88%86%E5%8F%91%E6%B5%81%E7%A8%8B.png)\n\n\n\n","slug":"事件分发源码分析","published":1,"updated":"2021-01-23T15:44:55.450Z","comments":1,"layout":"post","photos":[],"link":"","_id":"ckk9w1mfl000cfw0iuqevbbvc","content":"<p>首先事件最先传递给当前的Activity，由Activity的<code>dispatchTouchEvent</code>来进行事件分发。</p>\n<p>Activity的<code>dispatchTouchEvent</code>代码如下</p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div><div class=\"line\">14</div><div class=\"line\">15</div><div class=\"line\">16</div><div class=\"line\">17</div><div class=\"line\">18</div><div class=\"line\">19</div><div class=\"line\">20</div><div class=\"line\">21</div><div class=\"line\">22</div><div class=\"line\">23</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"comment\">/**</span></div><div class=\"line\">  * Called to process touch screen events.  You can override this to</div><div class=\"line\">  * intercept all touch screen events before they are dispatched to the</div><div class=\"line\">  * window.  Be sure to call this implementation for touch screen events</div><div class=\"line\">  * that should be handled normally.</div><div class=\"line\">  *</div><div class=\"line\">  * <span class=\"doctag\">@param</span> ev The touch screen event.</div><div class=\"line\">  *</div><div class=\"line\">  * <span class=\"doctag\">@return</span> boolean Return true if this event was consumed.</div><div class=\"line\">  */</div><div class=\"line\"><span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">boolean</span> <span class=\"title\">dispatchTouchEvent</span><span class=\"params\">(MotionEvent ev)</span> </span>&#123;</div><div class=\"line\">  <span class=\"keyword\">if</span> (ev.getAction() == MotionEvent.ACTION_DOWN) &#123;</div><div class=\"line\">    <span class=\"comment\">// 空方法 当键盘、触摸、trackball事件被分发到当前Activity时，这个方法被回调</span></div><div class=\"line\">    <span class=\"comment\">// 子类重写这个方法可以用于感知用户与设备的交互</span></div><div class=\"line\">    onUserInteraction();</div><div class=\"line\">  &#125;</div><div class=\"line\">  <span class=\"comment\">// 1-1 这里把MotionEvent交由Window去处理，如果结果是true，代表事件被消费了，直接返回true就行</span></div><div class=\"line\">  <span class=\"keyword\">if</span> (getWindow().superDispatchTouchEvent(ev)) &#123;</div><div class=\"line\">    <span class=\"keyword\">return</span> <span class=\"keyword\">true</span>;</div><div class=\"line\">  &#125;</div><div class=\"line\">  <span class=\"comment\">// 1-2 如果MotionEvent没有被处理，交回来给Activity的onTouchEvent来处理</span></div><div class=\"line\">  <span class=\"keyword\">return</span> onTouchEvent(ev);</div><div class=\"line\">&#125;</div></pre></td></tr></table></figure>\n<p>在1-1这里，Activity就把MotionEvent交给Window去处理了，我们知道，Window的唯一子类就是<code>PhoneWindow</code>，所以接下来的流程我们就跳转到<code>PhoneWindow</code>里去看。</p>\n<a id=\"more\"></a>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"comment\">// This is the top-level view of the window, containing the window decor.</span></div><div class=\"line\"><span class=\"keyword\">private</span> DecorView mDecor;</div><div class=\"line\"></div><div class=\"line\"><span class=\"meta\">@Override</span></div><div class=\"line\"><span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">boolean</span> <span class=\"title\">superDispatchTouchEvent</span><span class=\"params\">(MotionEvent event)</span> </span>&#123;</div><div class=\"line\">  <span class=\"comment\">// 2-1 PhoneWindow将MotionEvent移交给DecorView去处理</span></div><div class=\"line\">  <span class=\"keyword\">return</span> mDecor.superDispatchTouchEvent(event);</div><div class=\"line\">&#125;</div></pre></td></tr></table></figure>\n<p>2-1: PhoneWindow又将MotionEvent交由<code>DecorView</code>去处理</p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">boolean</span> <span class=\"title\">superDispatchTouchEvent</span><span class=\"params\">(MotionEvent event)</span> </span>&#123;</div><div class=\"line\">  <span class=\"comment\">// 3-1 DecorView其实是一个FrameLayout super.dispatchTouchEvent调用的是ViewGroup的方法</span></div><div class=\"line\">  <span class=\"keyword\">return</span> <span class=\"keyword\">super</span>.dispatchTouchEvent(event);</div><div class=\"line\">&#125;</div></pre></td></tr></table></figure>\n<p>我们知道<code>Window</code>、<code>DecorView</code>、<code>contentView</code>的层级如下图所示</p>\n<p><img src=\"https://bright-blog-1301150773.cos.ap-guangzhou.myqcloud.com/Window%E3%80%81DecorView%E3%80%81ContentView%E5%B1%82%E7%BA%A7%E5%85%B3%E7%B3%BB.png\" alt=\"Window、DecorView、ContentView层级关系\"></p>\n<p>DecorView的子控件<code>R.layout.screen_simple</code>、<code>R.id.content</code>这些都是ViewGroup。自己编写的<code>R.layout.main_activity</code>可以是View，也可以是ViewGroup。所以DecorView内部的控件就是ViewGroup一层一层嵌套，直到最后的View。所以我们继续从ViewGroup的<code>dispatchTouchEvent</code>往下看，这里也是ViewGroup分发事件的主要过程。</p>\n<p><code>dispatchTouchEvent</code>方法有点长，我们拆解一下来看看，首先，我们手机在屏幕上点击或滑动，都是一系列的事件，每一次事件都是从<code>MotionEvent.ACTION_DOWN</code>开始的</p>\n<ul>\n<li><p>第一部分，就是对事件系列中的最开始<code>MotionEvent.ACTION_DOWN</code>的处理</p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div><div class=\"line\">14</div><div class=\"line\">15</div><div class=\"line\">16</div><div class=\"line\">17</div><div class=\"line\">18</div><div class=\"line\">19</div><div class=\"line\">20</div><div class=\"line\">21</div><div class=\"line\">22</div><div class=\"line\">23</div><div class=\"line\">24</div><div class=\"line\">25</div><div class=\"line\">26</div><div class=\"line\">27</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">boolean</span> <span class=\"title\">dispatchTouchEvent</span><span class=\"params\">(MotionEvent ev)</span> </span>&#123;</div><div class=\"line\">  </div><div class=\"line\">    <span class=\"keyword\">boolean</span> handled = <span class=\"keyword\">false</span>;</div><div class=\"line\">    <span class=\"keyword\">if</span> (onFilterTouchEventForSecurity(ev)) &#123;</div><div class=\"line\">        <span class=\"comment\">// ------------ 第一部分 针对事件初始进行前置准备处理 ------------</span></div><div class=\"line\">        <span class=\"keyword\">final</span> <span class=\"keyword\">int</span> action = ev.getAction();</div><div class=\"line\">        <span class=\"keyword\">final</span> <span class=\"keyword\">int</span> actionMasked = action &amp; MotionEvent.ACTION_MASK;</div><div class=\"line\">        <span class=\"comment\">// 最初的DOWN事件处理</span></div><div class=\"line\">        <span class=\"keyword\">if</span> (actionMasked == MotionEvent.ACTION_DOWN) &#123;</div><div class=\"line\">            <span class=\"comment\">// Throw away all previous state when starting a new touch gesture.</span></div><div class=\"line\">            <span class=\"comment\">// The framework may have dropped the up or cancel event for the previous gesture</span></div><div class=\"line\">            <span class=\"comment\">// due to an app switch, ANR, or some other state change.</span></div><div class=\"line\">          \t<span class=\"comment\">// 4-1 向mFirstTouchTarget指向的子元素分发cancel事件，然后将mFirstTouchTarget清除置为null</span></div><div class=\"line\">            cancelAndClearTouchTargets(ev);</div><div class=\"line\">          \t<span class=\"comment\">// 4-2 重置所有触摸状态，为下一个事件周期做准备</span></div><div class=\"line\">            resetTouchState();</div><div class=\"line\">        &#125;</div><div class=\"line\">        <span class=\"comment\">// ------------ 第一部分 结束 ------------</span></div><div class=\"line\">      </div><div class=\"line\">\t\t\t\t<span class=\"comment\">// ...</span></div><div class=\"line\">    &#125;</div><div class=\"line\"></div><div class=\"line\">    <span class=\"keyword\">if</span> (!handled &amp;&amp; mInputEventConsistencyVerifier != <span class=\"keyword\">null</span>) &#123;</div><div class=\"line\">        mInputEventConsistencyVerifier.onUnhandledEvent(ev, <span class=\"number\">1</span>);</div><div class=\"line\">    &#125;</div><div class=\"line\">    <span class=\"keyword\">return</span> handled;</div><div class=\"line\">&#125;</div></pre></td></tr></table></figure>\n<p>4-1中<code>cancelAndClearTouchTargets</code>，作用就是清除之前的事件，为新一轮的事件分发做准备</p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div><div class=\"line\">14</div><div class=\"line\">15</div><div class=\"line\">16</div><div class=\"line\">17</div><div class=\"line\">18</div><div class=\"line\">19</div><div class=\"line\">20</div><div class=\"line\">21</div><div class=\"line\">22</div><div class=\"line\">23</div><div class=\"line\">24</div><div class=\"line\">25</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"function\"><span class=\"keyword\">private</span> <span class=\"keyword\">void</span> <span class=\"title\">cancelAndClearTouchTargets</span><span class=\"params\">(MotionEvent event)</span> </span>&#123;</div><div class=\"line\">    <span class=\"keyword\">if</span> (mFirstTouchTarget != <span class=\"keyword\">null</span>) &#123;</div><div class=\"line\">        <span class=\"keyword\">boolean</span> syntheticEvent = <span class=\"keyword\">false</span>;</div><div class=\"line\">        <span class=\"keyword\">if</span> (event == <span class=\"keyword\">null</span>) &#123;</div><div class=\"line\">            <span class=\"keyword\">final</span> <span class=\"keyword\">long</span> now = SystemClock.uptimeMillis();</div><div class=\"line\">          \t<span class=\"comment\">// 构建一个ACTION_CANCEL的事件</span></div><div class=\"line\">            event = MotionEvent.obtain(now, now,</div><div class=\"line\">                    MotionEvent.ACTION_CANCEL, <span class=\"number\">0.0f</span>, <span class=\"number\">0.0f</span>, <span class=\"number\">0</span>);</div><div class=\"line\">            event.setSource(InputDevice.SOURCE_TOUCHSCREEN);</div><div class=\"line\">            syntheticEvent = <span class=\"keyword\">true</span>;</div><div class=\"line\">        &#125;</div><div class=\"line\"></div><div class=\"line\">        <span class=\"keyword\">for</span> (TouchTarget target = mFirstTouchTarget; target != <span class=\"keyword\">null</span>; target = target.next) &#123;</div><div class=\"line\">            resetCancelNextUpFlag(target.child);</div><div class=\"line\">          \t<span class=\"comment\">// 向mFirstTouchTarget指向的子元素分发cancel事件</span></div><div class=\"line\">            dispatchTransformedTouchEvent(event, <span class=\"keyword\">true</span>, target.child, target.pointerIdBits);</div><div class=\"line\">        &#125;</div><div class=\"line\">      \t<span class=\"comment\">// 清除mFirstTouchTarget中的节点，置为null</span></div><div class=\"line\">        clearTouchTargets();</div><div class=\"line\"></div><div class=\"line\">        <span class=\"keyword\">if</span> (syntheticEvent) &#123;</div><div class=\"line\">            event.recycle();</div><div class=\"line\">        &#125;</div><div class=\"line\">    &#125;</div><div class=\"line\">&#125;</div></pre></td></tr></table></figure>\n<p>4-2中的<code>resetTouchState</code>就是 重置所有触摸状态，为下一个事件周期做准备</p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"function\"><span class=\"keyword\">private</span> <span class=\"keyword\">void</span> <span class=\"title\">resetTouchState</span><span class=\"params\">()</span> </span>&#123;</div><div class=\"line\">    clearTouchTargets();</div><div class=\"line\">    resetCancelNextUpFlag(<span class=\"keyword\">this</span>);</div><div class=\"line\">    mGroupFlags &amp;= ~FLAG_DISALLOW_INTERCEPT;</div><div class=\"line\">    mNestedScrollAxes = SCROLL_AXIS_NONE;</div><div class=\"line\">&#125;</div></pre></td></tr></table></figure>\n</li>\n<li><p>第二部分 处理当前ViewGroup是否要拦截事件</p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div><div class=\"line\">14</div><div class=\"line\">15</div><div class=\"line\">16</div><div class=\"line\">17</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"comment\">// ------------ 第二部分 判断当前ViewGroup是否需要拦截事件 ------------      </span></div><div class=\"line\">    <span class=\"comment\">// Check for interception.</span></div><div class=\"line\">    <span class=\"keyword\">final</span> <span class=\"keyword\">boolean</span> intercepted;</div><div class=\"line\">    <span class=\"keyword\">if</span> (actionMasked == MotionEvent.ACTION_DOWN || mFirstTouchTarget != <span class=\"keyword\">null</span>) &#123;</div><div class=\"line\">        <span class=\"keyword\">final</span> <span class=\"keyword\">boolean</span> disallowIntercept = (mGroupFlags &amp; FLAG_DISALLOW_INTERCEPT) != <span class=\"number\">0</span>;</div><div class=\"line\">        <span class=\"keyword\">if</span> (!disallowIntercept) &#123;</div><div class=\"line\">            intercepted = onInterceptTouchEvent(ev);</div><div class=\"line\">            ev.setAction(action); <span class=\"comment\">// restore action in case it was changed</span></div><div class=\"line\">        &#125; <span class=\"keyword\">else</span> &#123;</div><div class=\"line\">            intercepted = <span class=\"keyword\">false</span>;</div><div class=\"line\">        &#125;</div><div class=\"line\">    &#125; <span class=\"keyword\">else</span> &#123;</div><div class=\"line\">        <span class=\"comment\">// There are no touch targets and this action is not an initial down</span></div><div class=\"line\">        <span class=\"comment\">// so this view group continues to intercept touches.</span></div><div class=\"line\">        intercepted = <span class=\"keyword\">true</span>;</div><div class=\"line\">    &#125;</div><div class=\"line\"><span class=\"comment\">// ------------ 第二部分 结束 ------------</span></div></pre></td></tr></table></figure>\n<p>定义一个<code>boolean</code>类型的标志量<code>intercepted</code>，这个是用于记录该ViewGroup是否要拦截事件，可以看到 ViewGroup会在<code>actionMasked == MotionEvent.ACTION_DOWN</code>和<code>mFirstTouchTarget != null</code>这个条件下来进行是否需要拦截事件的判断，<code>mFirstTouchTarget</code>指向的是该ViewGroup的能处理事件成功的子View。那么如果ViewGroup拦截了事件，<code>mFirstTouchTarget</code>就是为null的，那么接下来的MOVE和UP事件则继续保持拦截状态，不会进入判断条件。</p>\n</li>\n</ul>\n<p>  然后在具体是否拦截的判断条件是是否设置了<code>FLAG_DISALLOW_INTERCEPT</code>标记位，如果设置了，该ViewGroup是不会拦截事件的，这个标志位一般是子View通过<code>getParent().requestDisallowInterceptTouchEvent(true)</code>来设置，子View请求父控件不要拦截事件。如果没有设置，再通过该ViewGroup自身的<code>onInterceptTouchEvent(ev)</code>方法返回值来判断是否需要拦截，这个方法通常就是继承类来覆写该方法来控制是否拦截事件。</p>\n<ul>\n<li><p>第三部分 遍历子View，判断子View是否需要拦截或处理事件</p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div><div class=\"line\">14</div><div class=\"line\">15</div><div class=\"line\">16</div><div class=\"line\">17</div><div class=\"line\">18</div><div class=\"line\">19</div><div class=\"line\">20</div><div class=\"line\">21</div><div class=\"line\">22</div><div class=\"line\">23</div><div class=\"line\">24</div><div class=\"line\">25</div><div class=\"line\">26</div><div class=\"line\">27</div><div class=\"line\">28</div><div class=\"line\">29</div><div class=\"line\">30</div><div class=\"line\">31</div><div class=\"line\">32</div><div class=\"line\">33</div><div class=\"line\">34</div><div class=\"line\">35</div><div class=\"line\">36</div><div class=\"line\">37</div><div class=\"line\">38</div><div class=\"line\">39</div><div class=\"line\">40</div><div class=\"line\">41</div><div class=\"line\">42</div><div class=\"line\">43</div><div class=\"line\">44</div><div class=\"line\">45</div><div class=\"line\">46</div><div class=\"line\">47</div><div class=\"line\">48</div><div class=\"line\">49</div><div class=\"line\">50</div><div class=\"line\">51</div><div class=\"line\">52</div><div class=\"line\">53</div><div class=\"line\">54</div><div class=\"line\">55</div><div class=\"line\">56</div><div class=\"line\">57</div><div class=\"line\">58</div><div class=\"line\">59</div><div class=\"line\">60</div><div class=\"line\">61</div><div class=\"line\">62</div><div class=\"line\">63</div><div class=\"line\">64</div><div class=\"line\">65</div><div class=\"line\">66</div><div class=\"line\">67</div><div class=\"line\">68</div><div class=\"line\">69</div><div class=\"line\">70</div><div class=\"line\">71</div><div class=\"line\">72</div><div class=\"line\">73</div><div class=\"line\">74</div><div class=\"line\">75</div><div class=\"line\">76</div><div class=\"line\">77</div><div class=\"line\">78</div><div class=\"line\">79</div><div class=\"line\">80</div><div class=\"line\">81</div><div class=\"line\">82</div><div class=\"line\">83</div><div class=\"line\">84</div><div class=\"line\">85</div><div class=\"line\">86</div><div class=\"line\">87</div><div class=\"line\">88</div><div class=\"line\">89</div><div class=\"line\">90</div><div class=\"line\">91</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"comment\">// ------------ 第三部分 遍历子View，判断子View是否需要拦截或处理事件 ------------      </span></div><div class=\"line\"><span class=\"comment\">// Check for cancelation.</span></div><div class=\"line\"><span class=\"keyword\">final</span> <span class=\"keyword\">boolean</span> canceled = resetCancelNextUpFlag(<span class=\"keyword\">this</span>)</div><div class=\"line\">        || actionMasked == MotionEvent.ACTION_CANCEL;</div><div class=\"line\"></div><div class=\"line\"><span class=\"comment\">// Update list of touch targets for pointer down, if needed.</span></div><div class=\"line\"><span class=\"keyword\">final</span> <span class=\"keyword\">boolean</span> split = (mGroupFlags &amp; FLAG_SPLIT_MOTION_EVENTS) != <span class=\"number\">0</span>;</div><div class=\"line\">TouchTarget newTouchTarget = <span class=\"keyword\">null</span>;</div><div class=\"line\"><span class=\"keyword\">boolean</span> alreadyDispatchedToNewTouchTarget = <span class=\"keyword\">false</span>;</div><div class=\"line\"><span class=\"keyword\">if</span> (!canceled &amp;&amp; !intercepted) &#123;</div><div class=\"line\">    <span class=\"keyword\">if</span> (actionMasked == MotionEvent.ACTION_DOWN</div><div class=\"line\">            || (split &amp;&amp; actionMasked == MotionEvent.ACTION_POINTER_DOWN)</div><div class=\"line\">            || actionMasked == MotionEvent.ACTION_HOVER_MOVE) &#123;</div><div class=\"line\">        <span class=\"keyword\">final</span> <span class=\"keyword\">int</span> actionIndex = ev.getActionIndex(); <span class=\"comment\">// always 0 for down</span></div><div class=\"line\">        <span class=\"keyword\">final</span> <span class=\"keyword\">int</span> idBitsToAssign = split ? <span class=\"number\">1</span> &lt;&lt; ev.getPointerId(actionIndex)</div><div class=\"line\">                : TouchTarget.ALL_POINTER_IDS;</div><div class=\"line\"></div><div class=\"line\">        <span class=\"comment\">// Clean up earlier touch targets for this pointer id in case they</span></div><div class=\"line\">        <span class=\"comment\">// have become out of sync.</span></div><div class=\"line\">        removePointersFromTouchTargets(idBitsToAssign);</div><div class=\"line\"></div><div class=\"line\">        <span class=\"keyword\">final</span> <span class=\"keyword\">int</span> childrenCount = mChildrenCount;</div><div class=\"line\">        <span class=\"keyword\">if</span> (newTouchTarget == <span class=\"keyword\">null</span> &amp;&amp; childrenCount != <span class=\"number\">0</span>) &#123;</div><div class=\"line\">            <span class=\"keyword\">final</span> <span class=\"keyword\">float</span> x = ev.getX(actionIndex);</div><div class=\"line\">            <span class=\"keyword\">final</span> <span class=\"keyword\">float</span> y = ev.getY(actionIndex);</div><div class=\"line\">            <span class=\"comment\">// Find a child that can receive the event.</span></div><div class=\"line\">            <span class=\"comment\">// Scan children from front to back.</span></div><div class=\"line\">            <span class=\"keyword\">final</span> ArrayList&lt;View&gt; preorderedList = buildTouchDispatchChildList();</div><div class=\"line\">            <span class=\"keyword\">final</span> <span class=\"keyword\">boolean</span> customOrder = preorderedList == <span class=\"keyword\">null</span></div><div class=\"line\">                    &amp;&amp; isChildrenDrawingOrderEnabled();</div><div class=\"line\">            <span class=\"keyword\">final</span> View[] children = mChildren;</div><div class=\"line\">          \t<span class=\"comment\">// 5-1 从最前面往里面遍历子View</span></div><div class=\"line\">            <span class=\"keyword\">for</span> (<span class=\"keyword\">int</span> i = childrenCount - <span class=\"number\">1</span>; i &gt;= <span class=\"number\">0</span>; i--) &#123;</div><div class=\"line\">                <span class=\"keyword\">final</span> <span class=\"keyword\">int</span> childIndex = getAndVerifyPreorderedIndex(</div><div class=\"line\">                        childrenCount, i, customOrder);</div><div class=\"line\">                <span class=\"keyword\">final</span> View child = getAndVerifyPreorderedView(</div><div class=\"line\">                        preorderedList, children, childIndex);</div><div class=\"line\">\t\t\t\t\t\t\t\t<span class=\"comment\">// 5-2 判断子View是否能够接受到事件</span></div><div class=\"line\">                <span class=\"keyword\">if</span> (!canViewReceivePointerEvents(child)</div><div class=\"line\">                        || !isTransformedTouchPointInView(x, y, child, <span class=\"keyword\">null</span>)) &#123;</div><div class=\"line\">                    ev.setTargetAccessibilityFocus(<span class=\"keyword\">false</span>);</div><div class=\"line\">                    <span class=\"keyword\">continue</span>;</div><div class=\"line\">                &#125;</div><div class=\"line\"></div><div class=\"line\">                newTouchTarget = getTouchTarget(child);</div><div class=\"line\">                <span class=\"keyword\">if</span> (newTouchTarget != <span class=\"keyword\">null</span>) &#123;</div><div class=\"line\">                    <span class=\"comment\">// Child is already receiving touch within its bounds.</span></div><div class=\"line\">                    <span class=\"comment\">// Give it the new pointer in addition to the ones it is handling.</span></div><div class=\"line\">                    newTouchTarget.pointerIdBits |= idBitsToAssign;</div><div class=\"line\">                    <span class=\"keyword\">break</span>;</div><div class=\"line\">                &#125;</div><div class=\"line\"></div><div class=\"line\">                resetCancelNextUpFlag(child);</div><div class=\"line\">              \t<span class=\"comment\">// 5-3 将事件交由子View去dispatchTouchEvent，看子View是否处理事件</span></div><div class=\"line\">                <span class=\"keyword\">if</span> (dispatchTransformedTouchEvent(ev, <span class=\"keyword\">false</span>, child, idBitsToAssign)) &#123;</div><div class=\"line\">                    <span class=\"comment\">// Child wants to receive touch within its bounds.</span></div><div class=\"line\">                    mLastTouchDownTime = ev.getDownTime();</div><div class=\"line\">                    <span class=\"keyword\">if</span> (preorderedList != <span class=\"keyword\">null</span>) &#123;</div><div class=\"line\">                        <span class=\"comment\">// childIndex points into presorted list, find original index</span></div><div class=\"line\">                        <span class=\"keyword\">for</span> (<span class=\"keyword\">int</span> j = <span class=\"number\">0</span>; j &lt; childrenCount; j++) &#123;</div><div class=\"line\">                            <span class=\"keyword\">if</span> (children[childIndex] == mChildren[j]) &#123;</div><div class=\"line\">                                mLastTouchDownIndex = j;</div><div class=\"line\">                                <span class=\"keyword\">break</span>;</div><div class=\"line\">                            &#125;</div><div class=\"line\">                        &#125;</div><div class=\"line\">                    &#125; <span class=\"keyword\">else</span> &#123;</div><div class=\"line\">                        mLastTouchDownIndex = childIndex;</div><div class=\"line\">                    &#125;</div><div class=\"line\">                    mLastTouchDownX = ev.getX();</div><div class=\"line\">                    mLastTouchDownY = ev.getY();</div><div class=\"line\">                  \t<span class=\"comment\">// 5-4 将处理事件的View添加到mFirstTouchTarget(链表)最前端</span></div><div class=\"line\">                    newTouchTarget = addTouchTarget(child, idBitsToAssign);</div><div class=\"line\">                    alreadyDispatchedToNewTouchTarget = <span class=\"keyword\">true</span>;</div><div class=\"line\">                    <span class=\"keyword\">break</span>;</div><div class=\"line\">                &#125;</div><div class=\"line\">            &#125;</div><div class=\"line\">            <span class=\"keyword\">if</span> (preorderedList != <span class=\"keyword\">null</span>) preorderedList.clear();</div><div class=\"line\">        &#125;</div><div class=\"line\"></div><div class=\"line\">        <span class=\"keyword\">if</span> (newTouchTarget == <span class=\"keyword\">null</span> &amp;&amp; mFirstTouchTarget != <span class=\"keyword\">null</span>) &#123;</div><div class=\"line\">            <span class=\"comment\">// Did not find a child to receive the event.</span></div><div class=\"line\">            <span class=\"comment\">// Assign the pointer to the least recently added target.</span></div><div class=\"line\">            newTouchTarget = mFirstTouchTarget;</div><div class=\"line\">            <span class=\"keyword\">while</span> (newTouchTarget.next != <span class=\"keyword\">null</span>) &#123;</div><div class=\"line\">                newTouchTarget = newTouchTarget.next;</div><div class=\"line\">            &#125;</div><div class=\"line\">            newTouchTarget.pointerIdBits |= idBitsToAssign;</div><div class=\"line\">        &#125;</div><div class=\"line\">    &#125;</div><div class=\"line\">&#125;</div><div class=\"line\"><span class=\"comment\">// ------------ 第三部分 结束 ------------</span></div></pre></td></tr></table></figure>\n<p>在5-1处，从外层往里层依次遍历子View，然后在5-2处判断子View是否能够接受处理事件，判断条件是<code>canViewReceivePointerEvents(child)</code>和<code>isTransformedTouchPointInView(x, y, child, null)</code>，具体代码如下：</p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"function\"><span class=\"keyword\">private</span> <span class=\"keyword\">static</span> <span class=\"keyword\">boolean</span> <span class=\"title\">canViewReceivePointerEvents</span><span class=\"params\">(@NonNull View child)</span> </span>&#123;</div><div class=\"line\">  \t<span class=\"comment\">// 是否可见，是否在播放动画</span></div><div class=\"line\">    <span class=\"keyword\">return</span> (child.mViewFlags &amp; VISIBILITY_MASK) == VISIBLE || child.getAnimation() != <span class=\"keyword\">null</span>;</div><div class=\"line\">&#125;</div></pre></td></tr></table></figure>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"function\"><span class=\"keyword\">protected</span> <span class=\"keyword\">boolean</span> <span class=\"title\">isTransformedTouchPointInView</span><span class=\"params\">(<span class=\"keyword\">float</span> x, <span class=\"keyword\">float</span> y, View child,</span></span></div><div class=\"line\">        PointF outLocalPoint) &#123;</div><div class=\"line\">  \t<span class=\"comment\">// 判断点击事件是否在子View的区域内</span></div><div class=\"line\">    <span class=\"keyword\">final</span> <span class=\"keyword\">float</span>[] point = getTempPoint();</div><div class=\"line\">    point[<span class=\"number\">0</span>] = x;</div><div class=\"line\">    point[<span class=\"number\">1</span>] = y;</div><div class=\"line\">    transformPointToViewLocal(point, child);</div><div class=\"line\">    <span class=\"keyword\">final</span> <span class=\"keyword\">boolean</span> isInView = child.pointInView(point[<span class=\"number\">0</span>], point[<span class=\"number\">1</span>]);</div><div class=\"line\">    <span class=\"keyword\">if</span> (isInView &amp;&amp; outLocalPoint != <span class=\"keyword\">null</span>) &#123;</div><div class=\"line\">        outLocalPoint.set(point[<span class=\"number\">0</span>], point[<span class=\"number\">1</span>]);</div><div class=\"line\">    &#125;</div><div class=\"line\">    <span class=\"keyword\">return</span> isInView;</div><div class=\"line\">&#125;</div></pre></td></tr></table></figure>\n<p>就是说子View不能接收点击事件或者点击事件不在该子View的区域内，那么事件也就不会分发到这个子View去，跳过这个子View继续遍历。</p>\n<p>如果子View满足这两个条件，那么事件就会传递给它来处理，进入5-3处的 <code>dispatchTransformedTouchEvent</code>来看，撇开那些判断条件，最终的处理结果都依赖下面的代码，</p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"keyword\">if</span> (child == <span class=\"keyword\">null</span>) &#123;</div><div class=\"line\">    handled = <span class=\"keyword\">super</span>.dispatchTouchEvent(event);</div><div class=\"line\">&#125; <span class=\"keyword\">else</span> &#123;</div><div class=\"line\">    handled = child.dispatchTouchEvent(event);</div><div class=\"line\">&#125;</div></pre></td></tr></table></figure>\n<p>这里child传入的不为null，所以这里会执行子View的<code>dispatchTouchEvent</code>，如果<code>dispatchTouchEvent</code>返回的是true，那就暂时不考虑子View内部的分发逻辑，这里会走进if判断条件，执行到5-4处。</p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"function\"><span class=\"keyword\">private</span> TouchTarget <span class=\"title\">addTouchTarget</span><span class=\"params\">(@NonNull View child, <span class=\"keyword\">int</span> pointerIdBits)</span> </span>&#123;</div><div class=\"line\">    <span class=\"keyword\">final</span> TouchTarget target = TouchTarget.obtain(child, pointerIdBits);</div><div class=\"line\">    target.next = mFirstTouchTarget;</div><div class=\"line\">    mFirstTouchTarget = target;</div><div class=\"line\">    <span class=\"keyword\">return</span> target;</div><div class=\"line\">&#125;</div></pre></td></tr></table></figure>\n<p>这里是对<code>mFirstTouchTarget</code>进行赋值，然后将<code>mFirstTouchTarget</code>当成一个子View是否处理事件的标志。如果是有子View处理事件，将<code>mFirstTouchTarget</code>赋值后，然后就跳出遍历子View的循环，如果当前子View的<code>dispatchTransformedTouchEvent</code>返回的是false，则继续往下遍历子View。</p>\n</li>\n<li><p>第四部分 根据<code>mFirstTouchTarget</code>来分发事件，为null则是将事件交由ViewGroup的onTouchEvent处理</p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div><div class=\"line\">14</div><div class=\"line\">15</div><div class=\"line\">16</div><div class=\"line\">17</div><div class=\"line\">18</div><div class=\"line\">19</div><div class=\"line\">20</div><div class=\"line\">21</div><div class=\"line\">22</div><div class=\"line\">23</div><div class=\"line\">24</div><div class=\"line\">25</div><div class=\"line\">26</div><div class=\"line\">27</div><div class=\"line\">28</div><div class=\"line\">29</div><div class=\"line\">30</div><div class=\"line\">31</div><div class=\"line\">32</div><div class=\"line\">33</div><div class=\"line\">34</div><div class=\"line\">35</div><div class=\"line\">36</div><div class=\"line\">37</div><div class=\"line\">38</div><div class=\"line\">39</div><div class=\"line\">40</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"comment\">// ------------ 第四部分 根据mFirstTouchTarget来分发事件，为null则是ViewGroup的onTouchEvent处理 ------------ </span></div><div class=\"line\"><span class=\"comment\">// Dispatch to touch targets.</span></div><div class=\"line\"><span class=\"keyword\">if</span> (mFirstTouchTarget == <span class=\"keyword\">null</span>) &#123;</div><div class=\"line\">    <span class=\"comment\">// No touch targets so treat this as an ordinary view.</span></div><div class=\"line\">  \t<span class=\"comment\">// 6-1 如果事件被该ViewGroup拦截了，或者没有子view处理事件</span></div><div class=\"line\">    handled = dispatchTransformedTouchEvent(ev, canceled, <span class=\"keyword\">null</span>,</div><div class=\"line\">            TouchTarget.ALL_POINTER_IDS);</div><div class=\"line\">&#125; <span class=\"keyword\">else</span> &#123;</div><div class=\"line\">    <span class=\"comment\">// Dispatch to touch targets, excluding the new touch target if we already</span></div><div class=\"line\">    <span class=\"comment\">// dispatched to it.  Cancel touch targets if necessary.</span></div><div class=\"line\">  \t<span class=\"comment\">// 6-1 遍历mFirstTouchTarget，分发事件</span></div><div class=\"line\">    TouchTarget predecessor = <span class=\"keyword\">null</span>;</div><div class=\"line\">    TouchTarget target = mFirstTouchTarget;</div><div class=\"line\">    <span class=\"keyword\">while</span> (target != <span class=\"keyword\">null</span>) &#123;</div><div class=\"line\">        <span class=\"keyword\">final</span> TouchTarget next = target.next;</div><div class=\"line\">        <span class=\"keyword\">if</span> (alreadyDispatchedToNewTouchTarget &amp;&amp; target == newTouchTarget) &#123;</div><div class=\"line\">            handled = <span class=\"keyword\">true</span>;</div><div class=\"line\">        &#125; <span class=\"keyword\">else</span> &#123;</div><div class=\"line\">            <span class=\"keyword\">final</span> <span class=\"keyword\">boolean</span> cancelChild = resetCancelNextUpFlag(target.child)</div><div class=\"line\">                    || intercepted;</div><div class=\"line\">            <span class=\"keyword\">if</span> (dispatchTransformedTouchEvent(ev, cancelChild,</div><div class=\"line\">                    target.child, target.pointerIdBits)) &#123;</div><div class=\"line\">                handled = <span class=\"keyword\">true</span>;</div><div class=\"line\">            &#125;</div><div class=\"line\">            <span class=\"keyword\">if</span> (cancelChild) &#123;</div><div class=\"line\">                <span class=\"keyword\">if</span> (predecessor == <span class=\"keyword\">null</span>) &#123;</div><div class=\"line\">                    mFirstTouchTarget = next;</div><div class=\"line\">                &#125; <span class=\"keyword\">else</span> &#123;</div><div class=\"line\">                    predecessor.next = next;</div><div class=\"line\">                &#125;</div><div class=\"line\">                target.recycle();</div><div class=\"line\">                target = next;</div><div class=\"line\">                <span class=\"keyword\">continue</span>;</div><div class=\"line\">            &#125;</div><div class=\"line\">        &#125;</div><div class=\"line\">        predecessor = target;</div><div class=\"line\">        target = next;</div><div class=\"line\">    &#125;</div><div class=\"line\">&#125;</div><div class=\"line\"><span class=\"comment\">// ------------ 第四部分 结束 ------------</span></div></pre></td></tr></table></figure>\n<p>接着第三部分，如果没有子View没有处理事件(1. 有可能没有子View 2. 子View处理了事件，dispatchTouchEvent返回false)，这个时候<code>mFirstTouchTarget</code>是没有赋值的，为null，那么会走到代码6-1处。</p>\n<p>这里跟5-3处调用的是一个方法，但是child参数传递的是null，那么就会执行<code>super.dispatchTouchEvent(event)</code>这行代码，会跳转到ViewGroup的父类View的<code>dispatchTouchEvent</code>，而View的<code>dispatchTouchEvent</code>就会调用<code>onTouchEvent</code>，也就是该ViewGroup自己通过<code>onTouchEvent</code>方法来处理事件。</p>\n</li>\n</ul>\n<p>到这里，ViewGroup里的事件分发与拦截就分析完毕了，事件要么就交由下层View继续处理，要么就走到自己的<code>onTouchEvent</code>方法里处理。如果下层View还是ViewGroup，则逻辑还是跟上面分析的一样，如果是View，那么流程就有点不同了。</p>\n<ul>\n<li><p>View的dispatchTouchEvent</p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div><div class=\"line\">14</div><div class=\"line\">15</div><div class=\"line\">16</div><div class=\"line\">17</div><div class=\"line\">18</div><div class=\"line\">19</div><div class=\"line\">20</div><div class=\"line\">21</div><div class=\"line\">22</div><div class=\"line\">23</div><div class=\"line\">24</div><div class=\"line\">25</div><div class=\"line\">26</div><div class=\"line\">27</div><div class=\"line\">28</div><div class=\"line\">29</div><div class=\"line\">30</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">boolean</span> <span class=\"title\">dispatchTouchEvent</span><span class=\"params\">(MotionEvent event)</span> </span>&#123;</div><div class=\"line\">    <span class=\"comment\">// ...</span></div><div class=\"line\"></div><div class=\"line\">    <span class=\"keyword\">boolean</span> result = <span class=\"keyword\">false</span>;</div><div class=\"line\"></div><div class=\"line\">    <span class=\"comment\">// ...</span></div><div class=\"line\"></div><div class=\"line\">    <span class=\"keyword\">if</span> (onFilterTouchEventForSecurity(event)) &#123;</div><div class=\"line\">        <span class=\"keyword\">if</span> ((mViewFlags &amp; ENABLED_MASK) == ENABLED &amp;&amp; handleScrollBarDragging(event)) &#123;</div><div class=\"line\">            result = <span class=\"keyword\">true</span>;</div><div class=\"line\">        &#125;</div><div class=\"line\">        <span class=\"comment\">//noinspection SimplifiableIfStatement</span></div><div class=\"line\">        ListenerInfo li = mListenerInfo;</div><div class=\"line\">        <span class=\"comment\">// 7-1 判断是否设置了OnTouchListener，设置了就交由listener处理</span></div><div class=\"line\">        <span class=\"keyword\">if</span> (li != <span class=\"keyword\">null</span> &amp;&amp; li.mOnTouchListener != <span class=\"keyword\">null</span></div><div class=\"line\">                &amp;&amp; (mViewFlags &amp; ENABLED_MASK) == ENABLED</div><div class=\"line\">                &amp;&amp; li.mOnTouchListener.onTouch(<span class=\"keyword\">this</span>, event)) &#123;</div><div class=\"line\">            result = <span class=\"keyword\">true</span>;</div><div class=\"line\">        &#125;</div><div class=\"line\"></div><div class=\"line\">        <span class=\"comment\">// 7-2 没设置OnTouchListener，交由View的onTouchEvent方法来处理事件</span></div><div class=\"line\">        <span class=\"keyword\">if</span> (!result &amp;&amp; onTouchEvent(event)) &#123;</div><div class=\"line\">            result = <span class=\"keyword\">true</span>;</div><div class=\"line\">        &#125;</div><div class=\"line\">    &#125;</div><div class=\"line\"></div><div class=\"line\">    <span class=\"comment\">// ...</span></div><div class=\"line\"></div><div class=\"line\">    <span class=\"keyword\">return</span> result;</div><div class=\"line\">&#125;</div></pre></td></tr></table></figure>\n<p>View因为没有下层的子View了，所以dispatchTouchEvent也比较简单，从代码7-1和7-2可以很清晰看到View分发事件的逻辑，首先看是否设置了OnTouchEventListener，如果没有设置listener，再去看该View的onTouchEvent方法。OnTouchEventListener的优先级是高于onTouchEvent方法的，这样就可以暴露OnTouchEventListener，方便于View在外面处理点击事件了。</p>\n</li>\n</ul>\n<ul>\n<li><p>View的onTouchEvent</p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div><div class=\"line\">14</div><div class=\"line\">15</div><div class=\"line\">16</div><div class=\"line\">17</div><div class=\"line\">18</div><div class=\"line\">19</div><div class=\"line\">20</div><div class=\"line\">21</div><div class=\"line\">22</div><div class=\"line\">23</div><div class=\"line\">24</div><div class=\"line\">25</div><div class=\"line\">26</div><div class=\"line\">27</div><div class=\"line\">28</div><div class=\"line\">29</div><div class=\"line\">30</div><div class=\"line\">31</div><div class=\"line\">32</div><div class=\"line\">33</div><div class=\"line\">34</div><div class=\"line\">35</div><div class=\"line\">36</div><div class=\"line\">37</div><div class=\"line\">38</div><div class=\"line\">39</div><div class=\"line\">40</div><div class=\"line\">41</div><div class=\"line\">42</div><div class=\"line\">43</div><div class=\"line\">44</div><div class=\"line\">45</div><div class=\"line\">46</div><div class=\"line\">47</div><div class=\"line\">48</div><div class=\"line\">49</div><div class=\"line\">50</div><div class=\"line\">51</div><div class=\"line\">52</div><div class=\"line\">53</div><div class=\"line\">54</div><div class=\"line\">55</div><div class=\"line\">56</div><div class=\"line\">57</div><div class=\"line\">58</div><div class=\"line\">59</div><div class=\"line\">60</div><div class=\"line\">61</div><div class=\"line\">62</div><div class=\"line\">63</div><div class=\"line\">64</div><div class=\"line\">65</div><div class=\"line\">66</div><div class=\"line\">67</div><div class=\"line\">68</div><div class=\"line\">69</div><div class=\"line\">70</div><div class=\"line\">71</div><div class=\"line\">72</div><div class=\"line\">73</div><div class=\"line\">74</div><div class=\"line\">75</div><div class=\"line\">76</div><div class=\"line\">77</div><div class=\"line\">78</div><div class=\"line\">79</div><div class=\"line\">80</div><div class=\"line\">81</div><div class=\"line\">82</div><div class=\"line\">83</div><div class=\"line\">84</div><div class=\"line\">85</div><div class=\"line\">86</div><div class=\"line\">87</div><div class=\"line\">88</div><div class=\"line\">89</div><div class=\"line\">90</div><div class=\"line\">91</div><div class=\"line\">92</div><div class=\"line\">93</div><div class=\"line\">94</div><div class=\"line\">95</div><div class=\"line\">96</div><div class=\"line\">97</div><div class=\"line\">98</div><div class=\"line\">99</div><div class=\"line\">100</div><div class=\"line\">101</div><div class=\"line\">102</div><div class=\"line\">103</div><div class=\"line\">104</div><div class=\"line\">105</div><div class=\"line\">106</div><div class=\"line\">107</div><div class=\"line\">108</div><div class=\"line\">109</div><div class=\"line\">110</div><div class=\"line\">111</div><div class=\"line\">112</div><div class=\"line\">113</div><div class=\"line\">114</div><div class=\"line\">115</div><div class=\"line\">116</div><div class=\"line\">117</div><div class=\"line\">118</div><div class=\"line\">119</div><div class=\"line\">120</div><div class=\"line\">121</div><div class=\"line\">122</div><div class=\"line\">123</div><div class=\"line\">124</div><div class=\"line\">125</div><div class=\"line\">126</div><div class=\"line\">127</div><div class=\"line\">128</div><div class=\"line\">129</div><div class=\"line\">130</div><div class=\"line\">131</div><div class=\"line\">132</div><div class=\"line\">133</div><div class=\"line\">134</div><div class=\"line\">135</div><div class=\"line\">136</div><div class=\"line\">137</div><div class=\"line\">138</div><div class=\"line\">139</div><div class=\"line\">140</div><div class=\"line\">141</div><div class=\"line\">142</div><div class=\"line\">143</div><div class=\"line\">144</div><div class=\"line\">145</div><div class=\"line\">146</div><div class=\"line\">147</div><div class=\"line\">148</div><div class=\"line\">149</div><div class=\"line\">150</div><div class=\"line\">151</div><div class=\"line\">152</div><div class=\"line\">153</div><div class=\"line\">154</div><div class=\"line\">155</div><div class=\"line\">156</div><div class=\"line\">157</div><div class=\"line\">158</div><div class=\"line\">159</div><div class=\"line\">160</div><div class=\"line\">161</div><div class=\"line\">162</div><div class=\"line\">163</div><div class=\"line\">164</div><div class=\"line\">165</div><div class=\"line\">166</div><div class=\"line\">167</div><div class=\"line\">168</div><div class=\"line\">169</div><div class=\"line\">170</div><div class=\"line\">171</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">boolean</span> <span class=\"title\">onTouchEvent</span><span class=\"params\">(MotionEvent event)</span> </span>&#123;</div><div class=\"line\">    <span class=\"keyword\">final</span> <span class=\"keyword\">float</span> x = event.getX();</div><div class=\"line\">    <span class=\"keyword\">final</span> <span class=\"keyword\">float</span> y = event.getY();</div><div class=\"line\">    <span class=\"keyword\">final</span> <span class=\"keyword\">int</span> viewFlags = mViewFlags;</div><div class=\"line\">    <span class=\"keyword\">final</span> <span class=\"keyword\">int</span> action = event.getAction();</div><div class=\"line\"></div><div class=\"line\">    <span class=\"comment\">// ------------ 第一部分 View处于不可用状态下点击事件的处理  ------------</span></div><div class=\"line\">    <span class=\"keyword\">final</span> <span class=\"keyword\">boolean</span> clickable = ((viewFlags &amp; CLICKABLE) == CLICKABLE</div><div class=\"line\">            || (viewFlags &amp; LONG_CLICKABLE) == LONG_CLICKABLE)</div><div class=\"line\">            || (viewFlags &amp; CONTEXT_CLICKABLE) == CONTEXT_CLICKABLE;</div><div class=\"line\"></div><div class=\"line\">    <span class=\"keyword\">if</span> ((viewFlags &amp; ENABLED_MASK) == DISABLED) &#123;</div><div class=\"line\">        <span class=\"keyword\">if</span> (action == MotionEvent.ACTION_UP &amp;&amp; (mPrivateFlags &amp; PFLAG_PRESSED) != <span class=\"number\">0</span>) &#123;</div><div class=\"line\">            setPressed(<span class=\"keyword\">false</span>);</div><div class=\"line\">        &#125;</div><div class=\"line\">        mPrivateFlags3 &amp;= ~PFLAG3_FINGER_DOWN;</div><div class=\"line\">        <span class=\"comment\">// A disabled view that is clickable still consumes the touch</span></div><div class=\"line\">        <span class=\"comment\">// events, it just doesn't respond to them.</span></div><div class=\"line\">      \t<span class=\"comment\">// 不可用状态下，view也会消耗事件，只是不响应它们</span></div><div class=\"line\">        <span class=\"keyword\">return</span> clickable;</div><div class=\"line\">    &#125;</div><div class=\"line\">    <span class=\"comment\">// ------------ 第一部分 结束  ------------</span></div><div class=\"line\">    </div><div class=\"line\">    <span class=\"comment\">// ------------ 第二部分 有TouchDelegate则交由TouchDelegate处理事件  ------------</span></div><div class=\"line\">    <span class=\"keyword\">if</span> (mTouchDelegate != <span class=\"keyword\">null</span>) &#123;</div><div class=\"line\">        <span class=\"keyword\">if</span> (mTouchDelegate.onTouchEvent(event)) &#123;</div><div class=\"line\">            <span class=\"keyword\">return</span> <span class=\"keyword\">true</span>;</div><div class=\"line\">        &#125;</div><div class=\"line\">    &#125;</div><div class=\"line\">    <span class=\"comment\">// ------------ 第二部分 结束  ------------</span></div><div class=\"line\">  </div><div class=\"line\">    <span class=\"comment\">// ------------ 第三部分 点击事件的具体处理  ------------</span></div><div class=\"line\">    <span class=\"keyword\">if</span> (clickable || (viewFlags &amp; TOOLTIP) == TOOLTIP) &#123;</div><div class=\"line\">        <span class=\"keyword\">switch</span> (action) &#123;</div><div class=\"line\">            <span class=\"keyword\">case</span> MotionEvent.ACTION_UP:</div><div class=\"line\">                mPrivateFlags3 &amp;= ~PFLAG3_FINGER_DOWN;</div><div class=\"line\">                <span class=\"keyword\">if</span> ((viewFlags &amp; TOOLTIP) == TOOLTIP) &#123;</div><div class=\"line\">                    handleTooltipUp();</div><div class=\"line\">                &#125;</div><div class=\"line\">                <span class=\"keyword\">if</span> (!clickable) &#123;</div><div class=\"line\">                    removeTapCallback();</div><div class=\"line\">                    removeLongPressCallback();</div><div class=\"line\">                    mInContextButtonPress = <span class=\"keyword\">false</span>;</div><div class=\"line\">                    mHasPerformedLongPress = <span class=\"keyword\">false</span>;</div><div class=\"line\">                    mIgnoreNextUpEvent = <span class=\"keyword\">false</span>;</div><div class=\"line\">                    <span class=\"keyword\">break</span>;</div><div class=\"line\">                &#125;</div><div class=\"line\">                <span class=\"keyword\">boolean</span> prepressed = (mPrivateFlags &amp; PFLAG_PREPRESSED) != <span class=\"number\">0</span>;</div><div class=\"line\">                <span class=\"keyword\">if</span> ((mPrivateFlags &amp; PFLAG_PRESSED) != <span class=\"number\">0</span> || prepressed) &#123;</div><div class=\"line\">                    <span class=\"comment\">// take focus if we don't have it already and we should in</span></div><div class=\"line\">                    <span class=\"comment\">// touch mode.</span></div><div class=\"line\">                    <span class=\"keyword\">boolean</span> focusTaken = <span class=\"keyword\">false</span>;</div><div class=\"line\">                    <span class=\"keyword\">if</span> (isFocusable() &amp;&amp; isFocusableInTouchMode() &amp;&amp; !isFocused()) &#123;</div><div class=\"line\">                        focusTaken = requestFocus();</div><div class=\"line\">                    &#125;</div><div class=\"line\"></div><div class=\"line\">                    <span class=\"keyword\">if</span> (prepressed) &#123;</div><div class=\"line\">                        <span class=\"comment\">// The button is being released before we actually</span></div><div class=\"line\">                        <span class=\"comment\">// showed it as pressed.  Make it show the pressed</span></div><div class=\"line\">                        <span class=\"comment\">// state now (before scheduling the click) to ensure</span></div><div class=\"line\">                        <span class=\"comment\">// the user sees it.</span></div><div class=\"line\">                        setPressed(<span class=\"keyword\">true</span>, x, y);</div><div class=\"line\">                    &#125;</div><div class=\"line\"></div><div class=\"line\">                    <span class=\"keyword\">if</span> (!mHasPerformedLongPress &amp;&amp; !mIgnoreNextUpEvent) &#123;</div><div class=\"line\">                        <span class=\"comment\">// This is a tap, so remove the longpress check</span></div><div class=\"line\">                        removeLongPressCallback();</div><div class=\"line\"></div><div class=\"line\">                        <span class=\"comment\">// Only perform take click actions if we were in the pressed state</span></div><div class=\"line\">                        <span class=\"keyword\">if</span> (!focusTaken) &#123;</div><div class=\"line\">                            <span class=\"comment\">// Use a Runnable and post this rather than calling</span></div><div class=\"line\">                            <span class=\"comment\">// performClick directly. This lets other visual state</span></div><div class=\"line\">                            <span class=\"comment\">// of the view update before click actions start.</span></div><div class=\"line\">                          \t<span class=\"comment\">// 8-1 针对点击事件处理 通过Runnable调用performClickInternal() ，最终调用performClick()方法</span></div><div class=\"line\">                            <span class=\"keyword\">if</span> (mPerformClick == <span class=\"keyword\">null</span>) &#123;</div><div class=\"line\">                                mPerformClick = <span class=\"keyword\">new</span> PerformClick();</div><div class=\"line\">                            &#125;</div><div class=\"line\">                            <span class=\"keyword\">if</span> (!post(mPerformClick)) &#123;</div><div class=\"line\">                                performClickInternal();</div><div class=\"line\">                            &#125;</div><div class=\"line\">                        &#125;</div><div class=\"line\">                    &#125;</div><div class=\"line\"></div><div class=\"line\">                    <span class=\"keyword\">if</span> (mUnsetPressedState == <span class=\"keyword\">null</span>) &#123;</div><div class=\"line\">                        mUnsetPressedState = <span class=\"keyword\">new</span> UnsetPressedState();</div><div class=\"line\">                    &#125;</div><div class=\"line\"></div><div class=\"line\">                    <span class=\"keyword\">if</span> (prepressed) &#123;</div><div class=\"line\">                        postDelayed(mUnsetPressedState,</div><div class=\"line\">                                ViewConfiguration.getPressedStateDuration());</div><div class=\"line\">                    &#125; <span class=\"keyword\">else</span> <span class=\"keyword\">if</span> (!post(mUnsetPressedState)) &#123;</div><div class=\"line\">                        <span class=\"comment\">// If the post failed, unpress right now</span></div><div class=\"line\">                        mUnsetPressedState.run();</div><div class=\"line\">                    &#125;</div><div class=\"line\"></div><div class=\"line\">                    removeTapCallback();</div><div class=\"line\">                &#125;</div><div class=\"line\">                mIgnoreNextUpEvent = <span class=\"keyword\">false</span>;</div><div class=\"line\">                <span class=\"keyword\">break</span>;</div><div class=\"line\"></div><div class=\"line\">            <span class=\"keyword\">case</span> MotionEvent.ACTION_DOWN:</div><div class=\"line\">                <span class=\"keyword\">if</span> (event.getSource() == InputDevice.SOURCE_TOUCHSCREEN) &#123;</div><div class=\"line\">                    mPrivateFlags3 |= PFLAG3_FINGER_DOWN;</div><div class=\"line\">                &#125;</div><div class=\"line\">                mHasPerformedLongPress = <span class=\"keyword\">false</span>;</div><div class=\"line\"></div><div class=\"line\">                <span class=\"keyword\">if</span> (!clickable) &#123;</div><div class=\"line\">                  \t<span class=\"comment\">// 8-2 针对长按事件处理 </span></div><div class=\"line\">                    checkForLongClick(<span class=\"number\">0</span>, x, y);</div><div class=\"line\">                    <span class=\"keyword\">break</span>;</div><div class=\"line\">                &#125;</div><div class=\"line\"></div><div class=\"line\">                <span class=\"keyword\">if</span> (performButtonActionOnTouchDown(event)) &#123;</div><div class=\"line\">                    <span class=\"keyword\">break</span>;</div><div class=\"line\">                &#125;</div><div class=\"line\"></div><div class=\"line\">                <span class=\"comment\">// Walk up the hierarchy to determine if we're inside a scrolling container.</span></div><div class=\"line\">                <span class=\"keyword\">boolean</span> isInScrollingContainer = isInScrollingContainer();</div><div class=\"line\"></div><div class=\"line\">                <span class=\"comment\">// For views inside a scrolling container, delay the pressed feedback for</span></div><div class=\"line\">                <span class=\"comment\">// a short period in case this is a scroll.</span></div><div class=\"line\">                <span class=\"keyword\">if</span> (isInScrollingContainer) &#123;</div><div class=\"line\">                    mPrivateFlags |= PFLAG_PREPRESSED;</div><div class=\"line\">                    <span class=\"keyword\">if</span> (mPendingCheckForTap == <span class=\"keyword\">null</span>) &#123;</div><div class=\"line\">                        mPendingCheckForTap = <span class=\"keyword\">new</span> CheckForTap();</div><div class=\"line\">                    &#125;</div><div class=\"line\">                    mPendingCheckForTap.x = event.getX();</div><div class=\"line\">                    mPendingCheckForTap.y = event.getY();</div><div class=\"line\">                    postDelayed(mPendingCheckForTap, ViewConfiguration.getTapTimeout());</div><div class=\"line\">                &#125; <span class=\"keyword\">else</span> &#123;</div><div class=\"line\">                    <span class=\"comment\">// Not inside a scrolling container, so show the feedback right away</span></div><div class=\"line\">                    setPressed(<span class=\"keyword\">true</span>, x, y);</div><div class=\"line\">                    checkForLongClick(<span class=\"number\">0</span>, x, y);</div><div class=\"line\">                &#125;</div><div class=\"line\">                <span class=\"keyword\">break</span>;</div><div class=\"line\"></div><div class=\"line\">            <span class=\"keyword\">case</span> MotionEvent.ACTION_CANCEL:</div><div class=\"line\">                <span class=\"keyword\">if</span> (clickable) &#123;</div><div class=\"line\">                    setPressed(<span class=\"keyword\">false</span>);</div><div class=\"line\">                &#125;</div><div class=\"line\">                removeTapCallback();</div><div class=\"line\">                removeLongPressCallback();</div><div class=\"line\">                mInContextButtonPress = <span class=\"keyword\">false</span>;</div><div class=\"line\">                mHasPerformedLongPress = <span class=\"keyword\">false</span>;</div><div class=\"line\">                mIgnoreNextUpEvent = <span class=\"keyword\">false</span>;</div><div class=\"line\">                mPrivateFlags3 &amp;= ~PFLAG3_FINGER_DOWN;</div><div class=\"line\">                <span class=\"keyword\">break</span>;</div><div class=\"line\"></div><div class=\"line\">            <span class=\"keyword\">case</span> MotionEvent.ACTION_MOVE:</div><div class=\"line\">                <span class=\"keyword\">if</span> (clickable) &#123;</div><div class=\"line\">                    drawableHotspotChanged(x, y);</div><div class=\"line\">                &#125;</div><div class=\"line\"></div><div class=\"line\">                <span class=\"comment\">// Be lenient about moving outside of buttons</span></div><div class=\"line\">                <span class=\"keyword\">if</span> (!pointInView(x, y, mTouchSlop)) &#123;</div><div class=\"line\">                    <span class=\"comment\">// Outside button</span></div><div class=\"line\">                    <span class=\"comment\">// Remove any future long press/tap checks</span></div><div class=\"line\">                    removeTapCallback();</div><div class=\"line\">                    removeLongPressCallback();</div><div class=\"line\">                    <span class=\"keyword\">if</span> ((mPrivateFlags &amp; PFLAG_PRESSED) != <span class=\"number\">0</span>) &#123;</div><div class=\"line\">                        setPressed(<span class=\"keyword\">false</span>);</div><div class=\"line\">                    &#125;</div><div class=\"line\">                    mPrivateFlags3 &amp;= ~PFLAG3_FINGER_DOWN;</div><div class=\"line\">                &#125;</div><div class=\"line\">                <span class=\"keyword\">break</span>;</div><div class=\"line\">        &#125;</div><div class=\"line\">        <span class=\"keyword\">return</span> <span class=\"keyword\">true</span>;</div><div class=\"line\">    &#125;</div><div class=\"line\">    <span class=\"comment\">// ------------ 第三部分 结束  ------------</span></div><div class=\"line\">    <span class=\"keyword\">return</span> <span class=\"keyword\">false</span>;</div><div class=\"line\">&#125;</div></pre></td></tr></table></figure>\n<p>从以上代码我们可以看到，View的OnTouchEvent方法主要分为三个部分，首先对不可用的状态进行处理，虽然处于不可用状态，但是还是会消费点击事件，只是没什么响应而已。第二部分则是对设置了<code>TouchDelegate</code>的处理。重点在第三部分，这里就是我们非常熟悉的针对MotionEvent不同action类型(DOWN、MOVE、CANCEL、UP)的处理。</p>\n<p>其中8-1代码处就是针对点击事件处理，通过post Runnable调用<code>performClickInternal()</code>，确保view的状态在点击前进行一遍更新。最终调用<code>performClick()</code>方法</p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div><div class=\"line\">14</div><div class=\"line\">15</div><div class=\"line\">16</div><div class=\"line\">17</div><div class=\"line\">18</div><div class=\"line\">19</div><div class=\"line\">20</div><div class=\"line\">21</div><div class=\"line\">22</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">boolean</span> <span class=\"title\">performClick</span><span class=\"params\">()</span> </span>&#123;</div><div class=\"line\">    <span class=\"comment\">// We still need to call this method to handle the cases where performClick() was called</span></div><div class=\"line\">    <span class=\"comment\">// externally, instead of through performClickInternal()</span></div><div class=\"line\">    notifyAutofillManagerOnClick();</div><div class=\"line\"></div><div class=\"line\">    <span class=\"keyword\">final</span> <span class=\"keyword\">boolean</span> result;</div><div class=\"line\">    <span class=\"keyword\">final</span> ListenerInfo li = mListenerInfo;</div><div class=\"line\">  \t<span class=\"comment\">// 在这里回调出去，具体处理View的onClick事件</span></div><div class=\"line\">    <span class=\"keyword\">if</span> (li != <span class=\"keyword\">null</span> &amp;&amp; li.mOnClickListener != <span class=\"keyword\">null</span>) &#123;</div><div class=\"line\">        playSoundEffect(SoundEffectConstants.CLICK);</div><div class=\"line\">        li.mOnClickListener.onClick(<span class=\"keyword\">this</span>);</div><div class=\"line\">        result = <span class=\"keyword\">true</span>;</div><div class=\"line\">    &#125; <span class=\"keyword\">else</span> &#123;</div><div class=\"line\">        result = <span class=\"keyword\">false</span>;</div><div class=\"line\">    &#125;</div><div class=\"line\"></div><div class=\"line\">    sendAccessibilityEvent(AccessibilityEvent.TYPE_VIEW_CLICKED);</div><div class=\"line\"></div><div class=\"line\">    notifyEnterOrExitForAutoFillIfNeeded(<span class=\"keyword\">true</span>);</div><div class=\"line\"></div><div class=\"line\">    <span class=\"keyword\">return</span> result;</div><div class=\"line\">&#125;</div></pre></td></tr></table></figure>\n<p>8-2处代码是在MotionEvent.ACTION_DOWN里去判断view要不要响应长按事件，具体实现跟点击事件类似，最终响应到View的<code>OnLongClickListener</code>去处理长按事件，这里具体就不再展开了。</p>\n</li>\n</ul>\n<p>总结</p>\n<ol>\n<li><code>onInterceptTouchEvent</code>方法代表是否需要拦截事件，<code>onTouch</code>和<code>onTouchEvent</code>方法的返回值代表是否消费事件</li>\n<li>事件从Activity一层一层往底部View进行分发，过程中，各个ViewGroup都可以选择拦截事件，拦截后则交由该ViewGroup的<code>onTouchEvent</code>处理，不再继续分发</li>\n<li>都不拦截的情况下，会分发到子View，如果view都不选择消费事件，事件会通过<code>onTouchEvent</code>一层一层往上冒泡，直到回到Activity的<code>onTouchEvent</code>，有一层选择消费事件，则不再往上传递</li>\n<li>子View可以通过<code>getParent().requestDisallowInterceptTouchEvent</code>来申请父控件不要拦截事件</li>\n<li>如果View没有消费<code>ACTION_DOWN</code>事件，之后的<code>ACTION_MOVE\\ACTION_UP</code>事件不会再接收</li>\n<li>当View设置了可点击、可常按，那么就算该View不可用，也会消费事件</li>\n<li><code>onTouch</code>优先级比<code>onTouchEvent</code>高，只有<code>onTouch</code>不执行的情况下，才会执行<code>onTouchEvent</code></li>\n</ol>\n<p>事件分发流程图如下：</p>\n<p><img src=\"https://bright-blog-1301150773.cos.ap-guangzhou.myqcloud.com/Touch%E4%BA%8B%E4%BB%B6%E5%88%86%E5%8F%91%E6%B5%81%E7%A8%8B.png\" alt=\"Touch事件分发流程\"></p>\n","excerpt":"<p>首先事件最先传递给当前的Activity，由Activity的<code>dispatchTouchEvent</code>来进行事件分发。</p>\n<p>Activity的<code>dispatchTouchEvent</code>代码如下</p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div><div class=\"line\">14</div><div class=\"line\">15</div><div class=\"line\">16</div><div class=\"line\">17</div><div class=\"line\">18</div><div class=\"line\">19</div><div class=\"line\">20</div><div class=\"line\">21</div><div class=\"line\">22</div><div class=\"line\">23</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"comment\">/**</div><div class=\"line\">  * Called to process touch screen events.  You can override this to</div><div class=\"line\">  * intercept all touch screen events before they are dispatched to the</div><div class=\"line\">  * window.  Be sure to call this implementation for touch screen events</div><div class=\"line\">  * that should be handled normally.</div><div class=\"line\">  *</div><div class=\"line\">  * <span class=\"doctag\">@param</span> ev The touch screen event.</div><div class=\"line\">  *</div><div class=\"line\">  * <span class=\"doctag\">@return</span> boolean Return true if this event was consumed.</div><div class=\"line\">  */</span></div><div class=\"line\"><span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">boolean</span> <span class=\"title\">dispatchTouchEvent</span><span class=\"params\">(MotionEvent ev)</span> </span>&#123;</div><div class=\"line\">  <span class=\"keyword\">if</span> (ev.getAction() == MotionEvent.ACTION_DOWN) &#123;</div><div class=\"line\">    <span class=\"comment\">// 空方法 当键盘、触摸、trackball事件被分发到当前Activity时，这个方法被回调</span></div><div class=\"line\">    <span class=\"comment\">// 子类重写这个方法可以用于感知用户与设备的交互</span></div><div class=\"line\">    onUserInteraction();</div><div class=\"line\">  &#125;</div><div class=\"line\">  <span class=\"comment\">// 1-1 这里把MotionEvent交由Window去处理，如果结果是true，代表事件被消费了，直接返回true就行</span></div><div class=\"line\">  <span class=\"keyword\">if</span> (getWindow().superDispatchTouchEvent(ev)) &#123;</div><div class=\"line\">    <span class=\"keyword\">return</span> <span class=\"keyword\">true</span>;</div><div class=\"line\">  &#125;</div><div class=\"line\">  <span class=\"comment\">// 1-2 如果MotionEvent没有被处理，交回来给Activity的onTouchEvent来处理</span></div><div class=\"line\">  <span class=\"keyword\">return</span> onTouchEvent(ev);</div><div class=\"line\">&#125;</div></pre></td></tr></table></figure>\n<p>在1-1这里，Activity就把MotionEvent交给Window去处理了，我们知道，Window的唯一子类就是<code>PhoneWindow</code>，所以接下来的流程我们就跳转到<code>PhoneWindow</code>里去看。</p>","more":"<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"comment\">// This is the top-level view of the window, containing the window decor.</span></div><div class=\"line\"><span class=\"keyword\">private</span> DecorView mDecor;</div><div class=\"line\"></div><div class=\"line\"><span class=\"meta\">@Override</span></div><div class=\"line\"><span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">boolean</span> <span class=\"title\">superDispatchTouchEvent</span><span class=\"params\">(MotionEvent event)</span> </span>&#123;</div><div class=\"line\">  <span class=\"comment\">// 2-1 PhoneWindow将MotionEvent移交给DecorView去处理</span></div><div class=\"line\">  <span class=\"keyword\">return</span> mDecor.superDispatchTouchEvent(event);</div><div class=\"line\">&#125;</div></pre></td></tr></table></figure>\n<p>2-1: PhoneWindow又将MotionEvent交由<code>DecorView</code>去处理</p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">boolean</span> <span class=\"title\">superDispatchTouchEvent</span><span class=\"params\">(MotionEvent event)</span> </span>&#123;</div><div class=\"line\">  <span class=\"comment\">// 3-1 DecorView其实是一个FrameLayout super.dispatchTouchEvent调用的是ViewGroup的方法</span></div><div class=\"line\">  <span class=\"keyword\">return</span> <span class=\"keyword\">super</span>.dispatchTouchEvent(event);</div><div class=\"line\">&#125;</div></pre></td></tr></table></figure>\n<p>我们知道<code>Window</code>、<code>DecorView</code>、<code>contentView</code>的层级如下图所示</p>\n<p><img src=\"https://bright-blog-1301150773.cos.ap-guangzhou.myqcloud.com/Window%E3%80%81DecorView%E3%80%81ContentView%E5%B1%82%E7%BA%A7%E5%85%B3%E7%B3%BB.png\" alt=\"Window、DecorView、ContentView层级关系\"></p>\n<p>DecorView的子控件<code>R.layout.screen_simple</code>、<code>R.id.content</code>这些都是ViewGroup。自己编写的<code>R.layout.main_activity</code>可以是View，也可以是ViewGroup。所以DecorView内部的控件就是ViewGroup一层一层嵌套，直到最后的View。所以我们继续从ViewGroup的<code>dispatchTouchEvent</code>往下看，这里也是ViewGroup分发事件的主要过程。</p>\n<p><code>dispatchTouchEvent</code>方法有点长，我们拆解一下来看看，首先，我们手机在屏幕上点击或滑动，都是一系列的事件，每一次事件都是从<code>MotionEvent.ACTION_DOWN</code>开始的</p>\n<ul>\n<li><p>第一部分，就是对事件系列中的最开始<code>MotionEvent.ACTION_DOWN</code>的处理</p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div><div class=\"line\">14</div><div class=\"line\">15</div><div class=\"line\">16</div><div class=\"line\">17</div><div class=\"line\">18</div><div class=\"line\">19</div><div class=\"line\">20</div><div class=\"line\">21</div><div class=\"line\">22</div><div class=\"line\">23</div><div class=\"line\">24</div><div class=\"line\">25</div><div class=\"line\">26</div><div class=\"line\">27</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">boolean</span> <span class=\"title\">dispatchTouchEvent</span><span class=\"params\">(MotionEvent ev)</span> </span>&#123;</div><div class=\"line\">  </div><div class=\"line\">    <span class=\"keyword\">boolean</span> handled = <span class=\"keyword\">false</span>;</div><div class=\"line\">    <span class=\"keyword\">if</span> (onFilterTouchEventForSecurity(ev)) &#123;</div><div class=\"line\">        <span class=\"comment\">// ------------ 第一部分 针对事件初始进行前置准备处理 ------------</span></div><div class=\"line\">        <span class=\"keyword\">final</span> <span class=\"keyword\">int</span> action = ev.getAction();</div><div class=\"line\">        <span class=\"keyword\">final</span> <span class=\"keyword\">int</span> actionMasked = action &amp; MotionEvent.ACTION_MASK;</div><div class=\"line\">        <span class=\"comment\">// 最初的DOWN事件处理</span></div><div class=\"line\">        <span class=\"keyword\">if</span> (actionMasked == MotionEvent.ACTION_DOWN) &#123;</div><div class=\"line\">            <span class=\"comment\">// Throw away all previous state when starting a new touch gesture.</span></div><div class=\"line\">            <span class=\"comment\">// The framework may have dropped the up or cancel event for the previous gesture</span></div><div class=\"line\">            <span class=\"comment\">// due to an app switch, ANR, or some other state change.</span></div><div class=\"line\">          \t<span class=\"comment\">// 4-1 向mFirstTouchTarget指向的子元素分发cancel事件，然后将mFirstTouchTarget清除置为null</span></div><div class=\"line\">            cancelAndClearTouchTargets(ev);</div><div class=\"line\">          \t<span class=\"comment\">// 4-2 重置所有触摸状态，为下一个事件周期做准备</span></div><div class=\"line\">            resetTouchState();</div><div class=\"line\">        &#125;</div><div class=\"line\">        <span class=\"comment\">// ------------ 第一部分 结束 ------------</span></div><div class=\"line\">      </div><div class=\"line\">\t\t\t\t<span class=\"comment\">// ...</span></div><div class=\"line\">    &#125;</div><div class=\"line\"></div><div class=\"line\">    <span class=\"keyword\">if</span> (!handled &amp;&amp; mInputEventConsistencyVerifier != <span class=\"keyword\">null</span>) &#123;</div><div class=\"line\">        mInputEventConsistencyVerifier.onUnhandledEvent(ev, <span class=\"number\">1</span>);</div><div class=\"line\">    &#125;</div><div class=\"line\">    <span class=\"keyword\">return</span> handled;</div><div class=\"line\">&#125;</div></pre></td></tr></table></figure>\n<p>4-1中<code>cancelAndClearTouchTargets</code>，作用就是清除之前的事件，为新一轮的事件分发做准备</p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div><div class=\"line\">14</div><div class=\"line\">15</div><div class=\"line\">16</div><div class=\"line\">17</div><div class=\"line\">18</div><div class=\"line\">19</div><div class=\"line\">20</div><div class=\"line\">21</div><div class=\"line\">22</div><div class=\"line\">23</div><div class=\"line\">24</div><div class=\"line\">25</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"function\"><span class=\"keyword\">private</span> <span class=\"keyword\">void</span> <span class=\"title\">cancelAndClearTouchTargets</span><span class=\"params\">(MotionEvent event)</span> </span>&#123;</div><div class=\"line\">    <span class=\"keyword\">if</span> (mFirstTouchTarget != <span class=\"keyword\">null</span>) &#123;</div><div class=\"line\">        <span class=\"keyword\">boolean</span> syntheticEvent = <span class=\"keyword\">false</span>;</div><div class=\"line\">        <span class=\"keyword\">if</span> (event == <span class=\"keyword\">null</span>) &#123;</div><div class=\"line\">            <span class=\"keyword\">final</span> <span class=\"keyword\">long</span> now = SystemClock.uptimeMillis();</div><div class=\"line\">          \t<span class=\"comment\">// 构建一个ACTION_CANCEL的事件</span></div><div class=\"line\">            event = MotionEvent.obtain(now, now,</div><div class=\"line\">                    MotionEvent.ACTION_CANCEL, <span class=\"number\">0.0f</span>, <span class=\"number\">0.0f</span>, <span class=\"number\">0</span>);</div><div class=\"line\">            event.setSource(InputDevice.SOURCE_TOUCHSCREEN);</div><div class=\"line\">            syntheticEvent = <span class=\"keyword\">true</span>;</div><div class=\"line\">        &#125;</div><div class=\"line\"></div><div class=\"line\">        <span class=\"keyword\">for</span> (TouchTarget target = mFirstTouchTarget; target != <span class=\"keyword\">null</span>; target = target.next) &#123;</div><div class=\"line\">            resetCancelNextUpFlag(target.child);</div><div class=\"line\">          \t<span class=\"comment\">// 向mFirstTouchTarget指向的子元素分发cancel事件</span></div><div class=\"line\">            dispatchTransformedTouchEvent(event, <span class=\"keyword\">true</span>, target.child, target.pointerIdBits);</div><div class=\"line\">        &#125;</div><div class=\"line\">      \t<span class=\"comment\">// 清除mFirstTouchTarget中的节点，置为null</span></div><div class=\"line\">        clearTouchTargets();</div><div class=\"line\"></div><div class=\"line\">        <span class=\"keyword\">if</span> (syntheticEvent) &#123;</div><div class=\"line\">            event.recycle();</div><div class=\"line\">        &#125;</div><div class=\"line\">    &#125;</div><div class=\"line\">&#125;</div></pre></td></tr></table></figure>\n<p>4-2中的<code>resetTouchState</code>就是 重置所有触摸状态，为下一个事件周期做准备</p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"function\"><span class=\"keyword\">private</span> <span class=\"keyword\">void</span> <span class=\"title\">resetTouchState</span><span class=\"params\">()</span> </span>&#123;</div><div class=\"line\">    clearTouchTargets();</div><div class=\"line\">    resetCancelNextUpFlag(<span class=\"keyword\">this</span>);</div><div class=\"line\">    mGroupFlags &amp;= ~FLAG_DISALLOW_INTERCEPT;</div><div class=\"line\">    mNestedScrollAxes = SCROLL_AXIS_NONE;</div><div class=\"line\">&#125;</div></pre></td></tr></table></figure>\n</li>\n<li><p>第二部分 处理当前ViewGroup是否要拦截事件</p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div><div class=\"line\">14</div><div class=\"line\">15</div><div class=\"line\">16</div><div class=\"line\">17</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"comment\">// ------------ 第二部分 判断当前ViewGroup是否需要拦截事件 ------------      </span></div><div class=\"line\">    <span class=\"comment\">// Check for interception.</span></div><div class=\"line\">    <span class=\"keyword\">final</span> <span class=\"keyword\">boolean</span> intercepted;</div><div class=\"line\">    <span class=\"keyword\">if</span> (actionMasked == MotionEvent.ACTION_DOWN || mFirstTouchTarget != <span class=\"keyword\">null</span>) &#123;</div><div class=\"line\">        <span class=\"keyword\">final</span> <span class=\"keyword\">boolean</span> disallowIntercept = (mGroupFlags &amp; FLAG_DISALLOW_INTERCEPT) != <span class=\"number\">0</span>;</div><div class=\"line\">        <span class=\"keyword\">if</span> (!disallowIntercept) &#123;</div><div class=\"line\">            intercepted = onInterceptTouchEvent(ev);</div><div class=\"line\">            ev.setAction(action); <span class=\"comment\">// restore action in case it was changed</span></div><div class=\"line\">        &#125; <span class=\"keyword\">else</span> &#123;</div><div class=\"line\">            intercepted = <span class=\"keyword\">false</span>;</div><div class=\"line\">        &#125;</div><div class=\"line\">    &#125; <span class=\"keyword\">else</span> &#123;</div><div class=\"line\">        <span class=\"comment\">// There are no touch targets and this action is not an initial down</span></div><div class=\"line\">        <span class=\"comment\">// so this view group continues to intercept touches.</span></div><div class=\"line\">        intercepted = <span class=\"keyword\">true</span>;</div><div class=\"line\">    &#125;</div><div class=\"line\"><span class=\"comment\">// ------------ 第二部分 结束 ------------</span></div></pre></td></tr></table></figure>\n<p>定义一个<code>boolean</code>类型的标志量<code>intercepted</code>，这个是用于记录该ViewGroup是否要拦截事件，可以看到 ViewGroup会在<code>actionMasked == MotionEvent.ACTION_DOWN</code>和<code>mFirstTouchTarget != null</code>这个条件下来进行是否需要拦截事件的判断，<code>mFirstTouchTarget</code>指向的是该ViewGroup的能处理事件成功的子View。那么如果ViewGroup拦截了事件，<code>mFirstTouchTarget</code>就是为null的，那么接下来的MOVE和UP事件则继续保持拦截状态，不会进入判断条件。</p>\n</li>\n</ul>\n<p>  然后在具体是否拦截的判断条件是是否设置了<code>FLAG_DISALLOW_INTERCEPT</code>标记位，如果设置了，该ViewGroup是不会拦截事件的，这个标志位一般是子View通过<code>getParent().requestDisallowInterceptTouchEvent(true)</code>来设置，子View请求父控件不要拦截事件。如果没有设置，再通过该ViewGroup自身的<code>onInterceptTouchEvent(ev)</code>方法返回值来判断是否需要拦截，这个方法通常就是继承类来覆写该方法来控制是否拦截事件。</p>\n<ul>\n<li><p>第三部分 遍历子View，判断子View是否需要拦截或处理事件</p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div><div class=\"line\">14</div><div class=\"line\">15</div><div class=\"line\">16</div><div class=\"line\">17</div><div class=\"line\">18</div><div class=\"line\">19</div><div class=\"line\">20</div><div class=\"line\">21</div><div class=\"line\">22</div><div class=\"line\">23</div><div class=\"line\">24</div><div class=\"line\">25</div><div class=\"line\">26</div><div class=\"line\">27</div><div class=\"line\">28</div><div class=\"line\">29</div><div class=\"line\">30</div><div class=\"line\">31</div><div class=\"line\">32</div><div class=\"line\">33</div><div class=\"line\">34</div><div class=\"line\">35</div><div class=\"line\">36</div><div class=\"line\">37</div><div class=\"line\">38</div><div class=\"line\">39</div><div class=\"line\">40</div><div class=\"line\">41</div><div class=\"line\">42</div><div class=\"line\">43</div><div class=\"line\">44</div><div class=\"line\">45</div><div class=\"line\">46</div><div class=\"line\">47</div><div class=\"line\">48</div><div class=\"line\">49</div><div class=\"line\">50</div><div class=\"line\">51</div><div class=\"line\">52</div><div class=\"line\">53</div><div class=\"line\">54</div><div class=\"line\">55</div><div class=\"line\">56</div><div class=\"line\">57</div><div class=\"line\">58</div><div class=\"line\">59</div><div class=\"line\">60</div><div class=\"line\">61</div><div class=\"line\">62</div><div class=\"line\">63</div><div class=\"line\">64</div><div class=\"line\">65</div><div class=\"line\">66</div><div class=\"line\">67</div><div class=\"line\">68</div><div class=\"line\">69</div><div class=\"line\">70</div><div class=\"line\">71</div><div class=\"line\">72</div><div class=\"line\">73</div><div class=\"line\">74</div><div class=\"line\">75</div><div class=\"line\">76</div><div class=\"line\">77</div><div class=\"line\">78</div><div class=\"line\">79</div><div class=\"line\">80</div><div class=\"line\">81</div><div class=\"line\">82</div><div class=\"line\">83</div><div class=\"line\">84</div><div class=\"line\">85</div><div class=\"line\">86</div><div class=\"line\">87</div><div class=\"line\">88</div><div class=\"line\">89</div><div class=\"line\">90</div><div class=\"line\">91</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"comment\">// ------------ 第三部分 遍历子View，判断子View是否需要拦截或处理事件 ------------      </span></div><div class=\"line\"><span class=\"comment\">// Check for cancelation.</span></div><div class=\"line\"><span class=\"keyword\">final</span> <span class=\"keyword\">boolean</span> canceled = resetCancelNextUpFlag(<span class=\"keyword\">this</span>)</div><div class=\"line\">        || actionMasked == MotionEvent.ACTION_CANCEL;</div><div class=\"line\"></div><div class=\"line\"><span class=\"comment\">// Update list of touch targets for pointer down, if needed.</span></div><div class=\"line\"><span class=\"keyword\">final</span> <span class=\"keyword\">boolean</span> split = (mGroupFlags &amp; FLAG_SPLIT_MOTION_EVENTS) != <span class=\"number\">0</span>;</div><div class=\"line\">TouchTarget newTouchTarget = <span class=\"keyword\">null</span>;</div><div class=\"line\"><span class=\"keyword\">boolean</span> alreadyDispatchedToNewTouchTarget = <span class=\"keyword\">false</span>;</div><div class=\"line\"><span class=\"keyword\">if</span> (!canceled &amp;&amp; !intercepted) &#123;</div><div class=\"line\">    <span class=\"keyword\">if</span> (actionMasked == MotionEvent.ACTION_DOWN</div><div class=\"line\">            || (split &amp;&amp; actionMasked == MotionEvent.ACTION_POINTER_DOWN)</div><div class=\"line\">            || actionMasked == MotionEvent.ACTION_HOVER_MOVE) &#123;</div><div class=\"line\">        <span class=\"keyword\">final</span> <span class=\"keyword\">int</span> actionIndex = ev.getActionIndex(); <span class=\"comment\">// always 0 for down</span></div><div class=\"line\">        <span class=\"keyword\">final</span> <span class=\"keyword\">int</span> idBitsToAssign = split ? <span class=\"number\">1</span> &lt;&lt; ev.getPointerId(actionIndex)</div><div class=\"line\">                : TouchTarget.ALL_POINTER_IDS;</div><div class=\"line\"></div><div class=\"line\">        <span class=\"comment\">// Clean up earlier touch targets for this pointer id in case they</span></div><div class=\"line\">        <span class=\"comment\">// have become out of sync.</span></div><div class=\"line\">        removePointersFromTouchTargets(idBitsToAssign);</div><div class=\"line\"></div><div class=\"line\">        <span class=\"keyword\">final</span> <span class=\"keyword\">int</span> childrenCount = mChildrenCount;</div><div class=\"line\">        <span class=\"keyword\">if</span> (newTouchTarget == <span class=\"keyword\">null</span> &amp;&amp; childrenCount != <span class=\"number\">0</span>) &#123;</div><div class=\"line\">            <span class=\"keyword\">final</span> <span class=\"keyword\">float</span> x = ev.getX(actionIndex);</div><div class=\"line\">            <span class=\"keyword\">final</span> <span class=\"keyword\">float</span> y = ev.getY(actionIndex);</div><div class=\"line\">            <span class=\"comment\">// Find a child that can receive the event.</span></div><div class=\"line\">            <span class=\"comment\">// Scan children from front to back.</span></div><div class=\"line\">            <span class=\"keyword\">final</span> ArrayList&lt;View&gt; preorderedList = buildTouchDispatchChildList();</div><div class=\"line\">            <span class=\"keyword\">final</span> <span class=\"keyword\">boolean</span> customOrder = preorderedList == <span class=\"keyword\">null</span></div><div class=\"line\">                    &amp;&amp; isChildrenDrawingOrderEnabled();</div><div class=\"line\">            <span class=\"keyword\">final</span> View[] children = mChildren;</div><div class=\"line\">          \t<span class=\"comment\">// 5-1 从最前面往里面遍历子View</span></div><div class=\"line\">            <span class=\"keyword\">for</span> (<span class=\"keyword\">int</span> i = childrenCount - <span class=\"number\">1</span>; i &gt;= <span class=\"number\">0</span>; i--) &#123;</div><div class=\"line\">                <span class=\"keyword\">final</span> <span class=\"keyword\">int</span> childIndex = getAndVerifyPreorderedIndex(</div><div class=\"line\">                        childrenCount, i, customOrder);</div><div class=\"line\">                <span class=\"keyword\">final</span> View child = getAndVerifyPreorderedView(</div><div class=\"line\">                        preorderedList, children, childIndex);</div><div class=\"line\">\t\t\t\t\t\t\t\t<span class=\"comment\">// 5-2 判断子View是否能够接受到事件</span></div><div class=\"line\">                <span class=\"keyword\">if</span> (!canViewReceivePointerEvents(child)</div><div class=\"line\">                        || !isTransformedTouchPointInView(x, y, child, <span class=\"keyword\">null</span>)) &#123;</div><div class=\"line\">                    ev.setTargetAccessibilityFocus(<span class=\"keyword\">false</span>);</div><div class=\"line\">                    <span class=\"keyword\">continue</span>;</div><div class=\"line\">                &#125;</div><div class=\"line\"></div><div class=\"line\">                newTouchTarget = getTouchTarget(child);</div><div class=\"line\">                <span class=\"keyword\">if</span> (newTouchTarget != <span class=\"keyword\">null</span>) &#123;</div><div class=\"line\">                    <span class=\"comment\">// Child is already receiving touch within its bounds.</span></div><div class=\"line\">                    <span class=\"comment\">// Give it the new pointer in addition to the ones it is handling.</span></div><div class=\"line\">                    newTouchTarget.pointerIdBits |= idBitsToAssign;</div><div class=\"line\">                    <span class=\"keyword\">break</span>;</div><div class=\"line\">                &#125;</div><div class=\"line\"></div><div class=\"line\">                resetCancelNextUpFlag(child);</div><div class=\"line\">              \t<span class=\"comment\">// 5-3 将事件交由子View去dispatchTouchEvent，看子View是否处理事件</span></div><div class=\"line\">                <span class=\"keyword\">if</span> (dispatchTransformedTouchEvent(ev, <span class=\"keyword\">false</span>, child, idBitsToAssign)) &#123;</div><div class=\"line\">                    <span class=\"comment\">// Child wants to receive touch within its bounds.</span></div><div class=\"line\">                    mLastTouchDownTime = ev.getDownTime();</div><div class=\"line\">                    <span class=\"keyword\">if</span> (preorderedList != <span class=\"keyword\">null</span>) &#123;</div><div class=\"line\">                        <span class=\"comment\">// childIndex points into presorted list, find original index</span></div><div class=\"line\">                        <span class=\"keyword\">for</span> (<span class=\"keyword\">int</span> j = <span class=\"number\">0</span>; j &lt; childrenCount; j++) &#123;</div><div class=\"line\">                            <span class=\"keyword\">if</span> (children[childIndex] == mChildren[j]) &#123;</div><div class=\"line\">                                mLastTouchDownIndex = j;</div><div class=\"line\">                                <span class=\"keyword\">break</span>;</div><div class=\"line\">                            &#125;</div><div class=\"line\">                        &#125;</div><div class=\"line\">                    &#125; <span class=\"keyword\">else</span> &#123;</div><div class=\"line\">                        mLastTouchDownIndex = childIndex;</div><div class=\"line\">                    &#125;</div><div class=\"line\">                    mLastTouchDownX = ev.getX();</div><div class=\"line\">                    mLastTouchDownY = ev.getY();</div><div class=\"line\">                  \t<span class=\"comment\">// 5-4 将处理事件的View添加到mFirstTouchTarget(链表)最前端</span></div><div class=\"line\">                    newTouchTarget = addTouchTarget(child, idBitsToAssign);</div><div class=\"line\">                    alreadyDispatchedToNewTouchTarget = <span class=\"keyword\">true</span>;</div><div class=\"line\">                    <span class=\"keyword\">break</span>;</div><div class=\"line\">                &#125;</div><div class=\"line\">            &#125;</div><div class=\"line\">            <span class=\"keyword\">if</span> (preorderedList != <span class=\"keyword\">null</span>) preorderedList.clear();</div><div class=\"line\">        &#125;</div><div class=\"line\"></div><div class=\"line\">        <span class=\"keyword\">if</span> (newTouchTarget == <span class=\"keyword\">null</span> &amp;&amp; mFirstTouchTarget != <span class=\"keyword\">null</span>) &#123;</div><div class=\"line\">            <span class=\"comment\">// Did not find a child to receive the event.</span></div><div class=\"line\">            <span class=\"comment\">// Assign the pointer to the least recently added target.</span></div><div class=\"line\">            newTouchTarget = mFirstTouchTarget;</div><div class=\"line\">            <span class=\"keyword\">while</span> (newTouchTarget.next != <span class=\"keyword\">null</span>) &#123;</div><div class=\"line\">                newTouchTarget = newTouchTarget.next;</div><div class=\"line\">            &#125;</div><div class=\"line\">            newTouchTarget.pointerIdBits |= idBitsToAssign;</div><div class=\"line\">        &#125;</div><div class=\"line\">    &#125;</div><div class=\"line\">&#125;</div><div class=\"line\"><span class=\"comment\">// ------------ 第三部分 结束 ------------</span></div></pre></td></tr></table></figure>\n<p>在5-1处，从外层往里层依次遍历子View，然后在5-2处判断子View是否能够接受处理事件，判断条件是<code>canViewReceivePointerEvents(child)</code>和<code>isTransformedTouchPointInView(x, y, child, null)</code>，具体代码如下：</p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"function\"><span class=\"keyword\">private</span> <span class=\"keyword\">static</span> <span class=\"keyword\">boolean</span> <span class=\"title\">canViewReceivePointerEvents</span><span class=\"params\">(@NonNull View child)</span> </span>&#123;</div><div class=\"line\">  \t<span class=\"comment\">// 是否可见，是否在播放动画</span></div><div class=\"line\">    <span class=\"keyword\">return</span> (child.mViewFlags &amp; VISIBILITY_MASK) == VISIBLE || child.getAnimation() != <span class=\"keyword\">null</span>;</div><div class=\"line\">&#125;</div></pre></td></tr></table></figure>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"function\"><span class=\"keyword\">protected</span> <span class=\"keyword\">boolean</span> <span class=\"title\">isTransformedTouchPointInView</span><span class=\"params\">(<span class=\"keyword\">float</span> x, <span class=\"keyword\">float</span> y, View child,</div><div class=\"line\">        PointF outLocalPoint)</span> </span>&#123;</div><div class=\"line\">  \t<span class=\"comment\">// 判断点击事件是否在子View的区域内</span></div><div class=\"line\">    <span class=\"keyword\">final</span> <span class=\"keyword\">float</span>[] point = getTempPoint();</div><div class=\"line\">    point[<span class=\"number\">0</span>] = x;</div><div class=\"line\">    point[<span class=\"number\">1</span>] = y;</div><div class=\"line\">    transformPointToViewLocal(point, child);</div><div class=\"line\">    <span class=\"keyword\">final</span> <span class=\"keyword\">boolean</span> isInView = child.pointInView(point[<span class=\"number\">0</span>], point[<span class=\"number\">1</span>]);</div><div class=\"line\">    <span class=\"keyword\">if</span> (isInView &amp;&amp; outLocalPoint != <span class=\"keyword\">null</span>) &#123;</div><div class=\"line\">        outLocalPoint.set(point[<span class=\"number\">0</span>], point[<span class=\"number\">1</span>]);</div><div class=\"line\">    &#125;</div><div class=\"line\">    <span class=\"keyword\">return</span> isInView;</div><div class=\"line\">&#125;</div></pre></td></tr></table></figure>\n<p>就是说子View不能接收点击事件或者点击事件不在该子View的区域内，那么事件也就不会分发到这个子View去，跳过这个子View继续遍历。</p>\n<p>如果子View满足这两个条件，那么事件就会传递给它来处理，进入5-3处的 <code>dispatchTransformedTouchEvent</code>来看，撇开那些判断条件，最终的处理结果都依赖下面的代码，</p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"keyword\">if</span> (child == <span class=\"keyword\">null</span>) &#123;</div><div class=\"line\">    handled = <span class=\"keyword\">super</span>.dispatchTouchEvent(event);</div><div class=\"line\">&#125; <span class=\"keyword\">else</span> &#123;</div><div class=\"line\">    handled = child.dispatchTouchEvent(event);</div><div class=\"line\">&#125;</div></pre></td></tr></table></figure>\n<p>这里child传入的不为null，所以这里会执行子View的<code>dispatchTouchEvent</code>，如果<code>dispatchTouchEvent</code>返回的是true，那就暂时不考虑子View内部的分发逻辑，这里会走进if判断条件，执行到5-4处。</p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"function\"><span class=\"keyword\">private</span> TouchTarget <span class=\"title\">addTouchTarget</span><span class=\"params\">(@NonNull View child, <span class=\"keyword\">int</span> pointerIdBits)</span> </span>&#123;</div><div class=\"line\">    <span class=\"keyword\">final</span> TouchTarget target = TouchTarget.obtain(child, pointerIdBits);</div><div class=\"line\">    target.next = mFirstTouchTarget;</div><div class=\"line\">    mFirstTouchTarget = target;</div><div class=\"line\">    <span class=\"keyword\">return</span> target;</div><div class=\"line\">&#125;</div></pre></td></tr></table></figure>\n<p>这里是对<code>mFirstTouchTarget</code>进行赋值，然后将<code>mFirstTouchTarget</code>当成一个子View是否处理事件的标志。如果是有子View处理事件，将<code>mFirstTouchTarget</code>赋值后，然后就跳出遍历子View的循环，如果当前子View的<code>dispatchTransformedTouchEvent</code>返回的是false，则继续往下遍历子View。</p>\n</li>\n<li><p>第四部分 根据<code>mFirstTouchTarget</code>来分发事件，为null则是将事件交由ViewGroup的onTouchEvent处理</p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div><div class=\"line\">14</div><div class=\"line\">15</div><div class=\"line\">16</div><div class=\"line\">17</div><div class=\"line\">18</div><div class=\"line\">19</div><div class=\"line\">20</div><div class=\"line\">21</div><div class=\"line\">22</div><div class=\"line\">23</div><div class=\"line\">24</div><div class=\"line\">25</div><div class=\"line\">26</div><div class=\"line\">27</div><div class=\"line\">28</div><div class=\"line\">29</div><div class=\"line\">30</div><div class=\"line\">31</div><div class=\"line\">32</div><div class=\"line\">33</div><div class=\"line\">34</div><div class=\"line\">35</div><div class=\"line\">36</div><div class=\"line\">37</div><div class=\"line\">38</div><div class=\"line\">39</div><div class=\"line\">40</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"comment\">// ------------ 第四部分 根据mFirstTouchTarget来分发事件，为null则是ViewGroup的onTouchEvent处理 ------------ </span></div><div class=\"line\"><span class=\"comment\">// Dispatch to touch targets.</span></div><div class=\"line\"><span class=\"keyword\">if</span> (mFirstTouchTarget == <span class=\"keyword\">null</span>) &#123;</div><div class=\"line\">    <span class=\"comment\">// No touch targets so treat this as an ordinary view.</span></div><div class=\"line\">  \t<span class=\"comment\">// 6-1 如果事件被该ViewGroup拦截了，或者没有子view处理事件</span></div><div class=\"line\">    handled = dispatchTransformedTouchEvent(ev, canceled, <span class=\"keyword\">null</span>,</div><div class=\"line\">            TouchTarget.ALL_POINTER_IDS);</div><div class=\"line\">&#125; <span class=\"keyword\">else</span> &#123;</div><div class=\"line\">    <span class=\"comment\">// Dispatch to touch targets, excluding the new touch target if we already</span></div><div class=\"line\">    <span class=\"comment\">// dispatched to it.  Cancel touch targets if necessary.</span></div><div class=\"line\">  \t<span class=\"comment\">// 6-1 遍历mFirstTouchTarget，分发事件</span></div><div class=\"line\">    TouchTarget predecessor = <span class=\"keyword\">null</span>;</div><div class=\"line\">    TouchTarget target = mFirstTouchTarget;</div><div class=\"line\">    <span class=\"keyword\">while</span> (target != <span class=\"keyword\">null</span>) &#123;</div><div class=\"line\">        <span class=\"keyword\">final</span> TouchTarget next = target.next;</div><div class=\"line\">        <span class=\"keyword\">if</span> (alreadyDispatchedToNewTouchTarget &amp;&amp; target == newTouchTarget) &#123;</div><div class=\"line\">            handled = <span class=\"keyword\">true</span>;</div><div class=\"line\">        &#125; <span class=\"keyword\">else</span> &#123;</div><div class=\"line\">            <span class=\"keyword\">final</span> <span class=\"keyword\">boolean</span> cancelChild = resetCancelNextUpFlag(target.child)</div><div class=\"line\">                    || intercepted;</div><div class=\"line\">            <span class=\"keyword\">if</span> (dispatchTransformedTouchEvent(ev, cancelChild,</div><div class=\"line\">                    target.child, target.pointerIdBits)) &#123;</div><div class=\"line\">                handled = <span class=\"keyword\">true</span>;</div><div class=\"line\">            &#125;</div><div class=\"line\">            <span class=\"keyword\">if</span> (cancelChild) &#123;</div><div class=\"line\">                <span class=\"keyword\">if</span> (predecessor == <span class=\"keyword\">null</span>) &#123;</div><div class=\"line\">                    mFirstTouchTarget = next;</div><div class=\"line\">                &#125; <span class=\"keyword\">else</span> &#123;</div><div class=\"line\">                    predecessor.next = next;</div><div class=\"line\">                &#125;</div><div class=\"line\">                target.recycle();</div><div class=\"line\">                target = next;</div><div class=\"line\">                <span class=\"keyword\">continue</span>;</div><div class=\"line\">            &#125;</div><div class=\"line\">        &#125;</div><div class=\"line\">        predecessor = target;</div><div class=\"line\">        target = next;</div><div class=\"line\">    &#125;</div><div class=\"line\">&#125;</div><div class=\"line\"><span class=\"comment\">// ------------ 第四部分 结束 ------------</span></div></pre></td></tr></table></figure>\n<p>接着第三部分，如果没有子View没有处理事件(1. 有可能没有子View 2. 子View处理了事件，dispatchTouchEvent返回false)，这个时候<code>mFirstTouchTarget</code>是没有赋值的，为null，那么会走到代码6-1处。</p>\n<p>这里跟5-3处调用的是一个方法，但是child参数传递的是null，那么就会执行<code>super.dispatchTouchEvent(event)</code>这行代码，会跳转到ViewGroup的父类View的<code>dispatchTouchEvent</code>，而View的<code>dispatchTouchEvent</code>就会调用<code>onTouchEvent</code>，也就是该ViewGroup自己通过<code>onTouchEvent</code>方法来处理事件。</p>\n</li>\n</ul>\n<p>到这里，ViewGroup里的事件分发与拦截就分析完毕了，事件要么就交由下层View继续处理，要么就走到自己的<code>onTouchEvent</code>方法里处理。如果下层View还是ViewGroup，则逻辑还是跟上面分析的一样，如果是View，那么流程就有点不同了。</p>\n<ul>\n<li><p>View的dispatchTouchEvent</p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div><div class=\"line\">14</div><div class=\"line\">15</div><div class=\"line\">16</div><div class=\"line\">17</div><div class=\"line\">18</div><div class=\"line\">19</div><div class=\"line\">20</div><div class=\"line\">21</div><div class=\"line\">22</div><div class=\"line\">23</div><div class=\"line\">24</div><div class=\"line\">25</div><div class=\"line\">26</div><div class=\"line\">27</div><div class=\"line\">28</div><div class=\"line\">29</div><div class=\"line\">30</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">boolean</span> <span class=\"title\">dispatchTouchEvent</span><span class=\"params\">(MotionEvent event)</span> </span>&#123;</div><div class=\"line\">    <span class=\"comment\">// ...</span></div><div class=\"line\"></div><div class=\"line\">    <span class=\"keyword\">boolean</span> result = <span class=\"keyword\">false</span>;</div><div class=\"line\"></div><div class=\"line\">    <span class=\"comment\">// ...</span></div><div class=\"line\"></div><div class=\"line\">    <span class=\"keyword\">if</span> (onFilterTouchEventForSecurity(event)) &#123;</div><div class=\"line\">        <span class=\"keyword\">if</span> ((mViewFlags &amp; ENABLED_MASK) == ENABLED &amp;&amp; handleScrollBarDragging(event)) &#123;</div><div class=\"line\">            result = <span class=\"keyword\">true</span>;</div><div class=\"line\">        &#125;</div><div class=\"line\">        <span class=\"comment\">//noinspection SimplifiableIfStatement</span></div><div class=\"line\">        ListenerInfo li = mListenerInfo;</div><div class=\"line\">        <span class=\"comment\">// 7-1 判断是否设置了OnTouchListener，设置了就交由listener处理</span></div><div class=\"line\">        <span class=\"keyword\">if</span> (li != <span class=\"keyword\">null</span> &amp;&amp; li.mOnTouchListener != <span class=\"keyword\">null</span></div><div class=\"line\">                &amp;&amp; (mViewFlags &amp; ENABLED_MASK) == ENABLED</div><div class=\"line\">                &amp;&amp; li.mOnTouchListener.onTouch(<span class=\"keyword\">this</span>, event)) &#123;</div><div class=\"line\">            result = <span class=\"keyword\">true</span>;</div><div class=\"line\">        &#125;</div><div class=\"line\"></div><div class=\"line\">        <span class=\"comment\">// 7-2 没设置OnTouchListener，交由View的onTouchEvent方法来处理事件</span></div><div class=\"line\">        <span class=\"keyword\">if</span> (!result &amp;&amp; onTouchEvent(event)) &#123;</div><div class=\"line\">            result = <span class=\"keyword\">true</span>;</div><div class=\"line\">        &#125;</div><div class=\"line\">    &#125;</div><div class=\"line\"></div><div class=\"line\">    <span class=\"comment\">// ...</span></div><div class=\"line\"></div><div class=\"line\">    <span class=\"keyword\">return</span> result;</div><div class=\"line\">&#125;</div></pre></td></tr></table></figure>\n<p>View因为没有下层的子View了，所以dispatchTouchEvent也比较简单，从代码7-1和7-2可以很清晰看到View分发事件的逻辑，首先看是否设置了OnTouchEventListener，如果没有设置listener，再去看该View的onTouchEvent方法。OnTouchEventListener的优先级是高于onTouchEvent方法的，这样就可以暴露OnTouchEventListener，方便于View在外面处理点击事件了。</p>\n</li>\n</ul>\n<ul>\n<li><p>View的onTouchEvent</p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div><div class=\"line\">14</div><div class=\"line\">15</div><div class=\"line\">16</div><div class=\"line\">17</div><div class=\"line\">18</div><div class=\"line\">19</div><div class=\"line\">20</div><div class=\"line\">21</div><div class=\"line\">22</div><div class=\"line\">23</div><div class=\"line\">24</div><div class=\"line\">25</div><div class=\"line\">26</div><div class=\"line\">27</div><div class=\"line\">28</div><div class=\"line\">29</div><div class=\"line\">30</div><div class=\"line\">31</div><div class=\"line\">32</div><div class=\"line\">33</div><div class=\"line\">34</div><div class=\"line\">35</div><div class=\"line\">36</div><div class=\"line\">37</div><div class=\"line\">38</div><div class=\"line\">39</div><div class=\"line\">40</div><div class=\"line\">41</div><div class=\"line\">42</div><div class=\"line\">43</div><div class=\"line\">44</div><div class=\"line\">45</div><div class=\"line\">46</div><div class=\"line\">47</div><div class=\"line\">48</div><div class=\"line\">49</div><div class=\"line\">50</div><div class=\"line\">51</div><div class=\"line\">52</div><div class=\"line\">53</div><div class=\"line\">54</div><div class=\"line\">55</div><div class=\"line\">56</div><div class=\"line\">57</div><div class=\"line\">58</div><div class=\"line\">59</div><div class=\"line\">60</div><div class=\"line\">61</div><div class=\"line\">62</div><div class=\"line\">63</div><div class=\"line\">64</div><div class=\"line\">65</div><div class=\"line\">66</div><div class=\"line\">67</div><div class=\"line\">68</div><div class=\"line\">69</div><div class=\"line\">70</div><div class=\"line\">71</div><div class=\"line\">72</div><div class=\"line\">73</div><div class=\"line\">74</div><div class=\"line\">75</div><div class=\"line\">76</div><div class=\"line\">77</div><div class=\"line\">78</div><div class=\"line\">79</div><div class=\"line\">80</div><div class=\"line\">81</div><div class=\"line\">82</div><div class=\"line\">83</div><div class=\"line\">84</div><div class=\"line\">85</div><div class=\"line\">86</div><div class=\"line\">87</div><div class=\"line\">88</div><div class=\"line\">89</div><div class=\"line\">90</div><div class=\"line\">91</div><div class=\"line\">92</div><div class=\"line\">93</div><div class=\"line\">94</div><div class=\"line\">95</div><div class=\"line\">96</div><div class=\"line\">97</div><div class=\"line\">98</div><div class=\"line\">99</div><div class=\"line\">100</div><div class=\"line\">101</div><div class=\"line\">102</div><div class=\"line\">103</div><div class=\"line\">104</div><div class=\"line\">105</div><div class=\"line\">106</div><div class=\"line\">107</div><div class=\"line\">108</div><div class=\"line\">109</div><div class=\"line\">110</div><div class=\"line\">111</div><div class=\"line\">112</div><div class=\"line\">113</div><div class=\"line\">114</div><div class=\"line\">115</div><div class=\"line\">116</div><div class=\"line\">117</div><div class=\"line\">118</div><div class=\"line\">119</div><div class=\"line\">120</div><div class=\"line\">121</div><div class=\"line\">122</div><div class=\"line\">123</div><div class=\"line\">124</div><div class=\"line\">125</div><div class=\"line\">126</div><div class=\"line\">127</div><div class=\"line\">128</div><div class=\"line\">129</div><div class=\"line\">130</div><div class=\"line\">131</div><div class=\"line\">132</div><div class=\"line\">133</div><div class=\"line\">134</div><div class=\"line\">135</div><div class=\"line\">136</div><div class=\"line\">137</div><div class=\"line\">138</div><div class=\"line\">139</div><div class=\"line\">140</div><div class=\"line\">141</div><div class=\"line\">142</div><div class=\"line\">143</div><div class=\"line\">144</div><div class=\"line\">145</div><div class=\"line\">146</div><div class=\"line\">147</div><div class=\"line\">148</div><div class=\"line\">149</div><div class=\"line\">150</div><div class=\"line\">151</div><div class=\"line\">152</div><div class=\"line\">153</div><div class=\"line\">154</div><div class=\"line\">155</div><div class=\"line\">156</div><div class=\"line\">157</div><div class=\"line\">158</div><div class=\"line\">159</div><div class=\"line\">160</div><div class=\"line\">161</div><div class=\"line\">162</div><div class=\"line\">163</div><div class=\"line\">164</div><div class=\"line\">165</div><div class=\"line\">166</div><div class=\"line\">167</div><div class=\"line\">168</div><div class=\"line\">169</div><div class=\"line\">170</div><div class=\"line\">171</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">boolean</span> <span class=\"title\">onTouchEvent</span><span class=\"params\">(MotionEvent event)</span> </span>&#123;</div><div class=\"line\">    <span class=\"keyword\">final</span> <span class=\"keyword\">float</span> x = event.getX();</div><div class=\"line\">    <span class=\"keyword\">final</span> <span class=\"keyword\">float</span> y = event.getY();</div><div class=\"line\">    <span class=\"keyword\">final</span> <span class=\"keyword\">int</span> viewFlags = mViewFlags;</div><div class=\"line\">    <span class=\"keyword\">final</span> <span class=\"keyword\">int</span> action = event.getAction();</div><div class=\"line\"></div><div class=\"line\">    <span class=\"comment\">// ------------ 第一部分 View处于不可用状态下点击事件的处理  ------------</span></div><div class=\"line\">    <span class=\"keyword\">final</span> <span class=\"keyword\">boolean</span> clickable = ((viewFlags &amp; CLICKABLE) == CLICKABLE</div><div class=\"line\">            || (viewFlags &amp; LONG_CLICKABLE) == LONG_CLICKABLE)</div><div class=\"line\">            || (viewFlags &amp; CONTEXT_CLICKABLE) == CONTEXT_CLICKABLE;</div><div class=\"line\"></div><div class=\"line\">    <span class=\"keyword\">if</span> ((viewFlags &amp; ENABLED_MASK) == DISABLED) &#123;</div><div class=\"line\">        <span class=\"keyword\">if</span> (action == MotionEvent.ACTION_UP &amp;&amp; (mPrivateFlags &amp; PFLAG_PRESSED) != <span class=\"number\">0</span>) &#123;</div><div class=\"line\">            setPressed(<span class=\"keyword\">false</span>);</div><div class=\"line\">        &#125;</div><div class=\"line\">        mPrivateFlags3 &amp;= ~PFLAG3_FINGER_DOWN;</div><div class=\"line\">        <span class=\"comment\">// A disabled view that is clickable still consumes the touch</span></div><div class=\"line\">        <span class=\"comment\">// events, it just doesn't respond to them.</span></div><div class=\"line\">      \t<span class=\"comment\">// 不可用状态下，view也会消耗事件，只是不响应它们</span></div><div class=\"line\">        <span class=\"keyword\">return</span> clickable;</div><div class=\"line\">    &#125;</div><div class=\"line\">    <span class=\"comment\">// ------------ 第一部分 结束  ------------</span></div><div class=\"line\">    </div><div class=\"line\">    <span class=\"comment\">// ------------ 第二部分 有TouchDelegate则交由TouchDelegate处理事件  ------------</span></div><div class=\"line\">    <span class=\"keyword\">if</span> (mTouchDelegate != <span class=\"keyword\">null</span>) &#123;</div><div class=\"line\">        <span class=\"keyword\">if</span> (mTouchDelegate.onTouchEvent(event)) &#123;</div><div class=\"line\">            <span class=\"keyword\">return</span> <span class=\"keyword\">true</span>;</div><div class=\"line\">        &#125;</div><div class=\"line\">    &#125;</div><div class=\"line\">    <span class=\"comment\">// ------------ 第二部分 结束  ------------</span></div><div class=\"line\">  </div><div class=\"line\">    <span class=\"comment\">// ------------ 第三部分 点击事件的具体处理  ------------</span></div><div class=\"line\">    <span class=\"keyword\">if</span> (clickable || (viewFlags &amp; TOOLTIP) == TOOLTIP) &#123;</div><div class=\"line\">        <span class=\"keyword\">switch</span> (action) &#123;</div><div class=\"line\">            <span class=\"keyword\">case</span> MotionEvent.ACTION_UP:</div><div class=\"line\">                mPrivateFlags3 &amp;= ~PFLAG3_FINGER_DOWN;</div><div class=\"line\">                <span class=\"keyword\">if</span> ((viewFlags &amp; TOOLTIP) == TOOLTIP) &#123;</div><div class=\"line\">                    handleTooltipUp();</div><div class=\"line\">                &#125;</div><div class=\"line\">                <span class=\"keyword\">if</span> (!clickable) &#123;</div><div class=\"line\">                    removeTapCallback();</div><div class=\"line\">                    removeLongPressCallback();</div><div class=\"line\">                    mInContextButtonPress = <span class=\"keyword\">false</span>;</div><div class=\"line\">                    mHasPerformedLongPress = <span class=\"keyword\">false</span>;</div><div class=\"line\">                    mIgnoreNextUpEvent = <span class=\"keyword\">false</span>;</div><div class=\"line\">                    <span class=\"keyword\">break</span>;</div><div class=\"line\">                &#125;</div><div class=\"line\">                <span class=\"keyword\">boolean</span> prepressed = (mPrivateFlags &amp; PFLAG_PREPRESSED) != <span class=\"number\">0</span>;</div><div class=\"line\">                <span class=\"keyword\">if</span> ((mPrivateFlags &amp; PFLAG_PRESSED) != <span class=\"number\">0</span> || prepressed) &#123;</div><div class=\"line\">                    <span class=\"comment\">// take focus if we don't have it already and we should in</span></div><div class=\"line\">                    <span class=\"comment\">// touch mode.</span></div><div class=\"line\">                    <span class=\"keyword\">boolean</span> focusTaken = <span class=\"keyword\">false</span>;</div><div class=\"line\">                    <span class=\"keyword\">if</span> (isFocusable() &amp;&amp; isFocusableInTouchMode() &amp;&amp; !isFocused()) &#123;</div><div class=\"line\">                        focusTaken = requestFocus();</div><div class=\"line\">                    &#125;</div><div class=\"line\"></div><div class=\"line\">                    <span class=\"keyword\">if</span> (prepressed) &#123;</div><div class=\"line\">                        <span class=\"comment\">// The button is being released before we actually</span></div><div class=\"line\">                        <span class=\"comment\">// showed it as pressed.  Make it show the pressed</span></div><div class=\"line\">                        <span class=\"comment\">// state now (before scheduling the click) to ensure</span></div><div class=\"line\">                        <span class=\"comment\">// the user sees it.</span></div><div class=\"line\">                        setPressed(<span class=\"keyword\">true</span>, x, y);</div><div class=\"line\">                    &#125;</div><div class=\"line\"></div><div class=\"line\">                    <span class=\"keyword\">if</span> (!mHasPerformedLongPress &amp;&amp; !mIgnoreNextUpEvent) &#123;</div><div class=\"line\">                        <span class=\"comment\">// This is a tap, so remove the longpress check</span></div><div class=\"line\">                        removeLongPressCallback();</div><div class=\"line\"></div><div class=\"line\">                        <span class=\"comment\">// Only perform take click actions if we were in the pressed state</span></div><div class=\"line\">                        <span class=\"keyword\">if</span> (!focusTaken) &#123;</div><div class=\"line\">                            <span class=\"comment\">// Use a Runnable and post this rather than calling</span></div><div class=\"line\">                            <span class=\"comment\">// performClick directly. This lets other visual state</span></div><div class=\"line\">                            <span class=\"comment\">// of the view update before click actions start.</span></div><div class=\"line\">                          \t<span class=\"comment\">// 8-1 针对点击事件处理 通过Runnable调用performClickInternal() ，最终调用performClick()方法</span></div><div class=\"line\">                            <span class=\"keyword\">if</span> (mPerformClick == <span class=\"keyword\">null</span>) &#123;</div><div class=\"line\">                                mPerformClick = <span class=\"keyword\">new</span> PerformClick();</div><div class=\"line\">                            &#125;</div><div class=\"line\">                            <span class=\"keyword\">if</span> (!post(mPerformClick)) &#123;</div><div class=\"line\">                                performClickInternal();</div><div class=\"line\">                            &#125;</div><div class=\"line\">                        &#125;</div><div class=\"line\">                    &#125;</div><div class=\"line\"></div><div class=\"line\">                    <span class=\"keyword\">if</span> (mUnsetPressedState == <span class=\"keyword\">null</span>) &#123;</div><div class=\"line\">                        mUnsetPressedState = <span class=\"keyword\">new</span> UnsetPressedState();</div><div class=\"line\">                    &#125;</div><div class=\"line\"></div><div class=\"line\">                    <span class=\"keyword\">if</span> (prepressed) &#123;</div><div class=\"line\">                        postDelayed(mUnsetPressedState,</div><div class=\"line\">                                ViewConfiguration.getPressedStateDuration());</div><div class=\"line\">                    &#125; <span class=\"keyword\">else</span> <span class=\"keyword\">if</span> (!post(mUnsetPressedState)) &#123;</div><div class=\"line\">                        <span class=\"comment\">// If the post failed, unpress right now</span></div><div class=\"line\">                        mUnsetPressedState.run();</div><div class=\"line\">                    &#125;</div><div class=\"line\"></div><div class=\"line\">                    removeTapCallback();</div><div class=\"line\">                &#125;</div><div class=\"line\">                mIgnoreNextUpEvent = <span class=\"keyword\">false</span>;</div><div class=\"line\">                <span class=\"keyword\">break</span>;</div><div class=\"line\"></div><div class=\"line\">            <span class=\"keyword\">case</span> MotionEvent.ACTION_DOWN:</div><div class=\"line\">                <span class=\"keyword\">if</span> (event.getSource() == InputDevice.SOURCE_TOUCHSCREEN) &#123;</div><div class=\"line\">                    mPrivateFlags3 |= PFLAG3_FINGER_DOWN;</div><div class=\"line\">                &#125;</div><div class=\"line\">                mHasPerformedLongPress = <span class=\"keyword\">false</span>;</div><div class=\"line\"></div><div class=\"line\">                <span class=\"keyword\">if</span> (!clickable) &#123;</div><div class=\"line\">                  \t<span class=\"comment\">// 8-2 针对长按事件处理 </span></div><div class=\"line\">                    checkForLongClick(<span class=\"number\">0</span>, x, y);</div><div class=\"line\">                    <span class=\"keyword\">break</span>;</div><div class=\"line\">                &#125;</div><div class=\"line\"></div><div class=\"line\">                <span class=\"keyword\">if</span> (performButtonActionOnTouchDown(event)) &#123;</div><div class=\"line\">                    <span class=\"keyword\">break</span>;</div><div class=\"line\">                &#125;</div><div class=\"line\"></div><div class=\"line\">                <span class=\"comment\">// Walk up the hierarchy to determine if we're inside a scrolling container.</span></div><div class=\"line\">                <span class=\"keyword\">boolean</span> isInScrollingContainer = isInScrollingContainer();</div><div class=\"line\"></div><div class=\"line\">                <span class=\"comment\">// For views inside a scrolling container, delay the pressed feedback for</span></div><div class=\"line\">                <span class=\"comment\">// a short period in case this is a scroll.</span></div><div class=\"line\">                <span class=\"keyword\">if</span> (isInScrollingContainer) &#123;</div><div class=\"line\">                    mPrivateFlags |= PFLAG_PREPRESSED;</div><div class=\"line\">                    <span class=\"keyword\">if</span> (mPendingCheckForTap == <span class=\"keyword\">null</span>) &#123;</div><div class=\"line\">                        mPendingCheckForTap = <span class=\"keyword\">new</span> CheckForTap();</div><div class=\"line\">                    &#125;</div><div class=\"line\">                    mPendingCheckForTap.x = event.getX();</div><div class=\"line\">                    mPendingCheckForTap.y = event.getY();</div><div class=\"line\">                    postDelayed(mPendingCheckForTap, ViewConfiguration.getTapTimeout());</div><div class=\"line\">                &#125; <span class=\"keyword\">else</span> &#123;</div><div class=\"line\">                    <span class=\"comment\">// Not inside a scrolling container, so show the feedback right away</span></div><div class=\"line\">                    setPressed(<span class=\"keyword\">true</span>, x, y);</div><div class=\"line\">                    checkForLongClick(<span class=\"number\">0</span>, x, y);</div><div class=\"line\">                &#125;</div><div class=\"line\">                <span class=\"keyword\">break</span>;</div><div class=\"line\"></div><div class=\"line\">            <span class=\"keyword\">case</span> MotionEvent.ACTION_CANCEL:</div><div class=\"line\">                <span class=\"keyword\">if</span> (clickable) &#123;</div><div class=\"line\">                    setPressed(<span class=\"keyword\">false</span>);</div><div class=\"line\">                &#125;</div><div class=\"line\">                removeTapCallback();</div><div class=\"line\">                removeLongPressCallback();</div><div class=\"line\">                mInContextButtonPress = <span class=\"keyword\">false</span>;</div><div class=\"line\">                mHasPerformedLongPress = <span class=\"keyword\">false</span>;</div><div class=\"line\">                mIgnoreNextUpEvent = <span class=\"keyword\">false</span>;</div><div class=\"line\">                mPrivateFlags3 &amp;= ~PFLAG3_FINGER_DOWN;</div><div class=\"line\">                <span class=\"keyword\">break</span>;</div><div class=\"line\"></div><div class=\"line\">            <span class=\"keyword\">case</span> MotionEvent.ACTION_MOVE:</div><div class=\"line\">                <span class=\"keyword\">if</span> (clickable) &#123;</div><div class=\"line\">                    drawableHotspotChanged(x, y);</div><div class=\"line\">                &#125;</div><div class=\"line\"></div><div class=\"line\">                <span class=\"comment\">// Be lenient about moving outside of buttons</span></div><div class=\"line\">                <span class=\"keyword\">if</span> (!pointInView(x, y, mTouchSlop)) &#123;</div><div class=\"line\">                    <span class=\"comment\">// Outside button</span></div><div class=\"line\">                    <span class=\"comment\">// Remove any future long press/tap checks</span></div><div class=\"line\">                    removeTapCallback();</div><div class=\"line\">                    removeLongPressCallback();</div><div class=\"line\">                    <span class=\"keyword\">if</span> ((mPrivateFlags &amp; PFLAG_PRESSED) != <span class=\"number\">0</span>) &#123;</div><div class=\"line\">                        setPressed(<span class=\"keyword\">false</span>);</div><div class=\"line\">                    &#125;</div><div class=\"line\">                    mPrivateFlags3 &amp;= ~PFLAG3_FINGER_DOWN;</div><div class=\"line\">                &#125;</div><div class=\"line\">                <span class=\"keyword\">break</span>;</div><div class=\"line\">        &#125;</div><div class=\"line\">        <span class=\"keyword\">return</span> <span class=\"keyword\">true</span>;</div><div class=\"line\">    &#125;</div><div class=\"line\">    <span class=\"comment\">// ------------ 第三部分 结束  ------------</span></div><div class=\"line\">    <span class=\"keyword\">return</span> <span class=\"keyword\">false</span>;</div><div class=\"line\">&#125;</div></pre></td></tr></table></figure>\n<p>从以上代码我们可以看到，View的OnTouchEvent方法主要分为三个部分，首先对不可用的状态进行处理，虽然处于不可用状态，但是还是会消费点击事件，只是没什么响应而已。第二部分则是对设置了<code>TouchDelegate</code>的处理。重点在第三部分，这里就是我们非常熟悉的针对MotionEvent不同action类型(DOWN、MOVE、CANCEL、UP)的处理。</p>\n<p>其中8-1代码处就是针对点击事件处理，通过post Runnable调用<code>performClickInternal()</code>，确保view的状态在点击前进行一遍更新。最终调用<code>performClick()</code>方法</p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div><div class=\"line\">14</div><div class=\"line\">15</div><div class=\"line\">16</div><div class=\"line\">17</div><div class=\"line\">18</div><div class=\"line\">19</div><div class=\"line\">20</div><div class=\"line\">21</div><div class=\"line\">22</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">boolean</span> <span class=\"title\">performClick</span><span class=\"params\">()</span> </span>&#123;</div><div class=\"line\">    <span class=\"comment\">// We still need to call this method to handle the cases where performClick() was called</span></div><div class=\"line\">    <span class=\"comment\">// externally, instead of through performClickInternal()</span></div><div class=\"line\">    notifyAutofillManagerOnClick();</div><div class=\"line\"></div><div class=\"line\">    <span class=\"keyword\">final</span> <span class=\"keyword\">boolean</span> result;</div><div class=\"line\">    <span class=\"keyword\">final</span> ListenerInfo li = mListenerInfo;</div><div class=\"line\">  \t<span class=\"comment\">// 在这里回调出去，具体处理View的onClick事件</span></div><div class=\"line\">    <span class=\"keyword\">if</span> (li != <span class=\"keyword\">null</span> &amp;&amp; li.mOnClickListener != <span class=\"keyword\">null</span>) &#123;</div><div class=\"line\">        playSoundEffect(SoundEffectConstants.CLICK);</div><div class=\"line\">        li.mOnClickListener.onClick(<span class=\"keyword\">this</span>);</div><div class=\"line\">        result = <span class=\"keyword\">true</span>;</div><div class=\"line\">    &#125; <span class=\"keyword\">else</span> &#123;</div><div class=\"line\">        result = <span class=\"keyword\">false</span>;</div><div class=\"line\">    &#125;</div><div class=\"line\"></div><div class=\"line\">    sendAccessibilityEvent(AccessibilityEvent.TYPE_VIEW_CLICKED);</div><div class=\"line\"></div><div class=\"line\">    notifyEnterOrExitForAutoFillIfNeeded(<span class=\"keyword\">true</span>);</div><div class=\"line\"></div><div class=\"line\">    <span class=\"keyword\">return</span> result;</div><div class=\"line\">&#125;</div></pre></td></tr></table></figure>\n<p>8-2处代码是在MotionEvent.ACTION_DOWN里去判断view要不要响应长按事件，具体实现跟点击事件类似，最终响应到View的<code>OnLongClickListener</code>去处理长按事件，这里具体就不再展开了。</p>\n</li>\n</ul>\n<p>总结</p>\n<ol>\n<li><code>onInterceptTouchEvent</code>方法代表是否需要拦截事件，<code>onTouch</code>和<code>onTouchEvent</code>方法的返回值代表是否消费事件</li>\n<li>事件从Activity一层一层往底部View进行分发，过程中，各个ViewGroup都可以选择拦截事件，拦截后则交由该ViewGroup的<code>onTouchEvent</code>处理，不再继续分发</li>\n<li>都不拦截的情况下，会分发到子View，如果view都不选择消费事件，事件会通过<code>onTouchEvent</code>一层一层往上冒泡，直到回到Activity的<code>onTouchEvent</code>，有一层选择消费事件，则不再往上传递</li>\n<li>子View可以通过<code>getParent().requestDisallowInterceptTouchEvent</code>来申请父控件不要拦截事件</li>\n<li>如果View没有消费<code>ACTION_DOWN</code>事件，之后的<code>ACTION_MOVE\\ACTION_UP</code>事件不会再接收</li>\n<li>当View设置了可点击、可常按，那么就算该View不可用，也会消费事件</li>\n<li><code>onTouch</code>优先级比<code>onTouchEvent</code>高，只有<code>onTouch</code>不执行的情况下，才会执行<code>onTouchEvent</code></li>\n</ol>\n<p>事件分发流程图如下：</p>\n<p><img src=\"https://bright-blog-1301150773.cos.ap-guangzhou.myqcloud.com/Touch%E4%BA%8B%E4%BB%B6%E5%88%86%E5%8F%91%E6%B5%81%E7%A8%8B.png\" alt=\"Touch事件分发流程\"></p>"},{"title":"使用Sparse Checkout，拉取Git仓库中指定的目录","date":"2020-09-10T16:00:00.000Z","_content":"\n某些git仓库经历了N多个版本，迭代。有可能仓库特别大，而开发新功能可能只需要该仓库中的某些文件夹。那么就可以使用`sparse checkout`拉取仓库中指定文件。\n\n<!--more-->\n\n### 未拉取仓库的情况\n```\n$mkdir project_folder\n$cd project_folder\n$git init\n$git remote add -f origin <url>\n```\n与远程项目关联上\n\n如果已经拉取过直接走下面的逻辑\n\n### 配置sparsecheckout\n接下来进入仓库目录，在`Config`中允许使用`Sparse Checkout`模式\n```\ngit config core.sparsecheckout true\n```\n\n### 配置指定目录\n编辑` .git/info/sparse-checkout `若没有此文件，需要手动创建\n1. 可以添加文件名称指定拉取文件夹\n```\nproduct\n```\n2. 也可以通过`!`设置排除的文件夹\n```\n*\n!Chromium/**\n!ChromiumRes/**\n```\n\n### 如果需要添加目录，就增加`sparse-checkout`的配置，再`checkout master`\n```bash\necho another_folder >> .git/info/sparse-checkout\ngit checkout master\n```\n\n","source":"_posts/使用Sparse Checkout，拉取Git仓库中指定的目录.md","raw":"---\ntitle: 使用Sparse Checkout，拉取Git仓库中指定的目录\ndate: 2020-09-11 \ntags: git技巧\ncategories: git\n\n---\n\n某些git仓库经历了N多个版本，迭代。有可能仓库特别大，而开发新功能可能只需要该仓库中的某些文件夹。那么就可以使用`sparse checkout`拉取仓库中指定文件。\n\n<!--more-->\n\n### 未拉取仓库的情况\n```\n$mkdir project_folder\n$cd project_folder\n$git init\n$git remote add -f origin <url>\n```\n与远程项目关联上\n\n如果已经拉取过直接走下面的逻辑\n\n### 配置sparsecheckout\n接下来进入仓库目录，在`Config`中允许使用`Sparse Checkout`模式\n```\ngit config core.sparsecheckout true\n```\n\n### 配置指定目录\n编辑` .git/info/sparse-checkout `若没有此文件，需要手动创建\n1. 可以添加文件名称指定拉取文件夹\n```\nproduct\n```\n2. 也可以通过`!`设置排除的文件夹\n```\n*\n!Chromium/**\n!ChromiumRes/**\n```\n\n### 如果需要添加目录，就增加`sparse-checkout`的配置，再`checkout master`\n```bash\necho another_folder >> .git/info/sparse-checkout\ngit checkout master\n```\n\n","slug":"使用Sparse Checkout，拉取Git仓库中指定的目录","published":1,"updated":"2021-01-23T15:44:55.450Z","comments":1,"layout":"post","photos":[],"link":"","_id":"ckk9w1mfn000ffw0icsclgqu2","content":"<p>某些git仓库经历了N多个版本，迭代。有可能仓库特别大，而开发新功能可能只需要该仓库中的某些文件夹。那么就可以使用<code>sparse checkout</code>拉取仓库中指定文件。</p>\n<a id=\"more\"></a>\n<h3 id=\"未拉取仓库的情况\"><a href=\"#未拉取仓库的情况\" class=\"headerlink\" title=\"未拉取仓库的情况\"></a>未拉取仓库的情况</h3><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div></pre></td><td class=\"code\"><pre><div class=\"line\">$mkdir project_folder</div><div class=\"line\">$cd project_folder</div><div class=\"line\">$git init</div><div class=\"line\">$git remote add -f origin &lt;url&gt;</div></pre></td></tr></table></figure>\n<p>与远程项目关联上</p>\n<p>如果已经拉取过直接走下面的逻辑</p>\n<h3 id=\"配置sparsecheckout\"><a href=\"#配置sparsecheckout\" class=\"headerlink\" title=\"配置sparsecheckout\"></a>配置sparsecheckout</h3><p>接下来进入仓库目录，在<code>Config</code>中允许使用<code>Sparse Checkout</code>模式<br><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div></pre></td><td class=\"code\"><pre><div class=\"line\">git config core.sparsecheckout true</div></pre></td></tr></table></figure></p>\n<h3 id=\"配置指定目录\"><a href=\"#配置指定目录\" class=\"headerlink\" title=\"配置指定目录\"></a>配置指定目录</h3><p>编辑<code>.git/info/sparse-checkout</code>若没有此文件，需要手动创建</p>\n<ol>\n<li><p>可以添加文件名称指定拉取文件夹</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div></pre></td><td class=\"code\"><pre><div class=\"line\">product</div></pre></td></tr></table></figure>\n</li>\n<li><p>也可以通过<code>!</code>设置排除的文件夹</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div></pre></td><td class=\"code\"><pre><div class=\"line\">*</div><div class=\"line\">!Chromium/**</div><div class=\"line\">!ChromiumRes/**</div></pre></td></tr></table></figure>\n</li>\n</ol>\n<h3 id=\"如果需要添加目录，就增加sparse-checkout的配置，再checkout-master\"><a href=\"#如果需要添加目录，就增加sparse-checkout的配置，再checkout-master\" class=\"headerlink\" title=\"如果需要添加目录，就增加sparse-checkout的配置，再checkout master\"></a>如果需要添加目录，就增加<code>sparse-checkout</code>的配置，再<code>checkout master</code></h3><figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"built_in\">echo</span> another_folder &gt;&gt; .git/info/sparse-checkout</div><div class=\"line\">git checkout master</div></pre></td></tr></table></figure>\n","excerpt":"<p>某些git仓库经历了N多个版本，迭代。有可能仓库特别大，而开发新功能可能只需要该仓库中的某些文件夹。那么就可以使用<code>sparse checkout</code>拉取仓库中指定文件。</p>","more":"<h3 id=\"未拉取仓库的情况\"><a href=\"#未拉取仓库的情况\" class=\"headerlink\" title=\"未拉取仓库的情况\"></a>未拉取仓库的情况</h3><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div></pre></td><td class=\"code\"><pre><div class=\"line\">$mkdir project_folder</div><div class=\"line\">$cd project_folder</div><div class=\"line\">$git init</div><div class=\"line\">$git remote add -f origin &lt;url&gt;</div></pre></td></tr></table></figure>\n<p>与远程项目关联上</p>\n<p>如果已经拉取过直接走下面的逻辑</p>\n<h3 id=\"配置sparsecheckout\"><a href=\"#配置sparsecheckout\" class=\"headerlink\" title=\"配置sparsecheckout\"></a>配置sparsecheckout</h3><p>接下来进入仓库目录，在<code>Config</code>中允许使用<code>Sparse Checkout</code>模式<br><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div></pre></td><td class=\"code\"><pre><div class=\"line\">git config core.sparsecheckout true</div></pre></td></tr></table></figure></p>\n<h3 id=\"配置指定目录\"><a href=\"#配置指定目录\" class=\"headerlink\" title=\"配置指定目录\"></a>配置指定目录</h3><p>编辑<code>.git/info/sparse-checkout</code>若没有此文件，需要手动创建</p>\n<ol>\n<li><p>可以添加文件名称指定拉取文件夹</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div></pre></td><td class=\"code\"><pre><div class=\"line\">product</div></pre></td></tr></table></figure>\n</li>\n<li><p>也可以通过<code>!</code>设置排除的文件夹</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div></pre></td><td class=\"code\"><pre><div class=\"line\">*</div><div class=\"line\">!Chromium/**</div><div class=\"line\">!ChromiumRes/**</div></pre></td></tr></table></figure>\n</li>\n</ol>\n<h3 id=\"如果需要添加目录，就增加sparse-checkout的配置，再checkout-master\"><a href=\"#如果需要添加目录，就增加sparse-checkout的配置，再checkout-master\" class=\"headerlink\" title=\"如果需要添加目录，就增加sparse-checkout的配置，再checkout master\"></a>如果需要添加目录，就增加<code>sparse-checkout</code>的配置，再<code>checkout master</code></h3><figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"built_in\">echo</span> another_folder &gt;&gt; .git/info/sparse-checkout</div><div class=\"line\">git checkout master</div></pre></td></tr></table></figure>"}],"PostAsset":[],"PostCategory":[{"post_id":"ckk9w1mfi0007fw0i7hz94kzg","category_id":"ckk9w1mfb0004fw0i1mb49d7e","_id":"ckk9w1mfm000dfw0i6srpakw0"},{"post_id":"ckk9w1mf40000fw0icb4iq8d0","category_id":"ckk9w1mfb0004fw0i1mb49d7e","_id":"ckk9w1mfp000ifw0ipdtwm4wu"},{"post_id":"ckk9w1mfj0008fw0i0j82wjsr","category_id":"ckk9w1mfb0004fw0i1mb49d7e","_id":"ckk9w1mfq000kfw0ikt5964so"},{"post_id":"ckk9w1mfl000cfw0iuqevbbvc","category_id":"ckk9w1mfb0004fw0i1mb49d7e","_id":"ckk9w1mfr000nfw0izrwbw7kp"},{"post_id":"ckk9w1mf80002fw0iv59a5tk6","category_id":"ckk9w1mfk0009fw0ijmna0vuv","_id":"ckk9w1mfs000pfw0ie2a1t7df"},{"post_id":"ckk9w1mfn000ffw0icsclgqu2","category_id":"ckk9w1mfk0009fw0ijmna0vuv","_id":"ckk9w1mfs000rfw0i2hfuy230"},{"post_id":"ckk9w1mfg0006fw0ib6y3wqrl","category_id":"ckk9w1mfb0004fw0i1mb49d7e","_id":"ckk9w1mfs000tfw0irsmnq451"}],"PostTag":[{"post_id":"ckk9w1mfi0007fw0i7hz94kzg","tag_id":"ckk9w1mfg0005fw0i66f0xqrl","_id":"ckk9w1mfl000bfw0id8d16zdj"},{"post_id":"ckk9w1mf40000fw0icb4iq8d0","tag_id":"ckk9w1mfg0005fw0i66f0xqrl","_id":"ckk9w1mfm000efw0ic34xy5ra"},{"post_id":"ckk9w1mfj0008fw0i0j82wjsr","tag_id":"ckk9w1mfg0005fw0i66f0xqrl","_id":"ckk9w1mfp000jfw0irse9lbdt"},{"post_id":"ckk9w1mf80002fw0iv59a5tk6","tag_id":"ckk9w1mfk000afw0igu2a3w6k","_id":"ckk9w1mfq000lfw0ibx274s5x"},{"post_id":"ckk9w1mfn000ffw0icsclgqu2","tag_id":"ckk9w1mfk000afw0igu2a3w6k","_id":"ckk9w1mfr000ofw0ilgdooduj"},{"post_id":"ckk9w1mfg0006fw0ib6y3wqrl","tag_id":"ckk9w1mfg0005fw0i66f0xqrl","_id":"ckk9w1mfs000qfw0i6ghdrrhk"},{"post_id":"ckk9w1mfl000cfw0iuqevbbvc","tag_id":"ckk9w1mfg0005fw0i66f0xqrl","_id":"ckk9w1mfs000sfw0idp5fe207"},{"post_id":"ckk9w1mfl000cfw0iuqevbbvc","tag_id":"ckk9w1mfr000mfw0i0i152rqi","_id":"ckk9w1mft000ufw0i0esoaoha"}],"Tag":[{"name":"Android","_id":"ckk9w1mfg0005fw0i66f0xqrl"},{"name":"git技巧","_id":"ckk9w1mfk000afw0igu2a3w6k"},{"name":"源码分析","_id":"ckk9w1mfr000mfw0i0i152rqi"}]}}